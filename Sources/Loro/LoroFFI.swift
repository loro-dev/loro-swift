// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(loroFFI)
import loroFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_loro_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_loro_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterInt32: FfiConverterPrimitive {
    typealias FfiType = Int32
    typealias SwiftType = Int32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int32, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterInt64: FfiConverterPrimitive {
    typealias FfiType = Int64
    typealias SwiftType = Int64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int64, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDouble: FfiConverterPrimitive {
    typealias FfiType = Double
    typealias SwiftType = Double

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Double {
        return try lift(readDouble(&buf))
    }

    public static func write(_ value: Double, into buf: inout [UInt8]) {
        writeDouble(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}




/**
 * Deprecated, use `EphemeralStore` instead. 
 */
public protocol AwarenessProtocol : AnyObject {
    
    func apply(encodedPeersInfo: Data)  -> AwarenessPeerUpdate
    
    func encode(peers: [UInt64])  -> Data
    
    func encodeAll()  -> Data
    
    func getAllStates()  -> [UInt64: PeerInfo]
    
    func getLocalState()  -> LoroValue?
    
    func peer()  -> UInt64
    
    func removeOutdated()  -> [UInt64]
    
    func setLocalState(value: LoroValueLike) 
    
}

/**
 * Deprecated, use `EphemeralStore` instead. 
 */
open class Awareness:
    AwarenessProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_awareness(self.pointer, $0) }
    }
public convenience init(peer: UInt64, timeout: Int64) {
    let pointer =
        try! rustCall() {
    uniffi_loro_fn_constructor_awareness_new(
        FfiConverterUInt64.lower(peer),
        FfiConverterInt64.lower(timeout),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_awareness(pointer, $0) }
    }

    

    
open func apply(encodedPeersInfo: Data) -> AwarenessPeerUpdate {
    return try!  FfiConverterTypeAwarenessPeerUpdate.lift(try! rustCall() {
    uniffi_loro_fn_method_awareness_apply(self.uniffiClonePointer(),
        FfiConverterData.lower(encodedPeersInfo),$0
    )
})
}
    
open func encode(peers: [UInt64]) -> Data {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_loro_fn_method_awareness_encode(self.uniffiClonePointer(),
        FfiConverterSequenceUInt64.lower(peers),$0
    )
})
}
    
open func encodeAll() -> Data {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_loro_fn_method_awareness_encode_all(self.uniffiClonePointer(),$0
    )
})
}
    
open func getAllStates() -> [UInt64: PeerInfo] {
    return try!  FfiConverterDictionaryUInt64TypePeerInfo.lift(try! rustCall() {
    uniffi_loro_fn_method_awareness_get_all_states(self.uniffiClonePointer(),$0
    )
})
}
    
open func getLocalState() -> LoroValue? {
    return try!  FfiConverterOptionTypeLoroValue.lift(try! rustCall() {
    uniffi_loro_fn_method_awareness_get_local_state(self.uniffiClonePointer(),$0
    )
})
}
    
open func peer() -> UInt64 {
    return try!  FfiConverterUInt64.lift(try! rustCall() {
    uniffi_loro_fn_method_awareness_peer(self.uniffiClonePointer(),$0
    )
})
}
    
open func removeOutdated() -> [UInt64] {
    return try!  FfiConverterSequenceUInt64.lift(try! rustCall() {
    uniffi_loro_fn_method_awareness_remove_outdated(self.uniffiClonePointer(),$0
    )
})
}
    
open func setLocalState(value: LoroValueLike) {try! rustCall() {
    uniffi_loro_fn_method_awareness_set_local_state(self.uniffiClonePointer(),
        FfiConverterTypeLoroValueLike.lower(value),$0
    )
}
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAwareness: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Awareness

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Awareness {
        return Awareness(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Awareness) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Awareness {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Awareness, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAwareness_lift(_ pointer: UnsafeMutableRawPointer) throws -> Awareness {
    return try FfiConverterTypeAwareness.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAwareness_lower(_ value: Awareness) -> UnsafeMutableRawPointer {
    return FfiConverterTypeAwareness.lower(value)
}




public protocol ChangeAncestorsTraveler : AnyObject {
    
    func travel(change: ChangeMeta)  -> Bool
    
}

open class ChangeAncestorsTravelerImpl:
    ChangeAncestorsTraveler {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_changeancestorstraveler(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_changeancestorstraveler(pointer, $0) }
    }

    

    
open func travel(change: ChangeMeta) -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_loro_fn_method_changeancestorstraveler_travel(self.uniffiClonePointer(),
        FfiConverterTypeChangeMeta.lower(change),$0
    )
})
}
    

}
// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceChangeAncestorsTraveler {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceChangeAncestorsTraveler = UniffiVTableCallbackInterfaceChangeAncestorsTraveler(
        travel: { (
            uniffiHandle: UInt64,
            change: RustBuffer,
            uniffiOutReturn: UnsafeMutablePointer<Int8>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> Bool in
                guard let uniffiObj = try? FfiConverterTypeChangeAncestorsTraveler.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.travel(
                     change: try FfiConverterTypeChangeMeta.lift(change)
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterBool.lower($0) }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterTypeChangeAncestorsTraveler.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface ChangeAncestorsTraveler: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitChangeAncestorsTraveler() {
    uniffi_loro_fn_init_callback_vtable_changeancestorstraveler(&UniffiCallbackInterfaceChangeAncestorsTraveler.vtable)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeChangeAncestorsTraveler: FfiConverter {
    fileprivate static var handleMap = UniffiHandleMap<ChangeAncestorsTraveler>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ChangeAncestorsTraveler

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ChangeAncestorsTraveler {
        return ChangeAncestorsTravelerImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ChangeAncestorsTraveler) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ChangeAncestorsTraveler {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ChangeAncestorsTraveler, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeChangeAncestorsTraveler_lift(_ pointer: UnsafeMutableRawPointer) throws -> ChangeAncestorsTraveler {
    return try FfiConverterTypeChangeAncestorsTraveler.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeChangeAncestorsTraveler_lower(_ value: ChangeAncestorsTraveler) -> UnsafeMutableRawPointer {
    return FfiConverterTypeChangeAncestorsTraveler.lower(value)
}




public protocol ChangeModifierProtocol : AnyObject {
    
    func setMessage(msg: String) 
    
    func setTimestamp(timestamp: Int64) 
    
}

open class ChangeModifier:
    ChangeModifierProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_changemodifier(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_changemodifier(pointer, $0) }
    }

    

    
open func setMessage(msg: String) {try! rustCall() {
    uniffi_loro_fn_method_changemodifier_set_message(self.uniffiClonePointer(),
        FfiConverterString.lower(msg),$0
    )
}
}
    
open func setTimestamp(timestamp: Int64) {try! rustCall() {
    uniffi_loro_fn_method_changemodifier_set_timestamp(self.uniffiClonePointer(),
        FfiConverterInt64.lower(timestamp),$0
    )
}
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeChangeModifier: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ChangeModifier

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ChangeModifier {
        return ChangeModifier(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ChangeModifier) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ChangeModifier {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ChangeModifier, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeChangeModifier_lift(_ pointer: UnsafeMutableRawPointer) throws -> ChangeModifier {
    return try FfiConverterTypeChangeModifier.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeChangeModifier_lower(_ value: ChangeModifier) -> UnsafeMutableRawPointer {
    return FfiConverterTypeChangeModifier.lower(value)
}




public protocol ConfigureProtocol : AnyObject {
    
    func fork()  -> Configure
    
    func mergeInterval()  -> Int64
    
    func recordTimestamp()  -> Bool
    
    func setMergeInterval(interval: Int64) 
    
    func setRecordTimestamp(record: Bool) 
    
    func textStyleConfig()  -> StyleConfigMap
    
}

open class Configure:
    ConfigureProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_configure(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_configure(pointer, $0) }
    }

    

    
open func fork() -> Configure {
    return try!  FfiConverterTypeConfigure.lift(try! rustCall() {
    uniffi_loro_fn_method_configure_fork(self.uniffiClonePointer(),$0
    )
})
}
    
open func mergeInterval() -> Int64 {
    return try!  FfiConverterInt64.lift(try! rustCall() {
    uniffi_loro_fn_method_configure_merge_interval(self.uniffiClonePointer(),$0
    )
})
}
    
open func recordTimestamp() -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_loro_fn_method_configure_record_timestamp(self.uniffiClonePointer(),$0
    )
})
}
    
open func setMergeInterval(interval: Int64) {try! rustCall() {
    uniffi_loro_fn_method_configure_set_merge_interval(self.uniffiClonePointer(),
        FfiConverterInt64.lower(interval),$0
    )
}
}
    
open func setRecordTimestamp(record: Bool) {try! rustCall() {
    uniffi_loro_fn_method_configure_set_record_timestamp(self.uniffiClonePointer(),
        FfiConverterBool.lower(record),$0
    )
}
}
    
open func textStyleConfig() -> StyleConfigMap {
    return try!  FfiConverterTypeStyleConfigMap.lift(try! rustCall() {
    uniffi_loro_fn_method_configure_text_style_config(self.uniffiClonePointer(),$0
    )
})
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeConfigure: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Configure

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Configure {
        return Configure(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Configure) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Configure {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Configure, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConfigure_lift(_ pointer: UnsafeMutableRawPointer) throws -> Configure {
    return try FfiConverterTypeConfigure.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConfigure_lower(_ value: Configure) -> UnsafeMutableRawPointer {
    return FfiConverterTypeConfigure.lower(value)
}




public protocol ContainerIdLike: Any {
    
    func asContainerId(ty: ContainerType)  -> ContainerId
    
}

open class ContainerIdLikeImpl:
    ContainerIdLike {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_containeridlike(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_containeridlike(pointer, $0) }
    }

    

    
open func asContainerId(ty: ContainerType) -> ContainerId {
    return try!  FfiConverterTypeContainerID.lift(try! rustCall() {
    uniffi_loro_fn_method_containeridlike_as_container_id(self.uniffiClonePointer(),
        FfiConverterTypeContainerType.lower(ty),$0
    )
})
}
    

}


// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceContainerIdLike {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceContainerIdLike = UniffiVTableCallbackInterfaceContainerIdLike(
        asContainerId: { (
            uniffiHandle: UInt64,
            ty: RustBuffer,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> ContainerId in
                guard let uniffiObj = try? FfiConverterTypeContainerIdLike.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.asContainerId(
                     ty: try FfiConverterTypeContainerType.lift(ty)
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterTypeContainerID.lower($0) }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterTypeContainerIdLike.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface ContainerIdLike: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitContainerIdLike() {
    uniffi_loro_fn_init_callback_vtable_containeridlike(&UniffiCallbackInterfaceContainerIdLike.vtable)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeContainerIdLike: FfiConverter {
    fileprivate static var handleMap = UniffiHandleMap<ContainerIdLike>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ContainerIdLike

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ContainerIdLike {
        return ContainerIdLikeImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ContainerIdLike) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ContainerIdLike {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ContainerIdLike, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeContainerIdLike_lift(_ pointer: UnsafeMutableRawPointer) throws -> ContainerIdLike {
    return try FfiConverterTypeContainerIdLike.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeContainerIdLike_lower(_ value: ContainerIdLike) -> UnsafeMutableRawPointer {
    return FfiConverterTypeContainerIdLike.lower(value)
}




public protocol CursorProtocol : AnyObject {
    
}

open class Cursor:
    CursorProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_cursor(self.pointer, $0) }
    }
public convenience init(id: Id?, container: ContainerId, side: Side, originPos: UInt32) {
    let pointer =
        try! rustCall() {
    uniffi_loro_fn_constructor_cursor_new(
        FfiConverterOptionTypeID.lower(id),
        FfiConverterTypeContainerID.lower(container),
        FfiConverterTypeSide.lower(side),
        FfiConverterUInt32.lower(originPos),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_cursor(pointer, $0) }
    }

    

    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCursor: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Cursor

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Cursor {
        return Cursor(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Cursor) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Cursor {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Cursor, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCursor_lift(_ pointer: UnsafeMutableRawPointer) throws -> Cursor {
    return try FfiConverterTypeCursor.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCursor_lower(_ value: Cursor) -> UnsafeMutableRawPointer {
    return FfiConverterTypeCursor.lower(value)
}




public protocol DiffBatchProtocol : AnyObject {
    
    /**
     * Returns an iterator over the diffs in this batch, in the order they were added.
     *
     * The iterator yields tuples of `(&ContainerID, &Diff)` where:
     * - `ContainerID` is the ID of the container that was modified
     * - `Diff` contains the actual changes made to that container
     *
     * The order of the diffs is preserved from when they were originally added to the batch.
     */
    func getDiff()  -> [ContainerIdAndDiff]
    
    /**
     * Push a new event to the batch.
     *
     * If the cid already exists in the batch, return Err
     */
    func push(cid: ContainerId, diff: Diff)  -> Diff?
    
}

open class DiffBatch:
    DiffBatchProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_diffbatch(self.pointer, $0) }
    }
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_loro_fn_constructor_diffbatch_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_diffbatch(pointer, $0) }
    }

    

    
    /**
     * Returns an iterator over the diffs in this batch, in the order they were added.
     *
     * The iterator yields tuples of `(&ContainerID, &Diff)` where:
     * - `ContainerID` is the ID of the container that was modified
     * - `Diff` contains the actual changes made to that container
     *
     * The order of the diffs is preserved from when they were originally added to the batch.
     */
open func getDiff() -> [ContainerIdAndDiff] {
    return try!  FfiConverterSequenceTypeContainerIDAndDiff.lift(try! rustCall() {
    uniffi_loro_fn_method_diffbatch_get_diff(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Push a new event to the batch.
     *
     * If the cid already exists in the batch, return Err
     */
open func push(cid: ContainerId, diff: Diff) -> Diff? {
    return try!  FfiConverterOptionTypeDiff.lift(try! rustCall() {
    uniffi_loro_fn_method_diffbatch_push(self.uniffiClonePointer(),
        FfiConverterTypeContainerID.lower(cid),
        FfiConverterTypeDiff.lower(diff),$0
    )
})
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeDiffBatch: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = DiffBatch

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> DiffBatch {
        return DiffBatch(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: DiffBatch) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DiffBatch {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: DiffBatch, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDiffBatch_lift(_ pointer: UnsafeMutableRawPointer) throws -> DiffBatch {
    return try FfiConverterTypeDiffBatch.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDiffBatch_lower(_ value: DiffBatch) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDiffBatch.lower(value)
}




public protocol EphemeralStoreProtocol : AnyObject {
    
    func apply(data: Data) 
    
    func delete(key: String) 
    
    func encode(key: String)  -> Data
    
    func encodeAll()  -> Data
    
    func get(key: String)  -> LoroValue?
    
    func getAllStates()  -> [String: LoroValue]
    
    func keys()  -> [String]
    
    func removeOutdated() 
    
    func set(key: String, value: LoroValueLike) 
    
    func subscribe(listener: EphemeralSubscriber)  -> Subscription
    
    func subscribeLocalUpdate(listener: LocalEphemeralListener)  -> Subscription
    
}

open class EphemeralStore:
    EphemeralStoreProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_ephemeralstore(self.pointer, $0) }
    }
public convenience init(timeout: Int64) {
    let pointer =
        try! rustCall() {
    uniffi_loro_fn_constructor_ephemeralstore_new(
        FfiConverterInt64.lower(timeout),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_ephemeralstore(pointer, $0) }
    }

    

    
open func apply(data: Data) {try! rustCall() {
    uniffi_loro_fn_method_ephemeralstore_apply(self.uniffiClonePointer(),
        FfiConverterData.lower(data),$0
    )
}
}
    
open func delete(key: String) {try! rustCall() {
    uniffi_loro_fn_method_ephemeralstore_delete(self.uniffiClonePointer(),
        FfiConverterString.lower(key),$0
    )
}
}
    
open func encode(key: String) -> Data {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_loro_fn_method_ephemeralstore_encode(self.uniffiClonePointer(),
        FfiConverterString.lower(key),$0
    )
})
}
    
open func encodeAll() -> Data {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_loro_fn_method_ephemeralstore_encode_all(self.uniffiClonePointer(),$0
    )
})
}
    
open func get(key: String) -> LoroValue? {
    return try!  FfiConverterOptionTypeLoroValue.lift(try! rustCall() {
    uniffi_loro_fn_method_ephemeralstore_get(self.uniffiClonePointer(),
        FfiConverterString.lower(key),$0
    )
})
}
    
open func getAllStates() -> [String: LoroValue] {
    return try!  FfiConverterDictionaryStringTypeLoroValue.lift(try! rustCall() {
    uniffi_loro_fn_method_ephemeralstore_get_all_states(self.uniffiClonePointer(),$0
    )
})
}
    
open func keys() -> [String] {
    return try!  FfiConverterSequenceString.lift(try! rustCall() {
    uniffi_loro_fn_method_ephemeralstore_keys(self.uniffiClonePointer(),$0
    )
})
}
    
open func removeOutdated() {try! rustCall() {
    uniffi_loro_fn_method_ephemeralstore_remove_outdated(self.uniffiClonePointer(),$0
    )
}
}
    
open func set(key: String, value: LoroValueLike) {try! rustCall() {
    uniffi_loro_fn_method_ephemeralstore_set(self.uniffiClonePointer(),
        FfiConverterString.lower(key),
        FfiConverterTypeLoroValueLike.lower(value),$0
    )
}
}
    
open func subscribe(listener: EphemeralSubscriber) -> Subscription {
    return try!  FfiConverterTypeSubscription.lift(try! rustCall() {
    uniffi_loro_fn_method_ephemeralstore_subscribe(self.uniffiClonePointer(),
        FfiConverterTypeEphemeralSubscriber.lower(listener),$0
    )
})
}
    
open func subscribeLocalUpdate(listener: LocalEphemeralListener) -> Subscription {
    return try!  FfiConverterTypeSubscription.lift(try! rustCall() {
    uniffi_loro_fn_method_ephemeralstore_subscribe_local_update(self.uniffiClonePointer(),
        FfiConverterTypeLocalEphemeralListener.lower(listener),$0
    )
})
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeEphemeralStore: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = EphemeralStore

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> EphemeralStore {
        return EphemeralStore(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: EphemeralStore) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> EphemeralStore {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: EphemeralStore, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEphemeralStore_lift(_ pointer: UnsafeMutableRawPointer) throws -> EphemeralStore {
    return try FfiConverterTypeEphemeralStore.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEphemeralStore_lower(_ value: EphemeralStore) -> UnsafeMutableRawPointer {
    return FfiConverterTypeEphemeralStore.lower(value)
}




public protocol EphemeralSubscriber : AnyObject {
    
    func onEphemeralEvent(event: EphemeralStoreEvent) 
    
}

open class EphemeralSubscriberImpl:
    EphemeralSubscriber {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_ephemeralsubscriber(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_ephemeralsubscriber(pointer, $0) }
    }

    

    
open func onEphemeralEvent(event: EphemeralStoreEvent) {try! rustCall() {
    uniffi_loro_fn_method_ephemeralsubscriber_on_ephemeral_event(self.uniffiClonePointer(),
        FfiConverterTypeEphemeralStoreEvent.lower(event),$0
    )
}
}
    

}


// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceEphemeralSubscriber {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceEphemeralSubscriber = UniffiVTableCallbackInterfaceEphemeralSubscriber(
        onEphemeralEvent: { (
            uniffiHandle: UInt64,
            event: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterTypeEphemeralSubscriber.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.onEphemeralEvent(
                     event: try FfiConverterTypeEphemeralStoreEvent.lift(event)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterTypeEphemeralSubscriber.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface EphemeralSubscriber: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitEphemeralSubscriber() {
    uniffi_loro_fn_init_callback_vtable_ephemeralsubscriber(&UniffiCallbackInterfaceEphemeralSubscriber.vtable)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeEphemeralSubscriber: FfiConverter {
    fileprivate static var handleMap = UniffiHandleMap<EphemeralSubscriber>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = EphemeralSubscriber

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> EphemeralSubscriber {
        return EphemeralSubscriberImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: EphemeralSubscriber) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> EphemeralSubscriber {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: EphemeralSubscriber, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEphemeralSubscriber_lift(_ pointer: UnsafeMutableRawPointer) throws -> EphemeralSubscriber {
    return try FfiConverterTypeEphemeralSubscriber.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEphemeralSubscriber_lower(_ value: EphemeralSubscriber) -> UnsafeMutableRawPointer {
    return FfiConverterTypeEphemeralSubscriber.lower(value)
}




public protocol FirstCommitFromPeerCallback : AnyObject {
    
    func onFirstCommitFromPeer(payload: FirstCommitFromPeerPayload) 
    
}

open class FirstCommitFromPeerCallbackImpl:
    FirstCommitFromPeerCallback {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_firstcommitfrompeercallback(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_firstcommitfrompeercallback(pointer, $0) }
    }

    

    
open func onFirstCommitFromPeer(payload: FirstCommitFromPeerPayload) {try! rustCall() {
    uniffi_loro_fn_method_firstcommitfrompeercallback_on_first_commit_from_peer(self.uniffiClonePointer(),
        FfiConverterTypeFirstCommitFromPeerPayload.lower(payload),$0
    )
}
}
    

}


// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceFirstCommitFromPeerCallback {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceFirstCommitFromPeerCallback = UniffiVTableCallbackInterfaceFirstCommitFromPeerCallback(
        onFirstCommitFromPeer: { (
            uniffiHandle: UInt64,
            payload: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterTypeFirstCommitFromPeerCallback.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.onFirstCommitFromPeer(
                     payload: try FfiConverterTypeFirstCommitFromPeerPayload.lift(payload)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterTypeFirstCommitFromPeerCallback.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface FirstCommitFromPeerCallback: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitFirstCommitFromPeerCallback() {
    uniffi_loro_fn_init_callback_vtable_firstcommitfrompeercallback(&UniffiCallbackInterfaceFirstCommitFromPeerCallback.vtable)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFirstCommitFromPeerCallback: FfiConverter {
    fileprivate static var handleMap = UniffiHandleMap<FirstCommitFromPeerCallback>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = FirstCommitFromPeerCallback

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> FirstCommitFromPeerCallback {
        return FirstCommitFromPeerCallbackImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: FirstCommitFromPeerCallback) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FirstCommitFromPeerCallback {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: FirstCommitFromPeerCallback, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFirstCommitFromPeerCallback_lift(_ pointer: UnsafeMutableRawPointer) throws -> FirstCommitFromPeerCallback {
    return try FfiConverterTypeFirstCommitFromPeerCallback.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFirstCommitFromPeerCallback_lower(_ value: FirstCommitFromPeerCallback) -> UnsafeMutableRawPointer {
    return FfiConverterTypeFirstCommitFromPeerCallback.lower(value)
}




public protocol FractionalIndexProtocol : AnyObject {
    
    func toString()  -> String
    
}

open class FractionalIndex:
    FractionalIndexProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_fractionalindex(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_fractionalindex(pointer, $0) }
    }

    
public static func fromBytes(bytes: Data) -> FractionalIndex {
    return try!  FfiConverterTypeFractionalIndex.lift(try! rustCall() {
    uniffi_loro_fn_constructor_fractionalindex_from_bytes(
        FfiConverterData.lower(bytes),$0
    )
})
}
    
public static func fromHexString(str: String) -> FractionalIndex {
    return try!  FfiConverterTypeFractionalIndex.lift(try! rustCall() {
    uniffi_loro_fn_constructor_fractionalindex_from_hex_string(
        FfiConverterString.lower(str),$0
    )
})
}
    

    
open func toString() -> String {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_loro_fn_method_fractionalindex_to_string(self.uniffiClonePointer(),$0
    )
})
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFractionalIndex: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = FractionalIndex

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> FractionalIndex {
        return FractionalIndex(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: FractionalIndex) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FractionalIndex {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: FractionalIndex, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFractionalIndex_lift(_ pointer: UnsafeMutableRawPointer) throws -> FractionalIndex {
    return try FfiConverterTypeFractionalIndex.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFractionalIndex_lower(_ value: FractionalIndex) -> UnsafeMutableRawPointer {
    return FfiConverterTypeFractionalIndex.lower(value)
}




public protocol FrontiersProtocol : AnyObject {
    
    func encode()  -> Data
    
    func eq(other: Frontiers)  -> Bool
    
}

open class Frontiers:
    FrontiersProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_frontiers(self.pointer, $0) }
    }
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_loro_fn_constructor_frontiers_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_frontiers(pointer, $0) }
    }

    
public static func decode(bytes: Data)throws  -> Frontiers {
    return try  FfiConverterTypeFrontiers.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_constructor_frontiers_decode(
        FfiConverterData.lower(bytes),$0
    )
})
}
    
public static func fromId(id: Id) -> Frontiers {
    return try!  FfiConverterTypeFrontiers.lift(try! rustCall() {
    uniffi_loro_fn_constructor_frontiers_from_id(
        FfiConverterTypeID.lower(id),$0
    )
})
}
    
public static func fromIds(ids: [Id]) -> Frontiers {
    return try!  FfiConverterTypeFrontiers.lift(try! rustCall() {
    uniffi_loro_fn_constructor_frontiers_from_ids(
        FfiConverterSequenceTypeID.lower(ids),$0
    )
})
}
    

    
open func encode() -> Data {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_loro_fn_method_frontiers_encode(self.uniffiClonePointer(),$0
    )
})
}
    
open func eq(other: Frontiers) -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_loro_fn_method_frontiers_eq(self.uniffiClonePointer(),
        FfiConverterTypeFrontiers.lower(other),$0
    )
})
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFrontiers: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Frontiers

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Frontiers {
        return Frontiers(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Frontiers) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Frontiers {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Frontiers, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFrontiers_lift(_ pointer: UnsafeMutableRawPointer) throws -> Frontiers {
    return try FfiConverterTypeFrontiers.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFrontiers_lower(_ value: Frontiers) -> UnsafeMutableRawPointer {
    return FfiConverterTypeFrontiers.lower(value)
}




public protocol LocalEphemeralListener : AnyObject {
    
    func onEphemeralUpdate(update: Data) 
    
}

open class LocalEphemeralListenerImpl:
    LocalEphemeralListener {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_localephemerallistener(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_localephemerallistener(pointer, $0) }
    }

    

    
open func onEphemeralUpdate(update: Data) {try! rustCall() {
    uniffi_loro_fn_method_localephemerallistener_on_ephemeral_update(self.uniffiClonePointer(),
        FfiConverterData.lower(update),$0
    )
}
}
    

}


// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceLocalEphemeralListener {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceLocalEphemeralListener = UniffiVTableCallbackInterfaceLocalEphemeralListener(
        onEphemeralUpdate: { (
            uniffiHandle: UInt64,
            update: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterTypeLocalEphemeralListener.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.onEphemeralUpdate(
                     update: try FfiConverterData.lift(update)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterTypeLocalEphemeralListener.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface LocalEphemeralListener: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitLocalEphemeralListener() {
    uniffi_loro_fn_init_callback_vtable_localephemerallistener(&UniffiCallbackInterfaceLocalEphemeralListener.vtable)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLocalEphemeralListener: FfiConverter {
    fileprivate static var handleMap = UniffiHandleMap<LocalEphemeralListener>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LocalEphemeralListener

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LocalEphemeralListener {
        return LocalEphemeralListenerImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LocalEphemeralListener) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LocalEphemeralListener {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LocalEphemeralListener, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLocalEphemeralListener_lift(_ pointer: UnsafeMutableRawPointer) throws -> LocalEphemeralListener {
    return try FfiConverterTypeLocalEphemeralListener.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLocalEphemeralListener_lower(_ value: LocalEphemeralListener) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLocalEphemeralListener.lower(value)
}




public protocol LocalUpdateCallback : AnyObject {
    
    func onLocalUpdate(update: Data) 
    
}

open class LocalUpdateCallbackImpl:
    LocalUpdateCallback {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_localupdatecallback(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_localupdatecallback(pointer, $0) }
    }

    

    
open func onLocalUpdate(update: Data) {try! rustCall() {
    uniffi_loro_fn_method_localupdatecallback_on_local_update(self.uniffiClonePointer(),
        FfiConverterData.lower(update),$0
    )
}
}
    

}


// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceLocalUpdateCallback {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceLocalUpdateCallback = UniffiVTableCallbackInterfaceLocalUpdateCallback(
        onLocalUpdate: { (
            uniffiHandle: UInt64,
            update: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterTypeLocalUpdateCallback.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.onLocalUpdate(
                     update: try FfiConverterData.lift(update)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterTypeLocalUpdateCallback.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface LocalUpdateCallback: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitLocalUpdateCallback() {
    uniffi_loro_fn_init_callback_vtable_localupdatecallback(&UniffiCallbackInterfaceLocalUpdateCallback.vtable)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLocalUpdateCallback: FfiConverter {
    fileprivate static var handleMap = UniffiHandleMap<LocalUpdateCallback>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LocalUpdateCallback

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LocalUpdateCallback {
        return LocalUpdateCallbackImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LocalUpdateCallback) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LocalUpdateCallback {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LocalUpdateCallback, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLocalUpdateCallback_lift(_ pointer: UnsafeMutableRawPointer) throws -> LocalUpdateCallback {
    return try FfiConverterTypeLocalUpdateCallback.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLocalUpdateCallback_lower(_ value: LocalUpdateCallback) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLocalUpdateCallback.lower(value)
}




public protocol LoroCounterProtocol : AnyObject {
    
    /**
     * Decrement the counter by the given value.
     */
    func decrement(value: Double) throws 
    
    /**
     * Get the LoroDoc from this container
     */
    func doc()  -> LoroDoc?
    
    /**
     * If a detached container is attached, this method will return its corresponding attached handler.
     */
    func getAttached()  -> LoroCounter?
    
    /**
     * Get the current value of the counter.
     */
    func getValue()  -> Double
    
    /**
     * Return container id of the Counter.
     */
    func id()  -> ContainerId
    
    /**
     * Increment the counter by the given value.
     */
    func increment(value: Double) throws 
    
    /**
     * Whether the container is attached to a document
     *
     * The edits on a detached container will not be persisted.
     * To attach the container to the document, please insert it into an attached container.
     */
    func isAttached()  -> Bool
    
    /**
     * Whether the container is deleted.
     */
    func isDeleted()  -> Bool
    
}

open class LoroCounter:
    LoroCounterProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_lorocounter(self.pointer, $0) }
    }
    /**
     * Create a new Counter.
     */
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_loro_fn_constructor_lorocounter_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_lorocounter(pointer, $0) }
    }

    

    
    /**
     * Decrement the counter by the given value.
     */
open func decrement(value: Double)throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorocounter_decrement(self.uniffiClonePointer(),
        FfiConverterDouble.lower(value),$0
    )
}
}
    
    /**
     * Get the LoroDoc from this container
     */
open func doc() -> LoroDoc? {
    return try!  FfiConverterOptionTypeLoroDoc.lift(try! rustCall() {
    uniffi_loro_fn_method_lorocounter_doc(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * If a detached container is attached, this method will return its corresponding attached handler.
     */
open func getAttached() -> LoroCounter? {
    return try!  FfiConverterOptionTypeLoroCounter.lift(try! rustCall() {
    uniffi_loro_fn_method_lorocounter_get_attached(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the current value of the counter.
     */
open func getValue() -> Double {
    return try!  FfiConverterDouble.lift(try! rustCall() {
    uniffi_loro_fn_method_lorocounter_get_value(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Return container id of the Counter.
     */
open func id() -> ContainerId {
    return try!  FfiConverterTypeContainerID.lift(try! rustCall() {
    uniffi_loro_fn_method_lorocounter_id(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Increment the counter by the given value.
     */
open func increment(value: Double)throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorocounter_increment(self.uniffiClonePointer(),
        FfiConverterDouble.lower(value),$0
    )
}
}
    
    /**
     * Whether the container is attached to a document
     *
     * The edits on a detached container will not be persisted.
     * To attach the container to the document, please insert it into an attached container.
     */
open func isAttached() -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_loro_fn_method_lorocounter_is_attached(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Whether the container is deleted.
     */
open func isDeleted() -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_loro_fn_method_lorocounter_is_deleted(self.uniffiClonePointer(),$0
    )
})
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLoroCounter: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LoroCounter

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroCounter {
        return LoroCounter(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LoroCounter) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoroCounter {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LoroCounter, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLoroCounter_lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroCounter {
    return try FfiConverterTypeLoroCounter.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLoroCounter_lower(_ value: LoroCounter) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLoroCounter.lower(value)
}




/**
 * `LoroDoc` is the entry for the whole document.
 * When it's dropped, all the associated [`Handler`]s will be invalidated.
 *
 * **Important:** Loro is a pure library and does not handle network protocols.
 * It is the responsibility of the user to manage the storage, loading, and synchronization
 * of the bytes exported by Loro in a manner suitable for their specific environment.
 */
public protocol LoroDocProtocol : AnyObject {
    
    /**
     * Apply a diff to the current document state.
     *
     * Internally, it will apply the diff to the current state.
     */
    func applyDiff(diff: DiffBatch) throws 
    
    /**
     * Attach the document state to the latest known version.
     *
     * > The document becomes detached during a `checkout` operation.
     * > Being `detached` implies that the `DocState` is not synchronized with the latest version of the `OpLog`.
     * > In a detached state, the document is not editable, and any `import` operations will be
     * > recorded in the `OpLog` without being applied to the `DocState`.
     */
    func attach() 
    
    /**
     * Check the correctness of the document state by comparing it with the state
     * calculated by applying all the history.
     */
    func checkStateCorrectnessSlow() 
    
    /**
     * Checkout the `DocState` to a specific version.
     *
     * The document becomes detached during a `checkout` operation.
     * Being `detached` implies that the `DocState` is not synchronized with the latest version of the `OpLog`.
     * In a detached state, the document is not editable, and any `import` operations will be
     * recorded in the `OpLog` without being applied to the `DocState`.
     *
     * You should call `attach` to attach the `DocState` to the latest version of `OpLog`.
     */
    func checkout(frontiers: Frontiers) throws 
    
    /**
     * Checkout the `DocState` to the latest version.
     *
     * > The document becomes detached during a `checkout` operation.
     * > Being `detached` implies that the `DocState` is not synchronized with the latest version of the `OpLog`.
     * > In a detached state, the document is not editable, and any `import` operations will be
     * > recorded in the `OpLog` without being applied to the `DocState`.
     *
     * This has the same effect as `attach`.
     */
    func checkoutToLatest() 
    
    /**
     * Clear the options of the next commit.
     */
    func clearNextCommitOptions() 
    
    /**
     * Compare the frontiers with the current OpLog's version.
     *
     * If `other` contains any version that's not contained in the current OpLog, return [Ordering::Less].
     */
    func cmpWithFrontiers(other: Frontiers)  -> Ordering
    
    /**
     * Commit the cumulative auto commit transaction.
     *
     * There is a transaction behind every operation.
     * The events will be emitted after a transaction is committed. A transaction is committed when:
     *
     * - `doc.commit()` is called.
     * - `doc.export(mode)` is called.
     * - `doc.import(data)` is called.
     * - `doc.checkout(version)` is called.
     */
    func commit() 
    
    func commitWith(options: CommitOptions) 
    
    /**
     * Encoded all ops and history cache to bytes and store them in the kv store.
     *
     * The parsed ops will be dropped
     */
    func compactChangeStore() 
    
    /**
     * Get the configurations of the document.
     */
    func config()  -> Configure
    
    /**
     * Configures the default text style for the document.
     *
     * This method sets the default text style configuration for the document when using LoroText.
     * If `None` is provided, the default style is reset.
     *
     * # Parameters
     *
     * - `text_style`: The style configuration to set as the default. `None` to reset.
     */
    func configDefaultTextStyle(textStyle: StyleConfig?) 
    
    /**
     * Set the rich text format configuration of the document.
     *
     * You need to config it if you use rich text `mark` method.
     * Specifically, you need to config the `expand` property of each style.
     *
     * Expand is used to specify the behavior of expanding when new text is inserted at the
     * beginning or end of the style.
     */
    func configTextStyle(textStyle: StyleConfigMap) 
    
    /**
     * Force the document enter the detached mode.
     *
     * In this mode, when you importing new updates, the [loro_internal::DocState] will not be changed.
     *
     * Learn more at https://loro.dev/docs/advanced/doc_state_and_oplog#attacheddetached-status
     */
    func detach() 
    
    /**
     * Calculate the diff between two versions
     */
    func diff(a: Frontiers, b: Frontiers) throws  -> DiffBatch
    
    /**
     * Exports changes within the specified ID span to JSON schema format.
     *
     * The JSON schema format produced by this method is identical to the one generated by `export_json_updates`.
     * It ensures deterministic output, making it ideal for hash calculations and integrity checks.
     *
     * This method can also export pending changes from the uncommitted transaction that have not yet been applied to the OpLog.
     *
     * This method will NOT trigger a new commit implicitly.
     */
    func exportJsonInIdSpan(idSpan: IdSpan)  -> [String]
    
    /**
     * Export the current state with json-string format of the document.
     */
    func exportJsonUpdates(startVv: VersionVector, endVv: VersionVector)  -> String
    
    /**
     * Export the current state with json-string format of the document, without peer compression.
     *
     * Compared to [`export_json_updates`], this method does not compress the peer IDs in the updates.
     * So the operations are easier to be processed by application code.
     */
    func exportJsonUpdatesWithoutPeerCompression(startVv: VersionVector, endVv: VersionVector)  -> String
    
    func exportShallowSnapshot(frontiers: Frontiers) throws  -> Data
    
    /**
     * Export the current state and history of the document.
     */
    func exportSnapshot() throws  -> Data
    
    func exportSnapshotAt(frontiers: Frontiers) throws  -> Data
    
    func exportStateOnly(frontiers: Frontiers?) throws  -> Data
    
    /**
     * Export all the ops not included in the given `VersionVector`
     */
    func exportUpdates(vv: VersionVector) throws  -> Data
    
    func exportUpdatesInRange(spans: [IdSpan]) throws  -> Data
    
    /**
     * Find the operation id spans that between the `from` version and the `to` version.
     */
    func findIdSpansBetween(from: Frontiers, to: Frontiers)  -> VersionVectorDiff
    
    /**
     * Duplicate the document with a different PeerID
     *
     * The time complexity and space complexity of this operation are both O(n),
     *
     * When called in detached mode, it will fork at the current state frontiers.
     * It will have the same effect as `fork_at(&self.state_frontiers())`.
     */
    func fork()  -> LoroDoc
    
    /**
     * Fork the document at the given frontiers.
     *
     * The created doc will only contain the history before the specified frontiers.
     */
    func forkAt(frontiers: Frontiers)  -> LoroDoc
    
    /**
     * Free the cached diff calculator that is used for checkout.
     */
    func freeDiffCalculator() 
    
    /**
     * Free the history cache that is used for making checkout faster.
     *
     * If you use checkout that switching to an old/concurrent version, the history cache will be built.
     * You can free it by calling this method.
     */
    func freeHistoryCache() 
    
    /**
     * Convert `Frontiers` into `VersionVector`
     */
    func frontiersToVv(frontiers: Frontiers)  -> VersionVector?
    
    /**
     * Get the handler by the path.
     */
    func getByPath(path: [Index])  -> ValueOrContainer?
    
    /**
     * The path can be specified in different ways depending on the container type:
     *
     * For Tree:
     * 1. Using node IDs: `tree/{node_id}/property`
     * 2. Using indices: `tree/0/1/property`
     *
     * For List and MovableList:
     * - Using indices: `list/0` or `list/1/property`
     *
     * For Map:
     * - Using keys: `map/key` or `map/nested/property`
     *
     * For tree structures, index-based paths follow depth-first traversal order.
     * The indices start from 0 and represent the position of a node among its siblings.
     *
     * # Examples
     * ```
     * # use loro::{LoroDoc, LoroValue};
     * let doc = LoroDoc::new();
     *
     * // Tree example
     * let tree = doc.get_tree("tree");
     * let root = tree.create(None).unwrap();
     * tree.get_meta(root).unwrap().insert("name", "root").unwrap();
     * // Access tree by ID or index
     * let name1 = doc.get_by_str_path(&format!("tree/{}/name", root)).unwrap().into_value().unwrap();
     * let name2 = doc.get_by_str_path("tree/0/name").unwrap().into_value().unwrap();
     * assert_eq!(name1, name2);
     *
     * // List example
     * let list = doc.get_list("list");
     * list.insert(0, "first").unwrap();
     * list.insert(1, "second").unwrap();
     * // Access list by index
     * let item = doc.get_by_str_path("list/0");
     * assert_eq!(item.unwrap().into_value().unwrap().into_string().unwrap(), "first".into());
     *
     * // Map example
     * let map = doc.get_map("map");
     * map.insert("key", "value").unwrap();
     * // Access map by key
     * let value = doc.get_by_str_path("map/key");
     * assert_eq!(value.unwrap().into_value().unwrap().into_string().unwrap(), "value".into());
     *
     * // MovableList example
     * let mlist = doc.get_movable_list("mlist");
     * mlist.insert(0, "item").unwrap();
     * // Access movable list by index
     * let item = doc.get_by_str_path("mlist/0");
     * assert_eq!(item.unwrap().into_value().unwrap().into_string().unwrap(), "item".into());
     * ```
     */
    func getByStrPath(path: String)  -> ValueOrContainer?
    
    /**
     * Get `Change` at the given id.
     *
     * `Change` is a grouped continuous operations that share the same id, timestamp, commit message.
     *
     * - The id of the `Change` is the id of its first op.
     * - The second op's id is `{ peer: change.id.peer, counter: change.id.counter + 1 }`
     *
     * The same applies on `Lamport`:
     *
     * - The lamport of the `Change` is the lamport of its first op.
     * - The second op's lamport is `change.lamport + 1`
     *
     * The length of the `Change` is how many operations it contains
     */
    func getChange(id: Id)  -> ChangeMeta?
    
    /**
     * Gets container IDs modified in the given ID range.
     *
     * **NOTE:** This method will implicitly commit.
     *
     * This method can be used in conjunction with `doc.travel_change_ancestors()` to traverse
     * the history and identify all changes that affected specific containers.
     *
     * # Arguments
     *
     * * `id` - The starting ID of the change range
     * * `len` - The length of the change range to check
     */
    func getChangedContainersIn(id: Id, len: UInt32)  -> [ContainerId]
    
    /**
     * Get a [LoroCounter] by container id.
     *
     * If the provided id is string, it will be converted into a root container id with the name of the string.
     */
    func getCounter(id: ContainerIdLike)  -> LoroCounter
    
    func getCursorPos(cursor: Cursor) throws  -> PosQueryResult
    
    /**
     * Get the entire state of the current DocState
     */
    func getDeepValue()  -> LoroValue
    
    /**
     * Get the entire state of the current DocState with container id
     */
    func getDeepValueWithId()  -> LoroValue
    
    /**
     * Get a [LoroList] by container id.
     *
     * If the provided id is string, it will be converted into a root container id with the name of the string.
     */
    func getList(id: ContainerIdLike)  -> LoroList
    
    /**
     * Get a [LoroMap] by container id.
     *
     * If the provided id is string, it will be converted into a root container id with the name of the string.
     */
    func getMap(id: ContainerIdLike)  -> LoroMap
    
    /**
     * Get a [LoroMovableList] by container id.
     *
     * If the provided id is string, it will be converted into a root container id with the name of the string.
     */
    func getMovableList(id: ContainerIdLike)  -> LoroMovableList
    
    /**
     * Get the path from the root to the container
     */
    func getPathToContainer(id: ContainerId)  -> [ContainerPath]?
    
    /**
     * Get the number of operations in the pending transaction.
     *
     * The pending transaction is the one that is not committed yet. It will be committed
     * after calling `doc.commit()`, `doc.export(mode)` or `doc.checkout(version)`.
     */
    func getPendingTxnLen()  -> UInt32
    
    /**
     * Get a [LoroText] by container id.
     *
     * If the provided id is string, it will be converted into a root container id with the name of the string.
     */
    func getText(id: ContainerIdLike)  -> LoroText
    
    /**
     * Get a [LoroTree] by container id.
     *
     * If the provided id is string, it will be converted into a root container id with the name of the string.
     */
    func getTree(id: ContainerIdLike)  -> LoroTree
    
    /**
     * Get the shallow value of the document.
     */
    func getValue()  -> LoroValue
    
    /**
     * Check if the doc contains the target container.
     *
     * A root container always exists, while a normal container exists
     * if it has ever been created on the doc.
     */
    func hasContainer(id: ContainerId)  -> Bool
    
    func hasHistoryCache()  -> Bool
    
    /**
     * Import updates/snapshot exported by [`LoroDoc::export_snapshot`] or [`LoroDoc::export_from`].
     */
    func `import`(bytes: Data) throws  -> ImportStatus
    
    /**
     * Import a batch of updates/snapshot.
     *
     * The data can be in arbitrary order. The import result will be the same.
     */
    func importBatch(bytes: [Data]) throws  -> ImportStatus
    
    func importJsonUpdates(json: String) throws  -> ImportStatus
    
    /**
     * Import updates/snapshot exported by [`LoroDoc::export_snapshot`] or [`LoroDoc::export_from`].
     *
     * It marks the import with a custom `origin` string. It can be used to track the import source
     * in the generated events.
     */
    func importWith(bytes: Data, origin: String) throws  -> ImportStatus
    
    /**
     * Whether the document is in detached mode, where the [loro_internal::DocState] is not
     * synchronized with the latest version of the [loro_internal::OpLog].
     */
    func isDetached()  -> Bool
    
    /**
     * Check if the doc contains the full history.
     */
    func isShallow()  -> Bool
    
    /**
     * Evaluate a JSONPath expression on the document and return matching values or handlers.
     *
     * This method allows querying the document structure using JSONPath syntax.
     * It returns a vector of `ValueOrHandler` which can represent either primitive values
     * or container handlers, depending on what the JSONPath expression matches.
     *
     * # Arguments
     *
     * * `path` - A string slice containing the JSONPath expression to evaluate.
     *
     * # Returns
     *
     * A `Result` containing either:
     * - `Ok(Vec<ValueOrHandler>)`: A vector of matching values or handlers.
     * - `Err(String)`: An error message if the JSONPath expression is invalid or evaluation fails.
     *
     * # Example
     *
     * ```
     * # use loro::LoroDoc;
     * let doc = LoroDoc::new();
     * let map = doc.get_map("users");
     * map.insert("alice", 30).unwrap();
     * map.insert("bob", 25).unwrap();
     *
     * let result = doc.jsonpath("$.users.alice").unwrap();
     * assert_eq!(result.len(), 1);
     * assert_eq!(result[0].to_json_value(), serde_json::json!(30));
     * ```
     */
    func jsonpath(path: String) throws  -> [ValueOrContainer]
    
    /**
     * Get the total number of changes in the `OpLog`
     */
    func lenChanges()  -> UInt64
    
    /**
     * Get the total number of operations in the `OpLog`
     */
    func lenOps()  -> UInt64
    
    /**
     * Estimate the size of the document states in memory.
     */
    func logEstimateSize() 
    
    /**
     * Minimize the frontiers by removing the unnecessary entries.
     */
    func minimizeFrontiers(frontiers: Frontiers)  -> FrontiersOrId
    
    /**
     * Get the `Frontiers` version of `OpLog`
     */
    func oplogFrontiers()  -> Frontiers
    
    /**
     * Get the `VersionVector` version of `OpLog`
     */
    func oplogVv()  -> VersionVector
    
    /**
     * Get the PeerID
     */
    func peerId()  -> UInt64
    
    /**
     * Revert the current document state back to the target version
     *
     * Internally, it will generate a series of local operations that can revert the
     * current doc to the target version. It will calculate the diff between the current
     * state and the target state, and apply the diff to the current state.
     */
    func revertTo(version: Frontiers) throws 
    
    /**
     * Set the interval of mergeable changes, **in seconds**.
     *
     * If two continuous local changes are within the interval, they will be merged into one change.
     * The default value is 1000 seconds.
     *
     * By default, we record timestamps in seconds for each change. So if the merge interval is 1, and changes A and B
     * have timestamps of 3 and 4 respectively, then they will be merged into one change
     */
    func setChangeMergeInterval(interval: Int64) 
    
    /**
     * Set commit message for the current uncommitted changes
     *
     * It will be persisted.
     */
    func setNextCommitMessage(msg: String) 
    
    /**
     * Set the options of the next commit.
     *
     * It will be used when the next commit is performed.
     */
    func setNextCommitOptions(options: CommitOptions) 
    
    /**
     * Set `origin` for the current uncommitted changes, it can be used to track the source of changes in an event.
     *
     * It will NOT be persisted.
     */
    func setNextCommitOrigin(origin: String) 
    
    /**
     * Set the timestamp of the next commit.
     *
     * It will be persisted and stored in the `OpLog`.
     * You can get the timestamp from the [`Change`] type.
     */
    func setNextCommitTimestamp(timestamp: Int64) 
    
    /**
     * Change the PeerID
     *
     * NOTE: You need to make sure there is no chance two peer have the same PeerID.
     * If it happens, the document will be corrupted.
     */
    func setPeerId(peer: UInt64) throws 
    
    /**
     * Set whether to record the timestamp of each change. Default is `false`.
     *
     * If enabled, the Unix timestamp will be recorded for each change automatically.
     *
     * You can set each timestamp manually when committing a change.
     *
     * NOTE: Timestamps are forced to be in ascending order.
     * If you commit a new change with a timestamp that is less than the existing one,
     * the largest existing timestamp will be used instead.
     */
    func setRecordTimestamp(record: Bool) 
    
    /**
     * Get the `VersionVector` of trimmed history
     *
     * The ops included by the trimmed history are not in the doc.
     */
    func shallowSinceVv()  -> VersionVector
    
    /**
     * Get the `Frontiers` version of `DocState`
     *
     * Learn more about [`Frontiers`](https://loro.dev/docs/advanced/version_deep_dive)
     */
    func stateFrontiers()  -> Frontiers
    
    /**
     * Get the `VersionVector` version of `DocState`
     */
    func stateVv()  -> VersionVector
    
    /**
     * Subscribe the events of a container.
     *
     * The callback will be invoked when the container is changed.
     * Returns a subscription that can be used to unsubscribe.
     *
     * The events will be emitted after a transaction is committed. A transaction is committed when:
     *
     * - `doc.commit()` is called.
     * - `doc.export(mode)` is called.
     * - `doc.import(data)` is called.
     * - `doc.checkout(version)` is called.
     */
    func subscribe(containerId: ContainerId, subscriber: Subscriber)  -> Subscription
    
    /**
     * Subscribe to the first commit from a peer. Operations performed on the `LoroDoc` within this callback
     * will be merged into the current commit.
     *
     * This is useful for managing the relationship between `PeerID` and user information.
     * For example, you could store user names in a `LoroMap` using `PeerID` as the key and the `UserID` as the value.
     */
    func subscribeFirstCommitFromPeer(callback: FirstCommitFromPeerCallback)  -> Subscription
    
    /**
     * Subscribe the local update of the document.
     */
    func subscribeLocalUpdate(callback: LocalUpdateCallback)  -> Subscription
    
    /**
     * Subscribe to the pre-commit event.
     *
     * The callback will be called when the changes are committed but not yet applied to the OpLog.
     * You can modify the commit message and timestamp in the callback by [`ChangeModifier`].
     */
    func subscribePreCommit(callback: PreCommitCallback)  -> Subscription
    
    /**
     * Subscribe all the events.
     *
     * The callback will be invoked when any part of the [loro_internal::DocState] is changed.
     * Returns a subscription that can be used to unsubscribe.
     */
    func subscribeRoot(subscriber: Subscriber)  -> Subscription
    
    /**
     * Traverses the ancestors of the Change containing the given ID, including itself.
     *
     * This method visits all ancestors in causal order, from the latest to the oldest,
     * based on their Lamport timestamps.
     *
     * # Arguments
     *
     * * `ids` - The IDs of the Change to start the traversal from.
     * * `f` - A mutable function that is called for each ancestor. It can return `ControlFlow::Break(())` to stop the traversal.
     */
    func travelChangeAncestors(ids: [Id], f: ChangeAncestorsTraveler) throws 
    
    /**
     * Convert `VersionVector` into `Frontiers`
     */
    func vvToFrontiers(vv: VersionVector)  -> Frontiers
    
}

/**
 * `LoroDoc` is the entry for the whole document.
 * When it's dropped, all the associated [`Handler`]s will be invalidated.
 *
 * **Important:** Loro is a pure library and does not handle network protocols.
 * It is the responsibility of the user to manage the storage, loading, and synchronization
 * of the bytes exported by Loro in a manner suitable for their specific environment.
 */
open class LoroDoc:
    LoroDocProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_lorodoc(self.pointer, $0) }
    }
    /**
     * Create a new `LoroDoc` instance.
     */
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_loro_fn_constructor_lorodoc_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_lorodoc(pointer, $0) }
    }

    

    
    /**
     * Apply a diff to the current document state.
     *
     * Internally, it will apply the diff to the current state.
     */
open func applyDiff(diff: DiffBatch)throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorodoc_apply_diff(self.uniffiClonePointer(),
        FfiConverterTypeDiffBatch.lower(diff),$0
    )
}
}
    
    /**
     * Attach the document state to the latest known version.
     *
     * > The document becomes detached during a `checkout` operation.
     * > Being `detached` implies that the `DocState` is not synchronized with the latest version of the `OpLog`.
     * > In a detached state, the document is not editable, and any `import` operations will be
     * > recorded in the `OpLog` without being applied to the `DocState`.
     */
open func attach() {try! rustCall() {
    uniffi_loro_fn_method_lorodoc_attach(self.uniffiClonePointer(),$0
    )
}
}
    
    /**
     * Check the correctness of the document state by comparing it with the state
     * calculated by applying all the history.
     */
open func checkStateCorrectnessSlow() {try! rustCall() {
    uniffi_loro_fn_method_lorodoc_check_state_correctness_slow(self.uniffiClonePointer(),$0
    )
}
}
    
    /**
     * Checkout the `DocState` to a specific version.
     *
     * The document becomes detached during a `checkout` operation.
     * Being `detached` implies that the `DocState` is not synchronized with the latest version of the `OpLog`.
     * In a detached state, the document is not editable, and any `import` operations will be
     * recorded in the `OpLog` without being applied to the `DocState`.
     *
     * You should call `attach` to attach the `DocState` to the latest version of `OpLog`.
     */
open func checkout(frontiers: Frontiers)throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorodoc_checkout(self.uniffiClonePointer(),
        FfiConverterTypeFrontiers.lower(frontiers),$0
    )
}
}
    
    /**
     * Checkout the `DocState` to the latest version.
     *
     * > The document becomes detached during a `checkout` operation.
     * > Being `detached` implies that the `DocState` is not synchronized with the latest version of the `OpLog`.
     * > In a detached state, the document is not editable, and any `import` operations will be
     * > recorded in the `OpLog` without being applied to the `DocState`.
     *
     * This has the same effect as `attach`.
     */
open func checkoutToLatest() {try! rustCall() {
    uniffi_loro_fn_method_lorodoc_checkout_to_latest(self.uniffiClonePointer(),$0
    )
}
}
    
    /**
     * Clear the options of the next commit.
     */
open func clearNextCommitOptions() {try! rustCall() {
    uniffi_loro_fn_method_lorodoc_clear_next_commit_options(self.uniffiClonePointer(),$0
    )
}
}
    
    /**
     * Compare the frontiers with the current OpLog's version.
     *
     * If `other` contains any version that's not contained in the current OpLog, return [Ordering::Less].
     */
open func cmpWithFrontiers(other: Frontiers) -> Ordering {
    return try!  FfiConverterTypeOrdering.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_cmp_with_frontiers(self.uniffiClonePointer(),
        FfiConverterTypeFrontiers.lower(other),$0
    )
})
}
    
    /**
     * Commit the cumulative auto commit transaction.
     *
     * There is a transaction behind every operation.
     * The events will be emitted after a transaction is committed. A transaction is committed when:
     *
     * - `doc.commit()` is called.
     * - `doc.export(mode)` is called.
     * - `doc.import(data)` is called.
     * - `doc.checkout(version)` is called.
     */
open func commit() {try! rustCall() {
    uniffi_loro_fn_method_lorodoc_commit(self.uniffiClonePointer(),$0
    )
}
}
    
open func commitWith(options: CommitOptions) {try! rustCall() {
    uniffi_loro_fn_method_lorodoc_commit_with(self.uniffiClonePointer(),
        FfiConverterTypeCommitOptions.lower(options),$0
    )
}
}
    
    /**
     * Encoded all ops and history cache to bytes and store them in the kv store.
     *
     * The parsed ops will be dropped
     */
open func compactChangeStore() {try! rustCall() {
    uniffi_loro_fn_method_lorodoc_compact_change_store(self.uniffiClonePointer(),$0
    )
}
}
    
    /**
     * Get the configurations of the document.
     */
open func config() -> Configure {
    return try!  FfiConverterTypeConfigure.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_config(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Configures the default text style for the document.
     *
     * This method sets the default text style configuration for the document when using LoroText.
     * If `None` is provided, the default style is reset.
     *
     * # Parameters
     *
     * - `text_style`: The style configuration to set as the default. `None` to reset.
     */
open func configDefaultTextStyle(textStyle: StyleConfig?) {try! rustCall() {
    uniffi_loro_fn_method_lorodoc_config_default_text_style(self.uniffiClonePointer(),
        FfiConverterOptionTypeStyleConfig.lower(textStyle),$0
    )
}
}
    
    /**
     * Set the rich text format configuration of the document.
     *
     * You need to config it if you use rich text `mark` method.
     * Specifically, you need to config the `expand` property of each style.
     *
     * Expand is used to specify the behavior of expanding when new text is inserted at the
     * beginning or end of the style.
     */
open func configTextStyle(textStyle: StyleConfigMap) {try! rustCall() {
    uniffi_loro_fn_method_lorodoc_config_text_style(self.uniffiClonePointer(),
        FfiConverterTypeStyleConfigMap.lower(textStyle),$0
    )
}
}
    
    /**
     * Force the document enter the detached mode.
     *
     * In this mode, when you importing new updates, the [loro_internal::DocState] will not be changed.
     *
     * Learn more at https://loro.dev/docs/advanced/doc_state_and_oplog#attacheddetached-status
     */
open func detach() {try! rustCall() {
    uniffi_loro_fn_method_lorodoc_detach(self.uniffiClonePointer(),$0
    )
}
}
    
    /**
     * Calculate the diff between two versions
     */
open func diff(a: Frontiers, b: Frontiers)throws  -> DiffBatch {
    return try  FfiConverterTypeDiffBatch.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorodoc_diff(self.uniffiClonePointer(),
        FfiConverterTypeFrontiers.lower(a),
        FfiConverterTypeFrontiers.lower(b),$0
    )
})
}
    
    /**
     * Exports changes within the specified ID span to JSON schema format.
     *
     * The JSON schema format produced by this method is identical to the one generated by `export_json_updates`.
     * It ensures deterministic output, making it ideal for hash calculations and integrity checks.
     *
     * This method can also export pending changes from the uncommitted transaction that have not yet been applied to the OpLog.
     *
     * This method will NOT trigger a new commit implicitly.
     */
open func exportJsonInIdSpan(idSpan: IdSpan) -> [String] {
    return try!  FfiConverterSequenceString.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_export_json_in_id_span(self.uniffiClonePointer(),
        FfiConverterTypeIdSpan.lower(idSpan),$0
    )
})
}
    
    /**
     * Export the current state with json-string format of the document.
     */
open func exportJsonUpdates(startVv: VersionVector, endVv: VersionVector) -> String {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_export_json_updates(self.uniffiClonePointer(),
        FfiConverterTypeVersionVector.lower(startVv),
        FfiConverterTypeVersionVector.lower(endVv),$0
    )
})
}
    
    /**
     * Export the current state with json-string format of the document, without peer compression.
     *
     * Compared to [`export_json_updates`], this method does not compress the peer IDs in the updates.
     * So the operations are easier to be processed by application code.
     */
open func exportJsonUpdatesWithoutPeerCompression(startVv: VersionVector, endVv: VersionVector) -> String {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_export_json_updates_without_peer_compression(self.uniffiClonePointer(),
        FfiConverterTypeVersionVector.lower(startVv),
        FfiConverterTypeVersionVector.lower(endVv),$0
    )
})
}
    
open func exportShallowSnapshot(frontiers: Frontiers)throws  -> Data {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeLoroEncodeError.lift) {
    uniffi_loro_fn_method_lorodoc_export_shallow_snapshot(self.uniffiClonePointer(),
        FfiConverterTypeFrontiers.lower(frontiers),$0
    )
})
}
    
    /**
     * Export the current state and history of the document.
     */
open func exportSnapshot()throws  -> Data {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeLoroEncodeError.lift) {
    uniffi_loro_fn_method_lorodoc_export_snapshot(self.uniffiClonePointer(),$0
    )
})
}
    
open func exportSnapshotAt(frontiers: Frontiers)throws  -> Data {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeLoroEncodeError.lift) {
    uniffi_loro_fn_method_lorodoc_export_snapshot_at(self.uniffiClonePointer(),
        FfiConverterTypeFrontiers.lower(frontiers),$0
    )
})
}
    
open func exportStateOnly(frontiers: Frontiers?)throws  -> Data {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeLoroEncodeError.lift) {
    uniffi_loro_fn_method_lorodoc_export_state_only(self.uniffiClonePointer(),
        FfiConverterOptionTypeFrontiers.lower(frontiers),$0
    )
})
}
    
    /**
     * Export all the ops not included in the given `VersionVector`
     */
open func exportUpdates(vv: VersionVector)throws  -> Data {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeLoroEncodeError.lift) {
    uniffi_loro_fn_method_lorodoc_export_updates(self.uniffiClonePointer(),
        FfiConverterTypeVersionVector.lower(vv),$0
    )
})
}
    
open func exportUpdatesInRange(spans: [IdSpan])throws  -> Data {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeLoroEncodeError.lift) {
    uniffi_loro_fn_method_lorodoc_export_updates_in_range(self.uniffiClonePointer(),
        FfiConverterSequenceTypeIdSpan.lower(spans),$0
    )
})
}
    
    /**
     * Find the operation id spans that between the `from` version and the `to` version.
     */
open func findIdSpansBetween(from: Frontiers, to: Frontiers) -> VersionVectorDiff {
    return try!  FfiConverterTypeVersionVectorDiff.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_find_id_spans_between(self.uniffiClonePointer(),
        FfiConverterTypeFrontiers.lower(from),
        FfiConverterTypeFrontiers.lower(to),$0
    )
})
}
    
    /**
     * Duplicate the document with a different PeerID
     *
     * The time complexity and space complexity of this operation are both O(n),
     *
     * When called in detached mode, it will fork at the current state frontiers.
     * It will have the same effect as `fork_at(&self.state_frontiers())`.
     */
open func fork() -> LoroDoc {
    return try!  FfiConverterTypeLoroDoc.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_fork(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Fork the document at the given frontiers.
     *
     * The created doc will only contain the history before the specified frontiers.
     */
open func forkAt(frontiers: Frontiers) -> LoroDoc {
    return try!  FfiConverterTypeLoroDoc.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_fork_at(self.uniffiClonePointer(),
        FfiConverterTypeFrontiers.lower(frontiers),$0
    )
})
}
    
    /**
     * Free the cached diff calculator that is used for checkout.
     */
open func freeDiffCalculator() {try! rustCall() {
    uniffi_loro_fn_method_lorodoc_free_diff_calculator(self.uniffiClonePointer(),$0
    )
}
}
    
    /**
     * Free the history cache that is used for making checkout faster.
     *
     * If you use checkout that switching to an old/concurrent version, the history cache will be built.
     * You can free it by calling this method.
     */
open func freeHistoryCache() {try! rustCall() {
    uniffi_loro_fn_method_lorodoc_free_history_cache(self.uniffiClonePointer(),$0
    )
}
}
    
    /**
     * Convert `Frontiers` into `VersionVector`
     */
open func frontiersToVv(frontiers: Frontiers) -> VersionVector? {
    return try!  FfiConverterOptionTypeVersionVector.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_frontiers_to_vv(self.uniffiClonePointer(),
        FfiConverterTypeFrontiers.lower(frontiers),$0
    )
})
}
    
    /**
     * Get the handler by the path.
     */
open func getByPath(path: [Index]) -> ValueOrContainer? {
    return try!  FfiConverterOptionTypeValueOrContainer.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_get_by_path(self.uniffiClonePointer(),
        FfiConverterSequenceTypeIndex.lower(path),$0
    )
})
}
    
    /**
     * The path can be specified in different ways depending on the container type:
     *
     * For Tree:
     * 1. Using node IDs: `tree/{node_id}/property`
     * 2. Using indices: `tree/0/1/property`
     *
     * For List and MovableList:
     * - Using indices: `list/0` or `list/1/property`
     *
     * For Map:
     * - Using keys: `map/key` or `map/nested/property`
     *
     * For tree structures, index-based paths follow depth-first traversal order.
     * The indices start from 0 and represent the position of a node among its siblings.
     *
     * # Examples
     * ```
     * # use loro::{LoroDoc, LoroValue};
     * let doc = LoroDoc::new();
     *
     * // Tree example
     * let tree = doc.get_tree("tree");
     * let root = tree.create(None).unwrap();
     * tree.get_meta(root).unwrap().insert("name", "root").unwrap();
     * // Access tree by ID or index
     * let name1 = doc.get_by_str_path(&format!("tree/{}/name", root)).unwrap().into_value().unwrap();
     * let name2 = doc.get_by_str_path("tree/0/name").unwrap().into_value().unwrap();
     * assert_eq!(name1, name2);
     *
     * // List example
     * let list = doc.get_list("list");
     * list.insert(0, "first").unwrap();
     * list.insert(1, "second").unwrap();
     * // Access list by index
     * let item = doc.get_by_str_path("list/0");
     * assert_eq!(item.unwrap().into_value().unwrap().into_string().unwrap(), "first".into());
     *
     * // Map example
     * let map = doc.get_map("map");
     * map.insert("key", "value").unwrap();
     * // Access map by key
     * let value = doc.get_by_str_path("map/key");
     * assert_eq!(value.unwrap().into_value().unwrap().into_string().unwrap(), "value".into());
     *
     * // MovableList example
     * let mlist = doc.get_movable_list("mlist");
     * mlist.insert(0, "item").unwrap();
     * // Access movable list by index
     * let item = doc.get_by_str_path("mlist/0");
     * assert_eq!(item.unwrap().into_value().unwrap().into_string().unwrap(), "item".into());
     * ```
     */
open func getByStrPath(path: String) -> ValueOrContainer? {
    return try!  FfiConverterOptionTypeValueOrContainer.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_get_by_str_path(self.uniffiClonePointer(),
        FfiConverterString.lower(path),$0
    )
})
}
    
    /**
     * Get `Change` at the given id.
     *
     * `Change` is a grouped continuous operations that share the same id, timestamp, commit message.
     *
     * - The id of the `Change` is the id of its first op.
     * - The second op's id is `{ peer: change.id.peer, counter: change.id.counter + 1 }`
     *
     * The same applies on `Lamport`:
     *
     * - The lamport of the `Change` is the lamport of its first op.
     * - The second op's lamport is `change.lamport + 1`
     *
     * The length of the `Change` is how many operations it contains
     */
open func getChange(id: Id) -> ChangeMeta? {
    return try!  FfiConverterOptionTypeChangeMeta.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_get_change(self.uniffiClonePointer(),
        FfiConverterTypeID.lower(id),$0
    )
})
}
    
    /**
     * Gets container IDs modified in the given ID range.
     *
     * **NOTE:** This method will implicitly commit.
     *
     * This method can be used in conjunction with `doc.travel_change_ancestors()` to traverse
     * the history and identify all changes that affected specific containers.
     *
     * # Arguments
     *
     * * `id` - The starting ID of the change range
     * * `len` - The length of the change range to check
     */
open func getChangedContainersIn(id: Id, len: UInt32) -> [ContainerId] {
    return try!  FfiConverterSequenceTypeContainerID.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_get_changed_containers_in(self.uniffiClonePointer(),
        FfiConverterTypeID.lower(id),
        FfiConverterUInt32.lower(len),$0
    )
})
}
    
    /**
     * Get a [LoroCounter] by container id.
     *
     * If the provided id is string, it will be converted into a root container id with the name of the string.
     */
open func getCounter(id: ContainerIdLike) -> LoroCounter {
    return try!  FfiConverterTypeLoroCounter.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_get_counter(self.uniffiClonePointer(),
        FfiConverterTypeContainerIdLike.lower(id),$0
    )
})
}
    
open func getCursorPos(cursor: Cursor)throws  -> PosQueryResult {
    return try  FfiConverterTypePosQueryResult.lift(try rustCallWithError(FfiConverterTypeCannotFindRelativePosition.lift) {
    uniffi_loro_fn_method_lorodoc_get_cursor_pos(self.uniffiClonePointer(),
        FfiConverterTypeCursor.lower(cursor),$0
    )
})
}
    
    /**
     * Get the entire state of the current DocState
     */
open func getDeepValue() -> LoroValue {
    return try!  FfiConverterTypeLoroValue.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_get_deep_value(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the entire state of the current DocState with container id
     */
open func getDeepValueWithId() -> LoroValue {
    return try!  FfiConverterTypeLoroValue.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_get_deep_value_with_id(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get a [LoroList] by container id.
     *
     * If the provided id is string, it will be converted into a root container id with the name of the string.
     */
open func getList(id: ContainerIdLike) -> LoroList {
    return try!  FfiConverterTypeLoroList.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_get_list(self.uniffiClonePointer(),
        FfiConverterTypeContainerIdLike.lower(id),$0
    )
})
}
    
    /**
     * Get a [LoroMap] by container id.
     *
     * If the provided id is string, it will be converted into a root container id with the name of the string.
     */
open func getMap(id: ContainerIdLike) -> LoroMap {
    return try!  FfiConverterTypeLoroMap.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_get_map(self.uniffiClonePointer(),
        FfiConverterTypeContainerIdLike.lower(id),$0
    )
})
}
    
    /**
     * Get a [LoroMovableList] by container id.
     *
     * If the provided id is string, it will be converted into a root container id with the name of the string.
     */
open func getMovableList(id: ContainerIdLike) -> LoroMovableList {
    return try!  FfiConverterTypeLoroMovableList.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_get_movable_list(self.uniffiClonePointer(),
        FfiConverterTypeContainerIdLike.lower(id),$0
    )
})
}
    
    /**
     * Get the path from the root to the container
     */
open func getPathToContainer(id: ContainerId) -> [ContainerPath]? {
    return try!  FfiConverterOptionSequenceTypeContainerPath.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_get_path_to_container(self.uniffiClonePointer(),
        FfiConverterTypeContainerID.lower(id),$0
    )
})
}
    
    /**
     * Get the number of operations in the pending transaction.
     *
     * The pending transaction is the one that is not committed yet. It will be committed
     * after calling `doc.commit()`, `doc.export(mode)` or `doc.checkout(version)`.
     */
open func getPendingTxnLen() -> UInt32 {
    return try!  FfiConverterUInt32.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_get_pending_txn_len(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get a [LoroText] by container id.
     *
     * If the provided id is string, it will be converted into a root container id with the name of the string.
     */
open func getText(id: ContainerIdLike) -> LoroText {
    return try!  FfiConverterTypeLoroText.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_get_text(self.uniffiClonePointer(),
        FfiConverterTypeContainerIdLike.lower(id),$0
    )
})
}
    
    /**
     * Get a [LoroTree] by container id.
     *
     * If the provided id is string, it will be converted into a root container id with the name of the string.
     */
open func getTree(id: ContainerIdLike) -> LoroTree {
    return try!  FfiConverterTypeLoroTree.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_get_tree(self.uniffiClonePointer(),
        FfiConverterTypeContainerIdLike.lower(id),$0
    )
})
}
    
    /**
     * Get the shallow value of the document.
     */
open func getValue() -> LoroValue {
    return try!  FfiConverterTypeLoroValue.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_get_value(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Check if the doc contains the target container.
     *
     * A root container always exists, while a normal container exists
     * if it has ever been created on the doc.
     */
open func hasContainer(id: ContainerId) -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_has_container(self.uniffiClonePointer(),
        FfiConverterTypeContainerID.lower(id),$0
    )
})
}
    
open func hasHistoryCache() -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_has_history_cache(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Import updates/snapshot exported by [`LoroDoc::export_snapshot`] or [`LoroDoc::export_from`].
     */
open func `import`(bytes: Data)throws  -> ImportStatus {
    return try  FfiConverterTypeImportStatus.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorodoc_import(self.uniffiClonePointer(),
        FfiConverterData.lower(bytes),$0
    )
})
}
    
    /**
     * Import a batch of updates/snapshot.
     *
     * The data can be in arbitrary order. The import result will be the same.
     */
open func importBatch(bytes: [Data])throws  -> ImportStatus {
    return try  FfiConverterTypeImportStatus.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorodoc_import_batch(self.uniffiClonePointer(),
        FfiConverterSequenceData.lower(bytes),$0
    )
})
}
    
open func importJsonUpdates(json: String)throws  -> ImportStatus {
    return try  FfiConverterTypeImportStatus.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorodoc_import_json_updates(self.uniffiClonePointer(),
        FfiConverterString.lower(json),$0
    )
})
}
    
    /**
     * Import updates/snapshot exported by [`LoroDoc::export_snapshot`] or [`LoroDoc::export_from`].
     *
     * It marks the import with a custom `origin` string. It can be used to track the import source
     * in the generated events.
     */
open func importWith(bytes: Data, origin: String)throws  -> ImportStatus {
    return try  FfiConverterTypeImportStatus.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorodoc_import_with(self.uniffiClonePointer(),
        FfiConverterData.lower(bytes),
        FfiConverterString.lower(origin),$0
    )
})
}
    
    /**
     * Whether the document is in detached mode, where the [loro_internal::DocState] is not
     * synchronized with the latest version of the [loro_internal::OpLog].
     */
open func isDetached() -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_is_detached(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Check if the doc contains the full history.
     */
open func isShallow() -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_is_shallow(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Evaluate a JSONPath expression on the document and return matching values or handlers.
     *
     * This method allows querying the document structure using JSONPath syntax.
     * It returns a vector of `ValueOrHandler` which can represent either primitive values
     * or container handlers, depending on what the JSONPath expression matches.
     *
     * # Arguments
     *
     * * `path` - A string slice containing the JSONPath expression to evaluate.
     *
     * # Returns
     *
     * A `Result` containing either:
     * - `Ok(Vec<ValueOrHandler>)`: A vector of matching values or handlers.
     * - `Err(String)`: An error message if the JSONPath expression is invalid or evaluation fails.
     *
     * # Example
     *
     * ```
     * # use loro::LoroDoc;
     * let doc = LoroDoc::new();
     * let map = doc.get_map("users");
     * map.insert("alice", 30).unwrap();
     * map.insert("bob", 25).unwrap();
     *
     * let result = doc.jsonpath("$.users.alice").unwrap();
     * assert_eq!(result.len(), 1);
     * assert_eq!(result[0].to_json_value(), serde_json::json!(30));
     * ```
     */
open func jsonpath(path: String)throws  -> [ValueOrContainer] {
    return try  FfiConverterSequenceTypeValueOrContainer.lift(try rustCallWithError(FfiConverterTypeJsonPathError.lift) {
    uniffi_loro_fn_method_lorodoc_jsonpath(self.uniffiClonePointer(),
        FfiConverterString.lower(path),$0
    )
})
}
    
    /**
     * Get the total number of changes in the `OpLog`
     */
open func lenChanges() -> UInt64 {
    return try!  FfiConverterUInt64.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_len_changes(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the total number of operations in the `OpLog`
     */
open func lenOps() -> UInt64 {
    return try!  FfiConverterUInt64.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_len_ops(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Estimate the size of the document states in memory.
     */
open func logEstimateSize() {try! rustCall() {
    uniffi_loro_fn_method_lorodoc_log_estimate_size(self.uniffiClonePointer(),$0
    )
}
}
    
    /**
     * Minimize the frontiers by removing the unnecessary entries.
     */
open func minimizeFrontiers(frontiers: Frontiers) -> FrontiersOrId {
    return try!  FfiConverterTypeFrontiersOrID.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_minimize_frontiers(self.uniffiClonePointer(),
        FfiConverterTypeFrontiers.lower(frontiers),$0
    )
})
}
    
    /**
     * Get the `Frontiers` version of `OpLog`
     */
open func oplogFrontiers() -> Frontiers {
    return try!  FfiConverterTypeFrontiers.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_oplog_frontiers(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the `VersionVector` version of `OpLog`
     */
open func oplogVv() -> VersionVector {
    return try!  FfiConverterTypeVersionVector.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_oplog_vv(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the PeerID
     */
open func peerId() -> UInt64 {
    return try!  FfiConverterUInt64.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_peer_id(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Revert the current document state back to the target version
     *
     * Internally, it will generate a series of local operations that can revert the
     * current doc to the target version. It will calculate the diff between the current
     * state and the target state, and apply the diff to the current state.
     */
open func revertTo(version: Frontiers)throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorodoc_revert_to(self.uniffiClonePointer(),
        FfiConverterTypeFrontiers.lower(version),$0
    )
}
}
    
    /**
     * Set the interval of mergeable changes, **in seconds**.
     *
     * If two continuous local changes are within the interval, they will be merged into one change.
     * The default value is 1000 seconds.
     *
     * By default, we record timestamps in seconds for each change. So if the merge interval is 1, and changes A and B
     * have timestamps of 3 and 4 respectively, then they will be merged into one change
     */
open func setChangeMergeInterval(interval: Int64) {try! rustCall() {
    uniffi_loro_fn_method_lorodoc_set_change_merge_interval(self.uniffiClonePointer(),
        FfiConverterInt64.lower(interval),$0
    )
}
}
    
    /**
     * Set commit message for the current uncommitted changes
     *
     * It will be persisted.
     */
open func setNextCommitMessage(msg: String) {try! rustCall() {
    uniffi_loro_fn_method_lorodoc_set_next_commit_message(self.uniffiClonePointer(),
        FfiConverterString.lower(msg),$0
    )
}
}
    
    /**
     * Set the options of the next commit.
     *
     * It will be used when the next commit is performed.
     */
open func setNextCommitOptions(options: CommitOptions) {try! rustCall() {
    uniffi_loro_fn_method_lorodoc_set_next_commit_options(self.uniffiClonePointer(),
        FfiConverterTypeCommitOptions.lower(options),$0
    )
}
}
    
    /**
     * Set `origin` for the current uncommitted changes, it can be used to track the source of changes in an event.
     *
     * It will NOT be persisted.
     */
open func setNextCommitOrigin(origin: String) {try! rustCall() {
    uniffi_loro_fn_method_lorodoc_set_next_commit_origin(self.uniffiClonePointer(),
        FfiConverterString.lower(origin),$0
    )
}
}
    
    /**
     * Set the timestamp of the next commit.
     *
     * It will be persisted and stored in the `OpLog`.
     * You can get the timestamp from the [`Change`] type.
     */
open func setNextCommitTimestamp(timestamp: Int64) {try! rustCall() {
    uniffi_loro_fn_method_lorodoc_set_next_commit_timestamp(self.uniffiClonePointer(),
        FfiConverterInt64.lower(timestamp),$0
    )
}
}
    
    /**
     * Change the PeerID
     *
     * NOTE: You need to make sure there is no chance two peer have the same PeerID.
     * If it happens, the document will be corrupted.
     */
open func setPeerId(peer: UInt64)throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorodoc_set_peer_id(self.uniffiClonePointer(),
        FfiConverterUInt64.lower(peer),$0
    )
}
}
    
    /**
     * Set whether to record the timestamp of each change. Default is `false`.
     *
     * If enabled, the Unix timestamp will be recorded for each change automatically.
     *
     * You can set each timestamp manually when committing a change.
     *
     * NOTE: Timestamps are forced to be in ascending order.
     * If you commit a new change with a timestamp that is less than the existing one,
     * the largest existing timestamp will be used instead.
     */
open func setRecordTimestamp(record: Bool) {try! rustCall() {
    uniffi_loro_fn_method_lorodoc_set_record_timestamp(self.uniffiClonePointer(),
        FfiConverterBool.lower(record),$0
    )
}
}
    
    /**
     * Get the `VersionVector` of trimmed history
     *
     * The ops included by the trimmed history are not in the doc.
     */
open func shallowSinceVv() -> VersionVector {
    return try!  FfiConverterTypeVersionVector.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_shallow_since_vv(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the `Frontiers` version of `DocState`
     *
     * Learn more about [`Frontiers`](https://loro.dev/docs/advanced/version_deep_dive)
     */
open func stateFrontiers() -> Frontiers {
    return try!  FfiConverterTypeFrontiers.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_state_frontiers(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the `VersionVector` version of `DocState`
     */
open func stateVv() -> VersionVector {
    return try!  FfiConverterTypeVersionVector.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_state_vv(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Subscribe the events of a container.
     *
     * The callback will be invoked when the container is changed.
     * Returns a subscription that can be used to unsubscribe.
     *
     * The events will be emitted after a transaction is committed. A transaction is committed when:
     *
     * - `doc.commit()` is called.
     * - `doc.export(mode)` is called.
     * - `doc.import(data)` is called.
     * - `doc.checkout(version)` is called.
     */
open func subscribe(containerId: ContainerId, subscriber: Subscriber) -> Subscription {
    return try!  FfiConverterTypeSubscription.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_subscribe(self.uniffiClonePointer(),
        FfiConverterTypeContainerID.lower(containerId),
        FfiConverterTypeSubscriber.lower(subscriber),$0
    )
})
}
    
    /**
     * Subscribe to the first commit from a peer. Operations performed on the `LoroDoc` within this callback
     * will be merged into the current commit.
     *
     * This is useful for managing the relationship between `PeerID` and user information.
     * For example, you could store user names in a `LoroMap` using `PeerID` as the key and the `UserID` as the value.
     */
open func subscribeFirstCommitFromPeer(callback: FirstCommitFromPeerCallback) -> Subscription {
    return try!  FfiConverterTypeSubscription.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_subscribe_first_commit_from_peer(self.uniffiClonePointer(),
        FfiConverterTypeFirstCommitFromPeerCallback.lower(callback),$0
    )
})
}
    
    /**
     * Subscribe the local update of the document.
     */
open func subscribeLocalUpdate(callback: LocalUpdateCallback) -> Subscription {
    return try!  FfiConverterTypeSubscription.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_subscribe_local_update(self.uniffiClonePointer(),
        FfiConverterTypeLocalUpdateCallback.lower(callback),$0
    )
})
}
    
    /**
     * Subscribe to the pre-commit event.
     *
     * The callback will be called when the changes are committed but not yet applied to the OpLog.
     * You can modify the commit message and timestamp in the callback by [`ChangeModifier`].
     */
open func subscribePreCommit(callback: PreCommitCallback) -> Subscription {
    return try!  FfiConverterTypeSubscription.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_subscribe_pre_commit(self.uniffiClonePointer(),
        FfiConverterTypePreCommitCallback.lower(callback),$0
    )
})
}
    
    /**
     * Subscribe all the events.
     *
     * The callback will be invoked when any part of the [loro_internal::DocState] is changed.
     * Returns a subscription that can be used to unsubscribe.
     */
open func subscribeRoot(subscriber: Subscriber) -> Subscription {
    return try!  FfiConverterTypeSubscription.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_subscribe_root(self.uniffiClonePointer(),
        FfiConverterTypeSubscriber.lower(subscriber),$0
    )
})
}
    
    /**
     * Traverses the ancestors of the Change containing the given ID, including itself.
     *
     * This method visits all ancestors in causal order, from the latest to the oldest,
     * based on their Lamport timestamps.
     *
     * # Arguments
     *
     * * `ids` - The IDs of the Change to start the traversal from.
     * * `f` - A mutable function that is called for each ancestor. It can return `ControlFlow::Break(())` to stop the traversal.
     */
open func travelChangeAncestors(ids: [Id], f: ChangeAncestorsTraveler)throws  {try rustCallWithError(FfiConverterTypeChangeTravelError.lift) {
    uniffi_loro_fn_method_lorodoc_travel_change_ancestors(self.uniffiClonePointer(),
        FfiConverterSequenceTypeID.lower(ids),
        FfiConverterTypeChangeAncestorsTraveler.lower(f),$0
    )
}
}
    
    /**
     * Convert `VersionVector` into `Frontiers`
     */
open func vvToFrontiers(vv: VersionVector) -> Frontiers {
    return try!  FfiConverterTypeFrontiers.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_vv_to_frontiers(self.uniffiClonePointer(),
        FfiConverterTypeVersionVector.lower(vv),$0
    )
})
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLoroDoc: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LoroDoc

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroDoc {
        return LoroDoc(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LoroDoc) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoroDoc {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LoroDoc, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLoroDoc_lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroDoc {
    return try FfiConverterTypeLoroDoc.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLoroDoc_lower(_ value: LoroDoc) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLoroDoc.lower(value)
}




public protocol LoroListProtocol : AnyObject {
    
    /**
     * Delete all elements in the list.
     */
    func clear() throws 
    
    /**
     * Delete values at the given position.
     */
    func delete(pos: UInt32, len: UInt32) throws 
    
    /**
     * Get the LoroDoc from this container
     */
    func doc()  -> LoroDoc?
    
    /**
     * Get the value at the given position.
     */
    func get(index: UInt32)  -> ValueOrContainer?
    
    /**
     * If a detached container is attached, this method will return its corresponding attached handler.
     */
    func getAttached()  -> LoroList?
    
    func getCursor(pos: UInt32, side: Side)  -> Cursor?
    
    /**
     * Get the deep value of the container.
     */
    func getDeepValue()  -> LoroValue
    
    /**
     * Get the ID of the list item at the given position.
     */
    func getIdAt(pos: UInt32)  -> Id?
    
    /**
     * Get the shallow value of the container.
     *
     * This does not convert the state of sub-containers; instead, it represents them as [LoroValue::Container].
     */
    func getValue()  -> LoroValue
    
    /**
     * Get the ID of the container.
     */
    func id()  -> ContainerId
    
    /**
     * Insert a value at the given position.
     */
    func insert(pos: UInt32, v: LoroValueLike) throws 
    
    func insertCounterContainer(pos: UInt32, child: LoroCounter) throws  -> LoroCounter
    
    func insertListContainer(pos: UInt32, child: LoroList) throws  -> LoroList
    
    func insertMapContainer(pos: UInt32, child: LoroMap) throws  -> LoroMap
    
    func insertMovableListContainer(pos: UInt32, child: LoroMovableList) throws  -> LoroMovableList
    
    func insertTextContainer(pos: UInt32, child: LoroText) throws  -> LoroText
    
    func insertTreeContainer(pos: UInt32, child: LoroTree) throws  -> LoroTree
    
    /**
     * Whether the container is attached to a document
     *
     * The edits on a detached container will not be persisted.
     * To attach the container to the document, please insert it into an attached container.
     */
    func isAttached()  -> Bool
    
    /**
     * Whether the container is deleted.
     */
    func isDeleted()  -> Bool
    
    func isEmpty()  -> Bool
    
    func len()  -> UInt32
    
    /**
     * Pop the last element of the list.
     */
    func pop() throws  -> LoroValue?
    
    func push(v: LoroValueLike) throws 
    
    /**
     * Converts the LoroList to a Vec of LoroValue.
     *
     * This method unwraps the internal Arc and clones the data if necessary,
     * returning a Vec containing all the elements of the LoroList as LoroValue.
     */
    func toVec()  -> [LoroValue]
    
}

open class LoroList:
    LoroListProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_lorolist(self.pointer, $0) }
    }
    /**
     * Create a new container that is detached from the document.
     *
     * The edits on a detached container will not be persisted.
     * To attach the container to the document, please insert it into an attached container.
     */
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_loro_fn_constructor_lorolist_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_lorolist(pointer, $0) }
    }

    

    
    /**
     * Delete all elements in the list.
     */
open func clear()throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorolist_clear(self.uniffiClonePointer(),$0
    )
}
}
    
    /**
     * Delete values at the given position.
     */
open func delete(pos: UInt32, len: UInt32)throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorolist_delete(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterUInt32.lower(len),$0
    )
}
}
    
    /**
     * Get the LoroDoc from this container
     */
open func doc() -> LoroDoc? {
    return try!  FfiConverterOptionTypeLoroDoc.lift(try! rustCall() {
    uniffi_loro_fn_method_lorolist_doc(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the value at the given position.
     */
open func get(index: UInt32) -> ValueOrContainer? {
    return try!  FfiConverterOptionTypeValueOrContainer.lift(try! rustCall() {
    uniffi_loro_fn_method_lorolist_get(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(index),$0
    )
})
}
    
    /**
     * If a detached container is attached, this method will return its corresponding attached handler.
     */
open func getAttached() -> LoroList? {
    return try!  FfiConverterOptionTypeLoroList.lift(try! rustCall() {
    uniffi_loro_fn_method_lorolist_get_attached(self.uniffiClonePointer(),$0
    )
})
}
    
open func getCursor(pos: UInt32, side: Side) -> Cursor? {
    return try!  FfiConverterOptionTypeCursor.lift(try! rustCall() {
    uniffi_loro_fn_method_lorolist_get_cursor(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterTypeSide.lower(side),$0
    )
})
}
    
    /**
     * Get the deep value of the container.
     */
open func getDeepValue() -> LoroValue {
    return try!  FfiConverterTypeLoroValue.lift(try! rustCall() {
    uniffi_loro_fn_method_lorolist_get_deep_value(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the ID of the list item at the given position.
     */
open func getIdAt(pos: UInt32) -> Id? {
    return try!  FfiConverterOptionTypeID.lift(try! rustCall() {
    uniffi_loro_fn_method_lorolist_get_id_at(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),$0
    )
})
}
    
    /**
     * Get the shallow value of the container.
     *
     * This does not convert the state of sub-containers; instead, it represents them as [LoroValue::Container].
     */
open func getValue() -> LoroValue {
    return try!  FfiConverterTypeLoroValue.lift(try! rustCall() {
    uniffi_loro_fn_method_lorolist_get_value(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the ID of the container.
     */
open func id() -> ContainerId {
    return try!  FfiConverterTypeContainerID.lift(try! rustCall() {
    uniffi_loro_fn_method_lorolist_id(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Insert a value at the given position.
     */
open func insert(pos: UInt32, v: LoroValueLike)throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorolist_insert(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterTypeLoroValueLike.lower(v),$0
    )
}
}
    
open func insertCounterContainer(pos: UInt32, child: LoroCounter)throws  -> LoroCounter {
    return try  FfiConverterTypeLoroCounter.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorolist_insert_counter_container(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterTypeLoroCounter.lower(child),$0
    )
})
}
    
open func insertListContainer(pos: UInt32, child: LoroList)throws  -> LoroList {
    return try  FfiConverterTypeLoroList.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorolist_insert_list_container(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterTypeLoroList.lower(child),$0
    )
})
}
    
open func insertMapContainer(pos: UInt32, child: LoroMap)throws  -> LoroMap {
    return try  FfiConverterTypeLoroMap.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorolist_insert_map_container(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterTypeLoroMap.lower(child),$0
    )
})
}
    
open func insertMovableListContainer(pos: UInt32, child: LoroMovableList)throws  -> LoroMovableList {
    return try  FfiConverterTypeLoroMovableList.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorolist_insert_movable_list_container(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterTypeLoroMovableList.lower(child),$0
    )
})
}
    
open func insertTextContainer(pos: UInt32, child: LoroText)throws  -> LoroText {
    return try  FfiConverterTypeLoroText.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorolist_insert_text_container(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterTypeLoroText.lower(child),$0
    )
})
}
    
open func insertTreeContainer(pos: UInt32, child: LoroTree)throws  -> LoroTree {
    return try  FfiConverterTypeLoroTree.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorolist_insert_tree_container(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterTypeLoroTree.lower(child),$0
    )
})
}
    
    /**
     * Whether the container is attached to a document
     *
     * The edits on a detached container will not be persisted.
     * To attach the container to the document, please insert it into an attached container.
     */
open func isAttached() -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_loro_fn_method_lorolist_is_attached(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Whether the container is deleted.
     */
open func isDeleted() -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_loro_fn_method_lorolist_is_deleted(self.uniffiClonePointer(),$0
    )
})
}
    
open func isEmpty() -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_loro_fn_method_lorolist_is_empty(self.uniffiClonePointer(),$0
    )
})
}
    
open func len() -> UInt32 {
    return try!  FfiConverterUInt32.lift(try! rustCall() {
    uniffi_loro_fn_method_lorolist_len(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Pop the last element of the list.
     */
open func pop()throws  -> LoroValue? {
    return try  FfiConverterOptionTypeLoroValue.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorolist_pop(self.uniffiClonePointer(),$0
    )
})
}
    
open func push(v: LoroValueLike)throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorolist_push(self.uniffiClonePointer(),
        FfiConverterTypeLoroValueLike.lower(v),$0
    )
}
}
    
    /**
     * Converts the LoroList to a Vec of LoroValue.
     *
     * This method unwraps the internal Arc and clones the data if necessary,
     * returning a Vec containing all the elements of the LoroList as LoroValue.
     */
open func toVec() -> [LoroValue] {
    return try!  FfiConverterSequenceTypeLoroValue.lift(try! rustCall() {
    uniffi_loro_fn_method_lorolist_to_vec(self.uniffiClonePointer(),$0
    )
})
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLoroList: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LoroList

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroList {
        return LoroList(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LoroList) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoroList {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LoroList, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLoroList_lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroList {
    return try FfiConverterTypeLoroList.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLoroList_lower(_ value: LoroList) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLoroList.lower(value)
}




public protocol LoroMapProtocol : AnyObject {
    
    /**
     * Delete all key-value pairs in the map.
     */
    func clear() throws 
    
    /**
     * Delete a key-value pair from the map.
     */
    func delete(key: String) throws 
    
    /**
     * Get the LoroDoc from this container
     */
    func doc()  -> LoroDoc?
    
    /**
     * Get the value of the map with the given key.
     */
    func get(key: String)  -> ValueOrContainer?
    
    /**
     * If a detached container is attached, this method will return its corresponding attached handler.
     */
    func getAttached()  -> LoroMap?
    
    /**
     * Get the deep value of the map.
     *
     * It will convert the state of sub-containers into a nested JSON value.
     */
    func getDeepValue()  -> LoroValue
    
    /**
     * Get the peer id of the last editor on the given entry
     */
    func getLastEditor(key: String)  -> UInt64?
    
    func getOrCreateCounterContainer(key: String, child: LoroCounter) throws  -> LoroCounter
    
    func getOrCreateListContainer(key: String, child: LoroList) throws  -> LoroList
    
    func getOrCreateMapContainer(key: String, child: LoroMap) throws  -> LoroMap
    
    func getOrCreateMovableListContainer(key: String, child: LoroMovableList) throws  -> LoroMovableList
    
    func getOrCreateTextContainer(key: String, child: LoroText) throws  -> LoroText
    
    func getOrCreateTreeContainer(key: String, child: LoroTree) throws  -> LoroTree
    
    /**
     * Get the shallow value of the map.
     *
     * It will not convert the state of sub-containers, but represent them as [LoroValue::Container].
     */
    func getValue()  -> LoroValue
    
    /**
     * Get the ID of the map.
     */
    func id()  -> ContainerId
    
    /**
     * Insert a key-value pair into the map.
     *
     * > **Note**: When calling `map.set(key, value)` on a LoroMap, if `map.get(key)` already returns `value`,
     * > the operation will be a no-op (no operation recorded) to avoid unnecessary updates.
     */
    func insert(key: String, v: LoroValueLike) throws 
    
    func insertCounterContainer(key: String, child: LoroCounter) throws  -> LoroCounter
    
    func insertListContainer(key: String, child: LoroList) throws  -> LoroList
    
    func insertMapContainer(key: String, child: LoroMap) throws  -> LoroMap
    
    func insertMovableListContainer(key: String, child: LoroMovableList) throws  -> LoroMovableList
    
    func insertTextContainer(key: String, child: LoroText) throws  -> LoroText
    
    func insertTreeContainer(key: String, child: LoroTree) throws  -> LoroTree
    
    /**
     * Whether the container is attached to a document.
     */
    func isAttached()  -> Bool
    
    /**
     * Whether the container is deleted.
     */
    func isDeleted()  -> Bool
    
    /**
     * Whether the map is empty.
     */
    func isEmpty()  -> Bool
    
    /**
     * Get the keys of the map.
     */
    func keys()  -> [String]
    
    /**
     * Get the length of the map.
     */
    func len()  -> UInt32
    
    /**
     * Get the values of the map.
     */
    func values()  -> [ValueOrContainer]
    
}

open class LoroMap:
    LoroMapProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_loromap(self.pointer, $0) }
    }
    /**
     * Create a new container that is detached from the document.
     *
     * The edits on a detached container will not be persisted.
     * To attach the container to the document, please insert it into an attached container.
     */
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_loro_fn_constructor_loromap_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_loromap(pointer, $0) }
    }

    

    
    /**
     * Delete all key-value pairs in the map.
     */
open func clear()throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_loromap_clear(self.uniffiClonePointer(),$0
    )
}
}
    
    /**
     * Delete a key-value pair from the map.
     */
open func delete(key: String)throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_loromap_delete(self.uniffiClonePointer(),
        FfiConverterString.lower(key),$0
    )
}
}
    
    /**
     * Get the LoroDoc from this container
     */
open func doc() -> LoroDoc? {
    return try!  FfiConverterOptionTypeLoroDoc.lift(try! rustCall() {
    uniffi_loro_fn_method_loromap_doc(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the value of the map with the given key.
     */
open func get(key: String) -> ValueOrContainer? {
    return try!  FfiConverterOptionTypeValueOrContainer.lift(try! rustCall() {
    uniffi_loro_fn_method_loromap_get(self.uniffiClonePointer(),
        FfiConverterString.lower(key),$0
    )
})
}
    
    /**
     * If a detached container is attached, this method will return its corresponding attached handler.
     */
open func getAttached() -> LoroMap? {
    return try!  FfiConverterOptionTypeLoroMap.lift(try! rustCall() {
    uniffi_loro_fn_method_loromap_get_attached(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the deep value of the map.
     *
     * It will convert the state of sub-containers into a nested JSON value.
     */
open func getDeepValue() -> LoroValue {
    return try!  FfiConverterTypeLoroValue.lift(try! rustCall() {
    uniffi_loro_fn_method_loromap_get_deep_value(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the peer id of the last editor on the given entry
     */
open func getLastEditor(key: String) -> UInt64? {
    return try!  FfiConverterOptionUInt64.lift(try! rustCall() {
    uniffi_loro_fn_method_loromap_get_last_editor(self.uniffiClonePointer(),
        FfiConverterString.lower(key),$0
    )
})
}
    
open func getOrCreateCounterContainer(key: String, child: LoroCounter)throws  -> LoroCounter {
    return try  FfiConverterTypeLoroCounter.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_loromap_get_or_create_counter_container(self.uniffiClonePointer(),
        FfiConverterString.lower(key),
        FfiConverterTypeLoroCounter.lower(child),$0
    )
})
}
    
open func getOrCreateListContainer(key: String, child: LoroList)throws  -> LoroList {
    return try  FfiConverterTypeLoroList.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_loromap_get_or_create_list_container(self.uniffiClonePointer(),
        FfiConverterString.lower(key),
        FfiConverterTypeLoroList.lower(child),$0
    )
})
}
    
open func getOrCreateMapContainer(key: String, child: LoroMap)throws  -> LoroMap {
    return try  FfiConverterTypeLoroMap.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_loromap_get_or_create_map_container(self.uniffiClonePointer(),
        FfiConverterString.lower(key),
        FfiConverterTypeLoroMap.lower(child),$0
    )
})
}
    
open func getOrCreateMovableListContainer(key: String, child: LoroMovableList)throws  -> LoroMovableList {
    return try  FfiConverterTypeLoroMovableList.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_loromap_get_or_create_movable_list_container(self.uniffiClonePointer(),
        FfiConverterString.lower(key),
        FfiConverterTypeLoroMovableList.lower(child),$0
    )
})
}
    
open func getOrCreateTextContainer(key: String, child: LoroText)throws  -> LoroText {
    return try  FfiConverterTypeLoroText.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_loromap_get_or_create_text_container(self.uniffiClonePointer(),
        FfiConverterString.lower(key),
        FfiConverterTypeLoroText.lower(child),$0
    )
})
}
    
open func getOrCreateTreeContainer(key: String, child: LoroTree)throws  -> LoroTree {
    return try  FfiConverterTypeLoroTree.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_loromap_get_or_create_tree_container(self.uniffiClonePointer(),
        FfiConverterString.lower(key),
        FfiConverterTypeLoroTree.lower(child),$0
    )
})
}
    
    /**
     * Get the shallow value of the map.
     *
     * It will not convert the state of sub-containers, but represent them as [LoroValue::Container].
     */
open func getValue() -> LoroValue {
    return try!  FfiConverterTypeLoroValue.lift(try! rustCall() {
    uniffi_loro_fn_method_loromap_get_value(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the ID of the map.
     */
open func id() -> ContainerId {
    return try!  FfiConverterTypeContainerID.lift(try! rustCall() {
    uniffi_loro_fn_method_loromap_id(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Insert a key-value pair into the map.
     *
     * > **Note**: When calling `map.set(key, value)` on a LoroMap, if `map.get(key)` already returns `value`,
     * > the operation will be a no-op (no operation recorded) to avoid unnecessary updates.
     */
open func insert(key: String, v: LoroValueLike)throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_loromap_insert(self.uniffiClonePointer(),
        FfiConverterString.lower(key),
        FfiConverterTypeLoroValueLike.lower(v),$0
    )
}
}
    
open func insertCounterContainer(key: String, child: LoroCounter)throws  -> LoroCounter {
    return try  FfiConverterTypeLoroCounter.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_loromap_insert_counter_container(self.uniffiClonePointer(),
        FfiConverterString.lower(key),
        FfiConverterTypeLoroCounter.lower(child),$0
    )
})
}
    
open func insertListContainer(key: String, child: LoroList)throws  -> LoroList {
    return try  FfiConverterTypeLoroList.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_loromap_insert_list_container(self.uniffiClonePointer(),
        FfiConverterString.lower(key),
        FfiConverterTypeLoroList.lower(child),$0
    )
})
}
    
open func insertMapContainer(key: String, child: LoroMap)throws  -> LoroMap {
    return try  FfiConverterTypeLoroMap.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_loromap_insert_map_container(self.uniffiClonePointer(),
        FfiConverterString.lower(key),
        FfiConverterTypeLoroMap.lower(child),$0
    )
})
}
    
open func insertMovableListContainer(key: String, child: LoroMovableList)throws  -> LoroMovableList {
    return try  FfiConverterTypeLoroMovableList.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_loromap_insert_movable_list_container(self.uniffiClonePointer(),
        FfiConverterString.lower(key),
        FfiConverterTypeLoroMovableList.lower(child),$0
    )
})
}
    
open func insertTextContainer(key: String, child: LoroText)throws  -> LoroText {
    return try  FfiConverterTypeLoroText.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_loromap_insert_text_container(self.uniffiClonePointer(),
        FfiConverterString.lower(key),
        FfiConverterTypeLoroText.lower(child),$0
    )
})
}
    
open func insertTreeContainer(key: String, child: LoroTree)throws  -> LoroTree {
    return try  FfiConverterTypeLoroTree.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_loromap_insert_tree_container(self.uniffiClonePointer(),
        FfiConverterString.lower(key),
        FfiConverterTypeLoroTree.lower(child),$0
    )
})
}
    
    /**
     * Whether the container is attached to a document.
     */
open func isAttached() -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_loro_fn_method_loromap_is_attached(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Whether the container is deleted.
     */
open func isDeleted() -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_loro_fn_method_loromap_is_deleted(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Whether the map is empty.
     */
open func isEmpty() -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_loro_fn_method_loromap_is_empty(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the keys of the map.
     */
open func keys() -> [String] {
    return try!  FfiConverterSequenceString.lift(try! rustCall() {
    uniffi_loro_fn_method_loromap_keys(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the length of the map.
     */
open func len() -> UInt32 {
    return try!  FfiConverterUInt32.lift(try! rustCall() {
    uniffi_loro_fn_method_loromap_len(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the values of the map.
     */
open func values() -> [ValueOrContainer] {
    return try!  FfiConverterSequenceTypeValueOrContainer.lift(try! rustCall() {
    uniffi_loro_fn_method_loromap_values(self.uniffiClonePointer(),$0
    )
})
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLoroMap: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LoroMap

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroMap {
        return LoroMap(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LoroMap) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoroMap {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LoroMap, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLoroMap_lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroMap {
    return try FfiConverterTypeLoroMap.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLoroMap_lower(_ value: LoroMap) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLoroMap.lower(value)
}




public protocol LoroMovableListProtocol : AnyObject {
    
    /**
     * Delete all elements in the list.
     */
    func clear() throws 
    
    /**
     * Delete values at the given position.
     */
    func delete(pos: UInt32, len: UInt32) throws 
    
    /**
     * Get the LoroDoc from this container
     */
    func doc()  -> LoroDoc?
    
    /**
     * Get the value at the given position.
     */
    func get(index: UInt32)  -> ValueOrContainer?
    
    /**
     * If a detached container is attached, this method will return its corresponding attached handler.
     */
    func getAttached()  -> LoroMovableList?
    
    func getCreatorAt(pos: UInt32)  -> UInt64?
    
    /**
     * Get the cursor at the given position.
     *
     * Using "index" to denote cursor positions can be unstable, as positions may
     * shift with document edits. To reliably represent a position or range within
     * a document, it is more effective to leverage the unique ID of each item/character
     * in a List CRDT or Text CRDT.
     *
     * Loro optimizes State metadata by not storing the IDs of deleted elements. This
     * approach complicates tracking cursors since they rely on these IDs. The solution
     * recalculates position by replaying relevant history to update stable positions
     * accurately. To minimize the performance impact of history replay, the system
     * updates cursor info to reference only the IDs of currently present elements,
     * thereby reducing the need for replay.
     */
    func getCursor(pos: UInt32, side: Side)  -> Cursor?
    
    /**
     * Get the deep value of the container.
     */
    func getDeepValue()  -> LoroValue
    
    /**
     * Get the last editor of the list item at the given position.
     */
    func getLastEditorAt(pos: UInt32)  -> UInt64?
    
    /**
     * Get the last mover of the list item at the given position.
     */
    func getLastMoverAt(pos: UInt32)  -> UInt64?
    
    /**
     * Get the shallow value of the container.
     *
     * This does not convert the state of sub-containers; instead, it represents them as [LoroValue::Container].
     */
    func getValue()  -> LoroValue
    
    /**
     * Get the container id.
     */
    func id()  -> ContainerId
    
    /**
     * Insert a value at the given position.
     */
    func insert(pos: UInt32, v: LoroValueLike) throws 
    
    func insertCounterContainer(pos: UInt32, child: LoroCounter) throws  -> LoroCounter
    
    func insertListContainer(pos: UInt32, child: LoroList) throws  -> LoroList
    
    func insertMapContainer(pos: UInt32, child: LoroMap) throws  -> LoroMap
    
    func insertMovableListContainer(pos: UInt32, child: LoroMovableList) throws  -> LoroMovableList
    
    func insertTextContainer(pos: UInt32, child: LoroText) throws  -> LoroText
    
    func insertTreeContainer(pos: UInt32, child: LoroTree) throws  -> LoroTree
    
    /**
     * Whether the container is attached to a document
     *
     * The edits on a detached container will not be persisted.
     * To attach the container to the document, please insert it into an attached container.
     */
    func isAttached()  -> Bool
    
    /**
     * Whether the container is deleted.
     */
    func isDeleted()  -> Bool
    
    func isEmpty()  -> Bool
    
    func len()  -> UInt32
    
    /**
     * Move the value at the given position to the given position.
     */
    func mov(from: UInt32, to: UInt32) throws 
    
    /**
     * Pop the last element of the list.
     */
    func pop() throws  -> ValueOrContainer?
    
    func push(v: LoroValueLike) throws 
    
    /**
     * Set the value at the given position.
     */
    func set(pos: UInt32, value: LoroValueLike) throws 
    
    func setCounterContainer(pos: UInt32, child: LoroCounter) throws  -> LoroCounter
    
    func setListContainer(pos: UInt32, child: LoroList) throws  -> LoroList
    
    func setMapContainer(pos: UInt32, child: LoroMap) throws  -> LoroMap
    
    func setMovableListContainer(pos: UInt32, child: LoroMovableList) throws  -> LoroMovableList
    
    func setTextContainer(pos: UInt32, child: LoroText) throws  -> LoroText
    
    func setTreeContainer(pos: UInt32, child: LoroTree) throws  -> LoroTree
    
    /**
     * Get the elements of the list as a vector of LoroValues.
     *
     * This method returns a vector containing all the elements in the list as LoroValues.
     * It provides a convenient way to access the entire contents of the LoroMovableList
     * as a standard Rust vector.
     */
    func toVec()  -> [LoroValue]
    
}

open class LoroMovableList:
    LoroMovableListProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_loromovablelist(self.pointer, $0) }
    }
    /**
     * Create a new container that is detached from the document.
     *
     * The edits on a detached container will not be persisted.
     * To attach the container to the document, please insert it into an attached container.
     */
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_loro_fn_constructor_loromovablelist_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_loromovablelist(pointer, $0) }
    }

    

    
    /**
     * Delete all elements in the list.
     */
open func clear()throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_loromovablelist_clear(self.uniffiClonePointer(),$0
    )
}
}
    
    /**
     * Delete values at the given position.
     */
open func delete(pos: UInt32, len: UInt32)throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_loromovablelist_delete(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterUInt32.lower(len),$0
    )
}
}
    
    /**
     * Get the LoroDoc from this container
     */
open func doc() -> LoroDoc? {
    return try!  FfiConverterOptionTypeLoroDoc.lift(try! rustCall() {
    uniffi_loro_fn_method_loromovablelist_doc(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the value at the given position.
     */
open func get(index: UInt32) -> ValueOrContainer? {
    return try!  FfiConverterOptionTypeValueOrContainer.lift(try! rustCall() {
    uniffi_loro_fn_method_loromovablelist_get(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(index),$0
    )
})
}
    
    /**
     * If a detached container is attached, this method will return its corresponding attached handler.
     */
open func getAttached() -> LoroMovableList? {
    return try!  FfiConverterOptionTypeLoroMovableList.lift(try! rustCall() {
    uniffi_loro_fn_method_loromovablelist_get_attached(self.uniffiClonePointer(),$0
    )
})
}
    
open func getCreatorAt(pos: UInt32) -> UInt64? {
    return try!  FfiConverterOptionUInt64.lift(try! rustCall() {
    uniffi_loro_fn_method_loromovablelist_get_creator_at(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),$0
    )
})
}
    
    /**
     * Get the cursor at the given position.
     *
     * Using "index" to denote cursor positions can be unstable, as positions may
     * shift with document edits. To reliably represent a position or range within
     * a document, it is more effective to leverage the unique ID of each item/character
     * in a List CRDT or Text CRDT.
     *
     * Loro optimizes State metadata by not storing the IDs of deleted elements. This
     * approach complicates tracking cursors since they rely on these IDs. The solution
     * recalculates position by replaying relevant history to update stable positions
     * accurately. To minimize the performance impact of history replay, the system
     * updates cursor info to reference only the IDs of currently present elements,
     * thereby reducing the need for replay.
     */
open func getCursor(pos: UInt32, side: Side) -> Cursor? {
    return try!  FfiConverterOptionTypeCursor.lift(try! rustCall() {
    uniffi_loro_fn_method_loromovablelist_get_cursor(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterTypeSide.lower(side),$0
    )
})
}
    
    /**
     * Get the deep value of the container.
     */
open func getDeepValue() -> LoroValue {
    return try!  FfiConverterTypeLoroValue.lift(try! rustCall() {
    uniffi_loro_fn_method_loromovablelist_get_deep_value(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the last editor of the list item at the given position.
     */
open func getLastEditorAt(pos: UInt32) -> UInt64? {
    return try!  FfiConverterOptionUInt64.lift(try! rustCall() {
    uniffi_loro_fn_method_loromovablelist_get_last_editor_at(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),$0
    )
})
}
    
    /**
     * Get the last mover of the list item at the given position.
     */
open func getLastMoverAt(pos: UInt32) -> UInt64? {
    return try!  FfiConverterOptionUInt64.lift(try! rustCall() {
    uniffi_loro_fn_method_loromovablelist_get_last_mover_at(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),$0
    )
})
}
    
    /**
     * Get the shallow value of the container.
     *
     * This does not convert the state of sub-containers; instead, it represents them as [LoroValue::Container].
     */
open func getValue() -> LoroValue {
    return try!  FfiConverterTypeLoroValue.lift(try! rustCall() {
    uniffi_loro_fn_method_loromovablelist_get_value(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the container id.
     */
open func id() -> ContainerId {
    return try!  FfiConverterTypeContainerID.lift(try! rustCall() {
    uniffi_loro_fn_method_loromovablelist_id(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Insert a value at the given position.
     */
open func insert(pos: UInt32, v: LoroValueLike)throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_loromovablelist_insert(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterTypeLoroValueLike.lower(v),$0
    )
}
}
    
open func insertCounterContainer(pos: UInt32, child: LoroCounter)throws  -> LoroCounter {
    return try  FfiConverterTypeLoroCounter.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_loromovablelist_insert_counter_container(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterTypeLoroCounter.lower(child),$0
    )
})
}
    
open func insertListContainer(pos: UInt32, child: LoroList)throws  -> LoroList {
    return try  FfiConverterTypeLoroList.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_loromovablelist_insert_list_container(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterTypeLoroList.lower(child),$0
    )
})
}
    
open func insertMapContainer(pos: UInt32, child: LoroMap)throws  -> LoroMap {
    return try  FfiConverterTypeLoroMap.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_loromovablelist_insert_map_container(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterTypeLoroMap.lower(child),$0
    )
})
}
    
open func insertMovableListContainer(pos: UInt32, child: LoroMovableList)throws  -> LoroMovableList {
    return try  FfiConverterTypeLoroMovableList.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_loromovablelist_insert_movable_list_container(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterTypeLoroMovableList.lower(child),$0
    )
})
}
    
open func insertTextContainer(pos: UInt32, child: LoroText)throws  -> LoroText {
    return try  FfiConverterTypeLoroText.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_loromovablelist_insert_text_container(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterTypeLoroText.lower(child),$0
    )
})
}
    
open func insertTreeContainer(pos: UInt32, child: LoroTree)throws  -> LoroTree {
    return try  FfiConverterTypeLoroTree.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_loromovablelist_insert_tree_container(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterTypeLoroTree.lower(child),$0
    )
})
}
    
    /**
     * Whether the container is attached to a document
     *
     * The edits on a detached container will not be persisted.
     * To attach the container to the document, please insert it into an attached container.
     */
open func isAttached() -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_loro_fn_method_loromovablelist_is_attached(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Whether the container is deleted.
     */
open func isDeleted() -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_loro_fn_method_loromovablelist_is_deleted(self.uniffiClonePointer(),$0
    )
})
}
    
open func isEmpty() -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_loro_fn_method_loromovablelist_is_empty(self.uniffiClonePointer(),$0
    )
})
}
    
open func len() -> UInt32 {
    return try!  FfiConverterUInt32.lift(try! rustCall() {
    uniffi_loro_fn_method_loromovablelist_len(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Move the value at the given position to the given position.
     */
open func mov(from: UInt32, to: UInt32)throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_loromovablelist_mov(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(from),
        FfiConverterUInt32.lower(to),$0
    )
}
}
    
    /**
     * Pop the last element of the list.
     */
open func pop()throws  -> ValueOrContainer? {
    return try  FfiConverterOptionTypeValueOrContainer.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_loromovablelist_pop(self.uniffiClonePointer(),$0
    )
})
}
    
open func push(v: LoroValueLike)throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_loromovablelist_push(self.uniffiClonePointer(),
        FfiConverterTypeLoroValueLike.lower(v),$0
    )
}
}
    
    /**
     * Set the value at the given position.
     */
open func set(pos: UInt32, value: LoroValueLike)throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_loromovablelist_set(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterTypeLoroValueLike.lower(value),$0
    )
}
}
    
open func setCounterContainer(pos: UInt32, child: LoroCounter)throws  -> LoroCounter {
    return try  FfiConverterTypeLoroCounter.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_loromovablelist_set_counter_container(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterTypeLoroCounter.lower(child),$0
    )
})
}
    
open func setListContainer(pos: UInt32, child: LoroList)throws  -> LoroList {
    return try  FfiConverterTypeLoroList.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_loromovablelist_set_list_container(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterTypeLoroList.lower(child),$0
    )
})
}
    
open func setMapContainer(pos: UInt32, child: LoroMap)throws  -> LoroMap {
    return try  FfiConverterTypeLoroMap.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_loromovablelist_set_map_container(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterTypeLoroMap.lower(child),$0
    )
})
}
    
open func setMovableListContainer(pos: UInt32, child: LoroMovableList)throws  -> LoroMovableList {
    return try  FfiConverterTypeLoroMovableList.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_loromovablelist_set_movable_list_container(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterTypeLoroMovableList.lower(child),$0
    )
})
}
    
open func setTextContainer(pos: UInt32, child: LoroText)throws  -> LoroText {
    return try  FfiConverterTypeLoroText.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_loromovablelist_set_text_container(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterTypeLoroText.lower(child),$0
    )
})
}
    
open func setTreeContainer(pos: UInt32, child: LoroTree)throws  -> LoroTree {
    return try  FfiConverterTypeLoroTree.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_loromovablelist_set_tree_container(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterTypeLoroTree.lower(child),$0
    )
})
}
    
    /**
     * Get the elements of the list as a vector of LoroValues.
     *
     * This method returns a vector containing all the elements in the list as LoroValues.
     * It provides a convenient way to access the entire contents of the LoroMovableList
     * as a standard Rust vector.
     */
open func toVec() -> [LoroValue] {
    return try!  FfiConverterSequenceTypeLoroValue.lift(try! rustCall() {
    uniffi_loro_fn_method_loromovablelist_to_vec(self.uniffiClonePointer(),$0
    )
})
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLoroMovableList: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LoroMovableList

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroMovableList {
        return LoroMovableList(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LoroMovableList) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoroMovableList {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LoroMovableList, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLoroMovableList_lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroMovableList {
    return try FfiConverterTypeLoroMovableList.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLoroMovableList_lower(_ value: LoroMovableList) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLoroMovableList.lower(value)
}




public protocol LoroTextProtocol : AnyObject {
    
    /**
     * Apply a [delta](https://quilljs.com/docs/delta/) to the text container.
     */
    func applyDelta(delta: [TextDelta]) throws 
    
    /**
     * Delete a range of text at the given unicode position with unicode length.
     */
    func delete(pos: UInt32, len: UInt32) throws 
    
    /**
     * Delete a range of text at the given utf-8 position with utf-8 length.
     */
    func deleteUtf8(pos: UInt32, len: UInt32) throws 
    
    /**
     * Get the LoroDoc from this container
     */
    func doc()  -> LoroDoc?
    
    /**
     * If a detached container is attached, this method will return its corresponding attached handler.
     */
    func getAttached()  -> LoroText?
    
    /**
     * Get the cursor at the given position in the given Unicode position..
     *
     * Using "index" to denote cursor positions can be unstable, as positions may
     * shift with document edits. To reliably represent a position or range within
     * a document, it is more effective to leverage the unique ID of each item/character
     * in a List CRDT or Text CRDT.
     *
     * Loro optimizes State metadata by not storing the IDs of deleted elements. This
     * approach complicates tracking cursors since they rely on these IDs. The solution
     * recalculates position by replaying relevant history to update stable positions
     * accurately. To minimize the performance impact of history replay, the system
     * updates cursor info to reference only the IDs of currently present elements,
     * thereby reducing the need for replay.
     */
    func getCursor(pos: UInt32, side: Side)  -> Cursor?
    
    /**
     * Get the editor of the text at the given position.
     */
    func getEditorAtUnicodePos(pos: UInt32)  -> UInt64?
    
    /**
     * Get the text in [Delta](https://quilljs.com/docs/delta/) format.
     */
    func getRichtextValue()  -> LoroValue
    
    /**
     * Get the [ContainerID]  of the text container.
     */
    func id()  -> ContainerId
    
    /**
     * Insert a string at the given unicode position.
     */
    func insert(pos: UInt32, s: String) throws 
    
    /**
     * Insert a string at the given utf-8 position.
     */
    func insertUtf8(pos: UInt32, s: String) throws 
    
    /**
     * Whether the container is attached to a document
     *
     * The edits on a detached container will not be persisted.
     * To attach the container to the document, please insert it into an attached container.
     */
    func isAttached()  -> Bool
    
    /**
     * Whether the container is deleted.
     */
    func isDeleted()  -> Bool
    
    /**
     * Whether the text container is empty.
     */
    func isEmpty()  -> Bool
    
    /**
     * Get the length of the text container in Unicode.
     */
    func lenUnicode()  -> UInt32
    
    /**
     * Get the length of the text container in UTF-16.
     */
    func lenUtf16()  -> UInt32
    
    /**
     * Get the length of the text container in UTF-8.
     */
    func lenUtf8()  -> UInt32
    
    /**
     * Mark a range of text with a key-value pair.
     *
     * You can use it to create a highlight, make a range of text bold, or add a link to a range of text.
     *
     * You can specify the `expand` option to set the behavior when inserting text at the boundary of the range.
     *
     * - `after`(default): when inserting text right after the given range, the mark will be expanded to include the inserted text
     * - `before`: when inserting text right before the given range, the mark will be expanded to include the inserted text
     * - `none`: the mark will not be expanded to include the inserted text at the boundaries
     * - `both`: when inserting text either right before or right after the given range, the mark will be expanded to include the inserted text
     *
     * *You should make sure that a key is always associated with the same expand type.*
     *
     * Note: this is not suitable for unmergeable annotations like comments.
     */
    func mark(from: UInt32, to: UInt32, key: String, value: LoroValueLike) throws 
    
    /**
     * Push a string to the end of the text container.
     */
    func pushStr(s: String) throws 
    
    /**
     * Get a string slice at the given Unicode range
     */
    func slice(startIndex: UInt32, endIndex: UInt32) throws  -> String
    
    /**
     * Delete specified character and insert string at the same position at given unicode position.
     */
    func splice(pos: UInt32, len: UInt32, s: String) throws  -> String
    
    /**
     * Get the text in [Delta](https://quilljs.com/docs/delta/) format.
     */
    func toDelta()  -> [TextDelta]
    
    /**
     * Get the text content of the text container.
     */
    func toString()  -> String
    
    /**
     * Unmark a range of text with a key and a value.
     *
     * You can use it to remove highlights, bolds or links
     *
     * You can specify the `expand` option to set the behavior when inserting text at the boundary of the range.
     *
     * **Note: You should specify the same expand type as when you mark the text.**
     *
     * - `after`(default): when inserting text right after the given range, the mark will be expanded to include the inserted text
     * - `before`: when inserting text right before the given range, the mark will be expanded to include the inserted text
     * - `none`: the mark will not be expanded to include the inserted text at the boundaries
     * - `both`: when inserting text either right before or right after the given range, the mark will be expanded to include the inserted text
     *
     * *You should make sure that a key is always associated with the same expand type.*
     *
     * Note: you cannot delete unmergeable annotations like comments by this method.
     */
    func unmark(from: UInt32, to: UInt32, key: String) throws 
    
    /**
     * Update the current text based on the provided text.
     *
     * It will calculate the minimal difference and apply it to the current text.
     * It uses Myers' diff algorithm to compute the optimal difference.
     *
     * This could take a long time for large texts (e.g. > 50_000 characters).
     * In that case, you should use `updateByLine` instead.
     */
    func update(s: String, options: UpdateOptions) throws 
    
    /**
     * Update the current text based on the provided text.
     *
     * This update calculation is line-based, which will be more efficient but less precise.
     */
    func updateByLine(s: String, options: UpdateOptions) throws 
    
}

open class LoroText:
    LoroTextProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_lorotext(self.pointer, $0) }
    }
    /**
     * Create a new container that is detached from the document.
     *
     * The edits on a detached container will not be persisted.
     * To attach the container to the document, please insert it into an attached container.
     */
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_loro_fn_constructor_lorotext_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_lorotext(pointer, $0) }
    }

    

    
    /**
     * Apply a [delta](https://quilljs.com/docs/delta/) to the text container.
     */
open func applyDelta(delta: [TextDelta])throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorotext_apply_delta(self.uniffiClonePointer(),
        FfiConverterSequenceTypeTextDelta.lower(delta),$0
    )
}
}
    
    /**
     * Delete a range of text at the given unicode position with unicode length.
     */
open func delete(pos: UInt32, len: UInt32)throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorotext_delete(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterUInt32.lower(len),$0
    )
}
}
    
    /**
     * Delete a range of text at the given utf-8 position with utf-8 length.
     */
open func deleteUtf8(pos: UInt32, len: UInt32)throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorotext_delete_utf8(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterUInt32.lower(len),$0
    )
}
}
    
    /**
     * Get the LoroDoc from this container
     */
open func doc() -> LoroDoc? {
    return try!  FfiConverterOptionTypeLoroDoc.lift(try! rustCall() {
    uniffi_loro_fn_method_lorotext_doc(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * If a detached container is attached, this method will return its corresponding attached handler.
     */
open func getAttached() -> LoroText? {
    return try!  FfiConverterOptionTypeLoroText.lift(try! rustCall() {
    uniffi_loro_fn_method_lorotext_get_attached(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the cursor at the given position in the given Unicode position..
     *
     * Using "index" to denote cursor positions can be unstable, as positions may
     * shift with document edits. To reliably represent a position or range within
     * a document, it is more effective to leverage the unique ID of each item/character
     * in a List CRDT or Text CRDT.
     *
     * Loro optimizes State metadata by not storing the IDs of deleted elements. This
     * approach complicates tracking cursors since they rely on these IDs. The solution
     * recalculates position by replaying relevant history to update stable positions
     * accurately. To minimize the performance impact of history replay, the system
     * updates cursor info to reference only the IDs of currently present elements,
     * thereby reducing the need for replay.
     */
open func getCursor(pos: UInt32, side: Side) -> Cursor? {
    return try!  FfiConverterOptionTypeCursor.lift(try! rustCall() {
    uniffi_loro_fn_method_lorotext_get_cursor(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterTypeSide.lower(side),$0
    )
})
}
    
    /**
     * Get the editor of the text at the given position.
     */
open func getEditorAtUnicodePos(pos: UInt32) -> UInt64? {
    return try!  FfiConverterOptionUInt64.lift(try! rustCall() {
    uniffi_loro_fn_method_lorotext_get_editor_at_unicode_pos(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),$0
    )
})
}
    
    /**
     * Get the text in [Delta](https://quilljs.com/docs/delta/) format.
     */
open func getRichtextValue() -> LoroValue {
    return try!  FfiConverterTypeLoroValue.lift(try! rustCall() {
    uniffi_loro_fn_method_lorotext_get_richtext_value(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the [ContainerID]  of the text container.
     */
open func id() -> ContainerId {
    return try!  FfiConverterTypeContainerID.lift(try! rustCall() {
    uniffi_loro_fn_method_lorotext_id(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Insert a string at the given unicode position.
     */
open func insert(pos: UInt32, s: String)throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorotext_insert(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterString.lower(s),$0
    )
}
}
    
    /**
     * Insert a string at the given utf-8 position.
     */
open func insertUtf8(pos: UInt32, s: String)throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorotext_insert_utf8(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterString.lower(s),$0
    )
}
}
    
    /**
     * Whether the container is attached to a document
     *
     * The edits on a detached container will not be persisted.
     * To attach the container to the document, please insert it into an attached container.
     */
open func isAttached() -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_loro_fn_method_lorotext_is_attached(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Whether the container is deleted.
     */
open func isDeleted() -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_loro_fn_method_lorotext_is_deleted(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Whether the text container is empty.
     */
open func isEmpty() -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_loro_fn_method_lorotext_is_empty(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the length of the text container in Unicode.
     */
open func lenUnicode() -> UInt32 {
    return try!  FfiConverterUInt32.lift(try! rustCall() {
    uniffi_loro_fn_method_lorotext_len_unicode(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the length of the text container in UTF-16.
     */
open func lenUtf16() -> UInt32 {
    return try!  FfiConverterUInt32.lift(try! rustCall() {
    uniffi_loro_fn_method_lorotext_len_utf16(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the length of the text container in UTF-8.
     */
open func lenUtf8() -> UInt32 {
    return try!  FfiConverterUInt32.lift(try! rustCall() {
    uniffi_loro_fn_method_lorotext_len_utf8(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Mark a range of text with a key-value pair.
     *
     * You can use it to create a highlight, make a range of text bold, or add a link to a range of text.
     *
     * You can specify the `expand` option to set the behavior when inserting text at the boundary of the range.
     *
     * - `after`(default): when inserting text right after the given range, the mark will be expanded to include the inserted text
     * - `before`: when inserting text right before the given range, the mark will be expanded to include the inserted text
     * - `none`: the mark will not be expanded to include the inserted text at the boundaries
     * - `both`: when inserting text either right before or right after the given range, the mark will be expanded to include the inserted text
     *
     * *You should make sure that a key is always associated with the same expand type.*
     *
     * Note: this is not suitable for unmergeable annotations like comments.
     */
open func mark(from: UInt32, to: UInt32, key: String, value: LoroValueLike)throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorotext_mark(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(from),
        FfiConverterUInt32.lower(to),
        FfiConverterString.lower(key),
        FfiConverterTypeLoroValueLike.lower(value),$0
    )
}
}
    
    /**
     * Push a string to the end of the text container.
     */
open func pushStr(s: String)throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorotext_push_str(self.uniffiClonePointer(),
        FfiConverterString.lower(s),$0
    )
}
}
    
    /**
     * Get a string slice at the given Unicode range
     */
open func slice(startIndex: UInt32, endIndex: UInt32)throws  -> String {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorotext_slice(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(startIndex),
        FfiConverterUInt32.lower(endIndex),$0
    )
})
}
    
    /**
     * Delete specified character and insert string at the same position at given unicode position.
     */
open func splice(pos: UInt32, len: UInt32, s: String)throws  -> String {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorotext_splice(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterUInt32.lower(len),
        FfiConverterString.lower(s),$0
    )
})
}
    
    /**
     * Get the text in [Delta](https://quilljs.com/docs/delta/) format.
     */
open func toDelta() -> [TextDelta] {
    return try!  FfiConverterSequenceTypeTextDelta.lift(try! rustCall() {
    uniffi_loro_fn_method_lorotext_to_delta(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the text content of the text container.
     */
open func toString() -> String {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_loro_fn_method_lorotext_to_string(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Unmark a range of text with a key and a value.
     *
     * You can use it to remove highlights, bolds or links
     *
     * You can specify the `expand` option to set the behavior when inserting text at the boundary of the range.
     *
     * **Note: You should specify the same expand type as when you mark the text.**
     *
     * - `after`(default): when inserting text right after the given range, the mark will be expanded to include the inserted text
     * - `before`: when inserting text right before the given range, the mark will be expanded to include the inserted text
     * - `none`: the mark will not be expanded to include the inserted text at the boundaries
     * - `both`: when inserting text either right before or right after the given range, the mark will be expanded to include the inserted text
     *
     * *You should make sure that a key is always associated with the same expand type.*
     *
     * Note: you cannot delete unmergeable annotations like comments by this method.
     */
open func unmark(from: UInt32, to: UInt32, key: String)throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorotext_unmark(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(from),
        FfiConverterUInt32.lower(to),
        FfiConverterString.lower(key),$0
    )
}
}
    
    /**
     * Update the current text based on the provided text.
     *
     * It will calculate the minimal difference and apply it to the current text.
     * It uses Myers' diff algorithm to compute the optimal difference.
     *
     * This could take a long time for large texts (e.g. > 50_000 characters).
     * In that case, you should use `updateByLine` instead.
     */
open func update(s: String, options: UpdateOptions)throws  {try rustCallWithError(FfiConverterTypeUpdateTimeoutError.lift) {
    uniffi_loro_fn_method_lorotext_update(self.uniffiClonePointer(),
        FfiConverterString.lower(s),
        FfiConverterTypeUpdateOptions.lower(options),$0
    )
}
}
    
    /**
     * Update the current text based on the provided text.
     *
     * This update calculation is line-based, which will be more efficient but less precise.
     */
open func updateByLine(s: String, options: UpdateOptions)throws  {try rustCallWithError(FfiConverterTypeUpdateTimeoutError.lift) {
    uniffi_loro_fn_method_lorotext_update_by_line(self.uniffiClonePointer(),
        FfiConverterString.lower(s),
        FfiConverterTypeUpdateOptions.lower(options),$0
    )
}
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLoroText: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LoroText

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroText {
        return LoroText(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LoroText) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoroText {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LoroText, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLoroText_lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroText {
    return try FfiConverterTypeLoroText.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLoroText_lower(_ value: LoroText) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLoroText.lower(value)
}




public protocol LoroTreeProtocol : AnyObject {
    
    /**
     * Return all children of the target node.
     *
     * If the parent node does not exist, return `None`.
     */
    func children(parent: TreeParentId)  -> [TreeId]?
    
    /**
     * Return the number of children of the target node.
     */
    func childrenNum(parent: TreeParentId)  -> UInt32?
    
    /**
     * Return whether target node exists.
     */
    func contains(target: TreeId)  -> Bool
    
    /**
     * Create a new tree node and return the [`TreeID`].
     *
     * If the `parent` is `None`, the created node is the root of a tree.
     * Otherwise, the created node is a child of the parent tree node.
     */
    func create(parent: TreeParentId) throws  -> TreeId
    
    /**
     * Create a new tree node at the given index and return the [`TreeID`].
     *
     * If the `parent` is `None`, the created node is the root of a tree.
     * If the `index` is greater than the number of children of the parent, error will be returned.
     */
    func createAt(parent: TreeParentId, index: UInt32) throws  -> TreeId
    
    /**
     * Delete a tree node.
     *
     * Note: If the deleted node has children, the children do not appear in the state
     * rather than actually being deleted.
     */
    func delete(target: TreeId) throws 
    
    /**
     * Disable the fractional index generation when you don't need the Tree's siblings to be sorted.
     * The fractional index will always be set to the same default value 0.
     *
     * After calling this, you cannot use `tree.moveTo()`, `tree.moveBefore()`, `tree.moveAfter()`,
     * and `tree.createAt()`.
     */
    func disableFractionalIndex() 
    
    /**
     * Get the LoroDoc from this container
     */
    func doc()  -> LoroDoc?
    
    /**
     * Enable fractional index for Tree Position.
     *
     * The jitter is used to avoid conflicts when multiple users are creating the node at the same position.
     * value 0 is default, which means no jitter, any value larger than 0 will enable jitter.
     *
     * Generally speaking, jitter will affect the growth rate of document size.
     * [Read more about it](https://www.loro.dev/blog/movable-tree#implementation-and-encoding-size)
     */
    func enableFractionalIndex(jitter: UInt8) 
    
    /**
     * Return the fractional index of the target node with hex format.
     */
    func fractionalIndex(target: TreeId)  -> String?
    
    /**
     * If a detached container is attached, this method will return its corresponding attached handler.
     */
    func getAttached()  -> LoroTree?
    
    /**
     * Get the last move id of the target node.
     */
    func getLastMoveId(target: TreeId)  -> Id?
    
    /**
     * Get the associated metadata map handler of a tree node.
     */
    func getMeta(target: TreeId) throws  -> LoroMap
    
    /**
     * Return the flat array of the forest.
     *
     * Note: the metadata will be not resolved. So if you don't only care about hierarchy
     * but also the metadata, you should use `get_value_with_meta()`.
     */
    func getValue()  -> LoroValue
    
    /**
     * Return the flat array of the forest, each node is with metadata.
     */
    func getValueWithMeta()  -> LoroValue
    
    /**
     * Return container id of the tree.
     */
    func id()  -> ContainerId
    
    /**
     * Whether the container is attached to a document
     *
     * The edits on a detached container will not be persisted.
     * To attach the container to the document, please insert it into an attached container.
     */
    func isAttached()  -> Bool
    
    /**
     * Whether the container is deleted.
     */
    func isDeleted()  -> Bool
    
    /**
     * Whether the fractional index is enabled.
     */
    func isFractionalIndexEnabled()  -> Bool
    
    /**
     * Return whether target node is deleted.
     *
     * # Errors
     * - If the target node does not exist, return `LoroTreeError::TreeNodeNotExist`.
     */
    func isNodeDeleted(target: TreeId) throws  -> Bool
    
    /**
     * Move the `target` node to be a child of the `parent` node.
     *
     * If the `parent` is `None`, the `target` node will be a root.
     */
    func mov(target: TreeId, parent: TreeParentId) throws 
    
    /**
     * Move the `target` node to be a child after the `after` node with the same parent.
     */
    func movAfter(target: TreeId, after: TreeId) throws 
    
    /**
     * Move the `target` node to be a child before the `before` node with the same parent.
     */
    func movBefore(target: TreeId, before: TreeId) throws 
    
    /**
     * Move the `target` node to be a child of the `parent` node at the given index.
     * If the `parent` is `None`, the `target` node will be a root.
     */
    func movTo(target: TreeId, parent: TreeParentId, to: UInt32) throws 
    
    /**
     * Return all nodes, including deleted nodes
     */
    func nodes()  -> [TreeId]
    
    /**
     * Return the parent of target node.
     *
     * - If the target node does not exist, throws Error.
     * - If the target node is a root node, return nil.
     */
    func parent(target: TreeId) throws  -> TreeParentId
    
    /**
     * Get the root nodes of the forest.
     */
    func roots()  -> [TreeId]
    
}

open class LoroTree:
    LoroTreeProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_lorotree(self.pointer, $0) }
    }
    /**
     * Create a new container that is detached from the document.
     *
     * The edits on a detached container will not be persisted.
     * To attach the container to the document, please insert it into an attached container.
     */
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_loro_fn_constructor_lorotree_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_lorotree(pointer, $0) }
    }

    

    
    /**
     * Return all children of the target node.
     *
     * If the parent node does not exist, return `None`.
     */
open func children(parent: TreeParentId) -> [TreeId]? {
    return try!  FfiConverterOptionSequenceTypeTreeID.lift(try! rustCall() {
    uniffi_loro_fn_method_lorotree_children(self.uniffiClonePointer(),
        FfiConverterTypeTreeParentId.lower(parent),$0
    )
})
}
    
    /**
     * Return the number of children of the target node.
     */
open func childrenNum(parent: TreeParentId) -> UInt32? {
    return try!  FfiConverterOptionUInt32.lift(try! rustCall() {
    uniffi_loro_fn_method_lorotree_children_num(self.uniffiClonePointer(),
        FfiConverterTypeTreeParentId.lower(parent),$0
    )
})
}
    
    /**
     * Return whether target node exists.
     */
open func contains(target: TreeId) -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_loro_fn_method_lorotree_contains(self.uniffiClonePointer(),
        FfiConverterTypeTreeID.lower(target),$0
    )
})
}
    
    /**
     * Create a new tree node and return the [`TreeID`].
     *
     * If the `parent` is `None`, the created node is the root of a tree.
     * Otherwise, the created node is a child of the parent tree node.
     */
open func create(parent: TreeParentId)throws  -> TreeId {
    return try  FfiConverterTypeTreeID.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorotree_create(self.uniffiClonePointer(),
        FfiConverterTypeTreeParentId.lower(parent),$0
    )
})
}
    
    /**
     * Create a new tree node at the given index and return the [`TreeID`].
     *
     * If the `parent` is `None`, the created node is the root of a tree.
     * If the `index` is greater than the number of children of the parent, error will be returned.
     */
open func createAt(parent: TreeParentId, index: UInt32)throws  -> TreeId {
    return try  FfiConverterTypeTreeID.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorotree_create_at(self.uniffiClonePointer(),
        FfiConverterTypeTreeParentId.lower(parent),
        FfiConverterUInt32.lower(index),$0
    )
})
}
    
    /**
     * Delete a tree node.
     *
     * Note: If the deleted node has children, the children do not appear in the state
     * rather than actually being deleted.
     */
open func delete(target: TreeId)throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorotree_delete(self.uniffiClonePointer(),
        FfiConverterTypeTreeID.lower(target),$0
    )
}
}
    
    /**
     * Disable the fractional index generation when you don't need the Tree's siblings to be sorted.
     * The fractional index will always be set to the same default value 0.
     *
     * After calling this, you cannot use `tree.moveTo()`, `tree.moveBefore()`, `tree.moveAfter()`,
     * and `tree.createAt()`.
     */
open func disableFractionalIndex() {try! rustCall() {
    uniffi_loro_fn_method_lorotree_disable_fractional_index(self.uniffiClonePointer(),$0
    )
}
}
    
    /**
     * Get the LoroDoc from this container
     */
open func doc() -> LoroDoc? {
    return try!  FfiConverterOptionTypeLoroDoc.lift(try! rustCall() {
    uniffi_loro_fn_method_lorotree_doc(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Enable fractional index for Tree Position.
     *
     * The jitter is used to avoid conflicts when multiple users are creating the node at the same position.
     * value 0 is default, which means no jitter, any value larger than 0 will enable jitter.
     *
     * Generally speaking, jitter will affect the growth rate of document size.
     * [Read more about it](https://www.loro.dev/blog/movable-tree#implementation-and-encoding-size)
     */
open func enableFractionalIndex(jitter: UInt8) {try! rustCall() {
    uniffi_loro_fn_method_lorotree_enable_fractional_index(self.uniffiClonePointer(),
        FfiConverterUInt8.lower(jitter),$0
    )
}
}
    
    /**
     * Return the fractional index of the target node with hex format.
     */
open func fractionalIndex(target: TreeId) -> String? {
    return try!  FfiConverterOptionString.lift(try! rustCall() {
    uniffi_loro_fn_method_lorotree_fractional_index(self.uniffiClonePointer(),
        FfiConverterTypeTreeID.lower(target),$0
    )
})
}
    
    /**
     * If a detached container is attached, this method will return its corresponding attached handler.
     */
open func getAttached() -> LoroTree? {
    return try!  FfiConverterOptionTypeLoroTree.lift(try! rustCall() {
    uniffi_loro_fn_method_lorotree_get_attached(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the last move id of the target node.
     */
open func getLastMoveId(target: TreeId) -> Id? {
    return try!  FfiConverterOptionTypeID.lift(try! rustCall() {
    uniffi_loro_fn_method_lorotree_get_last_move_id(self.uniffiClonePointer(),
        FfiConverterTypeTreeID.lower(target),$0
    )
})
}
    
    /**
     * Get the associated metadata map handler of a tree node.
     */
open func getMeta(target: TreeId)throws  -> LoroMap {
    return try  FfiConverterTypeLoroMap.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorotree_get_meta(self.uniffiClonePointer(),
        FfiConverterTypeTreeID.lower(target),$0
    )
})
}
    
    /**
     * Return the flat array of the forest.
     *
     * Note: the metadata will be not resolved. So if you don't only care about hierarchy
     * but also the metadata, you should use `get_value_with_meta()`.
     */
open func getValue() -> LoroValue {
    return try!  FfiConverterTypeLoroValue.lift(try! rustCall() {
    uniffi_loro_fn_method_lorotree_get_value(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Return the flat array of the forest, each node is with metadata.
     */
open func getValueWithMeta() -> LoroValue {
    return try!  FfiConverterTypeLoroValue.lift(try! rustCall() {
    uniffi_loro_fn_method_lorotree_get_value_with_meta(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Return container id of the tree.
     */
open func id() -> ContainerId {
    return try!  FfiConverterTypeContainerID.lift(try! rustCall() {
    uniffi_loro_fn_method_lorotree_id(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Whether the container is attached to a document
     *
     * The edits on a detached container will not be persisted.
     * To attach the container to the document, please insert it into an attached container.
     */
open func isAttached() -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_loro_fn_method_lorotree_is_attached(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Whether the container is deleted.
     */
open func isDeleted() -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_loro_fn_method_lorotree_is_deleted(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Whether the fractional index is enabled.
     */
open func isFractionalIndexEnabled() -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_loro_fn_method_lorotree_is_fractional_index_enabled(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Return whether target node is deleted.
     *
     * # Errors
     * - If the target node does not exist, return `LoroTreeError::TreeNodeNotExist`.
     */
open func isNodeDeleted(target: TreeId)throws  -> Bool {
    return try  FfiConverterBool.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorotree_is_node_deleted(self.uniffiClonePointer(),
        FfiConverterTypeTreeID.lower(target),$0
    )
})
}
    
    /**
     * Move the `target` node to be a child of the `parent` node.
     *
     * If the `parent` is `None`, the `target` node will be a root.
     */
open func mov(target: TreeId, parent: TreeParentId)throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorotree_mov(self.uniffiClonePointer(),
        FfiConverterTypeTreeID.lower(target),
        FfiConverterTypeTreeParentId.lower(parent),$0
    )
}
}
    
    /**
     * Move the `target` node to be a child after the `after` node with the same parent.
     */
open func movAfter(target: TreeId, after: TreeId)throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorotree_mov_after(self.uniffiClonePointer(),
        FfiConverterTypeTreeID.lower(target),
        FfiConverterTypeTreeID.lower(after),$0
    )
}
}
    
    /**
     * Move the `target` node to be a child before the `before` node with the same parent.
     */
open func movBefore(target: TreeId, before: TreeId)throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorotree_mov_before(self.uniffiClonePointer(),
        FfiConverterTypeTreeID.lower(target),
        FfiConverterTypeTreeID.lower(before),$0
    )
}
}
    
    /**
     * Move the `target` node to be a child of the `parent` node at the given index.
     * If the `parent` is `None`, the `target` node will be a root.
     */
open func movTo(target: TreeId, parent: TreeParentId, to: UInt32)throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorotree_mov_to(self.uniffiClonePointer(),
        FfiConverterTypeTreeID.lower(target),
        FfiConverterTypeTreeParentId.lower(parent),
        FfiConverterUInt32.lower(to),$0
    )
}
}
    
    /**
     * Return all nodes, including deleted nodes
     */
open func nodes() -> [TreeId] {
    return try!  FfiConverterSequenceTypeTreeID.lift(try! rustCall() {
    uniffi_loro_fn_method_lorotree_nodes(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Return the parent of target node.
     *
     * - If the target node does not exist, throws Error.
     * - If the target node is a root node, return nil.
     */
open func parent(target: TreeId)throws  -> TreeParentId {
    return try  FfiConverterTypeTreeParentId.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorotree_parent(self.uniffiClonePointer(),
        FfiConverterTypeTreeID.lower(target),$0
    )
})
}
    
    /**
     * Get the root nodes of the forest.
     */
open func roots() -> [TreeId] {
    return try!  FfiConverterSequenceTypeTreeID.lift(try! rustCall() {
    uniffi_loro_fn_method_lorotree_roots(self.uniffiClonePointer(),$0
    )
})
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLoroTree: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LoroTree

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroTree {
        return LoroTree(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LoroTree) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoroTree {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LoroTree, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLoroTree_lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroTree {
    return try FfiConverterTypeLoroTree.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLoroTree_lower(_ value: LoroTree) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLoroTree.lower(value)
}




public protocol LoroUnknownProtocol : AnyObject {
    
    /**
     * Get the container id.
     */
    func id()  -> ContainerId
    
}

open class LoroUnknown:
    LoroUnknownProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_lorounknown(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_lorounknown(pointer, $0) }
    }

    

    
    /**
     * Get the container id.
     */
open func id() -> ContainerId {
    return try!  FfiConverterTypeContainerID.lift(try! rustCall() {
    uniffi_loro_fn_method_lorounknown_id(self.uniffiClonePointer(),$0
    )
})
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLoroUnknown: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LoroUnknown

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroUnknown {
        return LoroUnknown(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LoroUnknown) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoroUnknown {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LoroUnknown, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLoroUnknown_lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroUnknown {
    return try FfiConverterTypeLoroUnknown.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLoroUnknown_lower(_ value: LoroUnknown) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLoroUnknown.lower(value)
}




public protocol LoroValueLike: Any {
    
    func asLoroValue()  -> LoroValue
    
}

open class LoroValueLikeImpl:
    LoroValueLike {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_lorovaluelike(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_lorovaluelike(pointer, $0) }
    }

    

    
open func asLoroValue() -> LoroValue {
    return try!  FfiConverterTypeLoroValue.lift(try! rustCall() {
    uniffi_loro_fn_method_lorovaluelike_as_loro_value(self.uniffiClonePointer(),$0
    )
})
}
    

}


// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceLoroValueLike {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceLoroValueLike = UniffiVTableCallbackInterfaceLoroValueLike(
        asLoroValue: { (
            uniffiHandle: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> LoroValue in
                guard let uniffiObj = try? FfiConverterTypeLoroValueLike.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.asLoroValue(
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterTypeLoroValue.lower($0) }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterTypeLoroValueLike.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface LoroValueLike: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitLoroValueLike() {
    uniffi_loro_fn_init_callback_vtable_lorovaluelike(&UniffiCallbackInterfaceLoroValueLike.vtable)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLoroValueLike: FfiConverter {
    fileprivate static var handleMap = UniffiHandleMap<LoroValueLike>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LoroValueLike

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroValueLike {
        return LoroValueLikeImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LoroValueLike) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoroValueLike {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LoroValueLike, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLoroValueLike_lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroValueLike {
    return try FfiConverterTypeLoroValueLike.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLoroValueLike_lower(_ value: LoroValueLike) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLoroValueLike.lower(value)
}




public protocol OnPop : AnyObject {
    
    func onPop(undoOrRedo: UndoOrRedo, span: CounterSpan, undoMeta: UndoItemMeta) 
    
}

open class OnPopImpl:
    OnPop {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_onpop(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_onpop(pointer, $0) }
    }

    

    
open func onPop(undoOrRedo: UndoOrRedo, span: CounterSpan, undoMeta: UndoItemMeta) {try! rustCall() {
    uniffi_loro_fn_method_onpop_on_pop(self.uniffiClonePointer(),
        FfiConverterTypeUndoOrRedo.lower(undoOrRedo),
        FfiConverterTypeCounterSpan.lower(span),
        FfiConverterTypeUndoItemMeta.lower(undoMeta),$0
    )
}
}
    

}


// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceOnPop {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceOnPop = UniffiVTableCallbackInterfaceOnPop(
        onPop: { (
            uniffiHandle: UInt64,
            undoOrRedo: RustBuffer,
            span: RustBuffer,
            undoMeta: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterTypeOnPop.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.onPop(
                     undoOrRedo: try FfiConverterTypeUndoOrRedo.lift(undoOrRedo),
                     span: try FfiConverterTypeCounterSpan.lift(span),
                     undoMeta: try FfiConverterTypeUndoItemMeta.lift(undoMeta)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterTypeOnPop.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface OnPop: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitOnPop() {
    uniffi_loro_fn_init_callback_vtable_onpop(&UniffiCallbackInterfaceOnPop.vtable)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeOnPop: FfiConverter {
    fileprivate static var handleMap = UniffiHandleMap<OnPop>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = OnPop

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> OnPop {
        return OnPopImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: OnPop) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OnPop {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: OnPop, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOnPop_lift(_ pointer: UnsafeMutableRawPointer) throws -> OnPop {
    return try FfiConverterTypeOnPop.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOnPop_lower(_ value: OnPop) -> UnsafeMutableRawPointer {
    return FfiConverterTypeOnPop.lower(value)
}




public protocol OnPush : AnyObject {
    
    func onPush(undoOrRedo: UndoOrRedo, span: CounterSpan, diffEvent: DiffEvent?)  -> UndoItemMeta
    
}

open class OnPushImpl:
    OnPush {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_onpush(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_onpush(pointer, $0) }
    }

    

    
open func onPush(undoOrRedo: UndoOrRedo, span: CounterSpan, diffEvent: DiffEvent?) -> UndoItemMeta {
    return try!  FfiConverterTypeUndoItemMeta.lift(try! rustCall() {
    uniffi_loro_fn_method_onpush_on_push(self.uniffiClonePointer(),
        FfiConverterTypeUndoOrRedo.lower(undoOrRedo),
        FfiConverterTypeCounterSpan.lower(span),
        FfiConverterOptionTypeDiffEvent.lower(diffEvent),$0
    )
})
}
    

}


// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceOnPush {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceOnPush = UniffiVTableCallbackInterfaceOnPush(
        onPush: { (
            uniffiHandle: UInt64,
            undoOrRedo: RustBuffer,
            span: RustBuffer,
            diffEvent: RustBuffer,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> UndoItemMeta in
                guard let uniffiObj = try? FfiConverterTypeOnPush.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.onPush(
                     undoOrRedo: try FfiConverterTypeUndoOrRedo.lift(undoOrRedo),
                     span: try FfiConverterTypeCounterSpan.lift(span),
                     diffEvent: try FfiConverterOptionTypeDiffEvent.lift(diffEvent)
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterTypeUndoItemMeta.lower($0) }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterTypeOnPush.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface OnPush: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitOnPush() {
    uniffi_loro_fn_init_callback_vtable_onpush(&UniffiCallbackInterfaceOnPush.vtable)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeOnPush: FfiConverter {
    fileprivate static var handleMap = UniffiHandleMap<OnPush>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = OnPush

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> OnPush {
        return OnPushImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: OnPush) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OnPush {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: OnPush, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOnPush_lift(_ pointer: UnsafeMutableRawPointer) throws -> OnPush {
    return try FfiConverterTypeOnPush.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOnPush_lower(_ value: OnPush) -> UnsafeMutableRawPointer {
    return FfiConverterTypeOnPush.lower(value)
}




public protocol PreCommitCallback : AnyObject {
    
    func onPreCommit(payload: PreCommitCallbackPayload) 
    
}

open class PreCommitCallbackImpl:
    PreCommitCallback {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_precommitcallback(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_precommitcallback(pointer, $0) }
    }

    

    
open func onPreCommit(payload: PreCommitCallbackPayload) {try! rustCall() {
    uniffi_loro_fn_method_precommitcallback_on_pre_commit(self.uniffiClonePointer(),
        FfiConverterTypePreCommitCallbackPayload.lower(payload),$0
    )
}
}
    

}


// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfacePreCommitCallback {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfacePreCommitCallback = UniffiVTableCallbackInterfacePreCommitCallback(
        onPreCommit: { (
            uniffiHandle: UInt64,
            payload: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterTypePreCommitCallback.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.onPreCommit(
                     payload: try FfiConverterTypePreCommitCallbackPayload.lift(payload)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterTypePreCommitCallback.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface PreCommitCallback: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitPreCommitCallback() {
    uniffi_loro_fn_init_callback_vtable_precommitcallback(&UniffiCallbackInterfacePreCommitCallback.vtable)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePreCommitCallback: FfiConverter {
    fileprivate static var handleMap = UniffiHandleMap<PreCommitCallback>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = PreCommitCallback

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> PreCommitCallback {
        return PreCommitCallbackImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: PreCommitCallback) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PreCommitCallback {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: PreCommitCallback, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePreCommitCallback_lift(_ pointer: UnsafeMutableRawPointer) throws -> PreCommitCallback {
    return try FfiConverterTypePreCommitCallback.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePreCommitCallback_lower(_ value: PreCommitCallback) -> UnsafeMutableRawPointer {
    return FfiConverterTypePreCommitCallback.lower(value)
}




public protocol StyleConfigMapProtocol : AnyObject {
    
    func get(key: String)  -> StyleConfig?
    
    func insert(key: String, value: StyleConfig) 
    
}

open class StyleConfigMap:
    StyleConfigMapProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_styleconfigmap(self.pointer, $0) }
    }
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_loro_fn_constructor_styleconfigmap_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_styleconfigmap(pointer, $0) }
    }

    
public static func defaultRichTextConfig() -> StyleConfigMap {
    return try!  FfiConverterTypeStyleConfigMap.lift(try! rustCall() {
    uniffi_loro_fn_constructor_styleconfigmap_default_rich_text_config($0
    )
})
}
    

    
open func get(key: String) -> StyleConfig? {
    return try!  FfiConverterOptionTypeStyleConfig.lift(try! rustCall() {
    uniffi_loro_fn_method_styleconfigmap_get(self.uniffiClonePointer(),
        FfiConverterString.lower(key),$0
    )
})
}
    
open func insert(key: String, value: StyleConfig) {try! rustCall() {
    uniffi_loro_fn_method_styleconfigmap_insert(self.uniffiClonePointer(),
        FfiConverterString.lower(key),
        FfiConverterTypeStyleConfig.lower(value),$0
    )
}
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeStyleConfigMap: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = StyleConfigMap

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> StyleConfigMap {
        return StyleConfigMap(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: StyleConfigMap) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> StyleConfigMap {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: StyleConfigMap, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeStyleConfigMap_lift(_ pointer: UnsafeMutableRawPointer) throws -> StyleConfigMap {
    return try FfiConverterTypeStyleConfigMap.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeStyleConfigMap_lower(_ value: StyleConfigMap) -> UnsafeMutableRawPointer {
    return FfiConverterTypeStyleConfigMap.lower(value)
}




public protocol Subscriber : AnyObject {
    
    func onDiff(diff: DiffEvent) 
    
}

open class SubscriberImpl:
    Subscriber {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_subscriber(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_subscriber(pointer, $0) }
    }

    

    
open func onDiff(diff: DiffEvent) {try! rustCall() {
    uniffi_loro_fn_method_subscriber_on_diff(self.uniffiClonePointer(),
        FfiConverterTypeDiffEvent.lower(diff),$0
    )
}
}
    

}


// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceSubscriber {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceSubscriber = UniffiVTableCallbackInterfaceSubscriber(
        onDiff: { (
            uniffiHandle: UInt64,
            diff: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterTypeSubscriber.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.onDiff(
                     diff: try FfiConverterTypeDiffEvent.lift(diff)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterTypeSubscriber.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface Subscriber: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitSubscriber() {
    uniffi_loro_fn_init_callback_vtable_subscriber(&UniffiCallbackInterfaceSubscriber.vtable)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSubscriber: FfiConverter {
    fileprivate static var handleMap = UniffiHandleMap<Subscriber>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Subscriber

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Subscriber {
        return SubscriberImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Subscriber) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Subscriber {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Subscriber, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSubscriber_lift(_ pointer: UnsafeMutableRawPointer) throws -> Subscriber {
    return try FfiConverterTypeSubscriber.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSubscriber_lower(_ value: Subscriber) -> UnsafeMutableRawPointer {
    return FfiConverterTypeSubscriber.lower(value)
}




/**
 * A handle to a subscription created by GPUI. When dropped, the subscription
 * is cancelled and the callback will no longer be invoked.
 */
public protocol SubscriptionProtocol : AnyObject {
    
    /**
     * Detaches the subscription from this handle. The callback will
     * continue to be invoked until the views or models it has been
     * subscribed to are dropped
     */
    func detach() 
    
    /**
     * Unsubscribes the subscription.
     */
    func unsubscribe() 
    
}

/**
 * A handle to a subscription created by GPUI. When dropped, the subscription
 * is cancelled and the callback will no longer be invoked.
 */
open class Subscription:
    SubscriptionProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_subscription(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_subscription(pointer, $0) }
    }

    

    
    /**
     * Detaches the subscription from this handle. The callback will
     * continue to be invoked until the views or models it has been
     * subscribed to are dropped
     */
open func detach() {try! rustCall() {
    uniffi_loro_fn_method_subscription_detach(self.uniffiClonePointer(),$0
    )
}
}
    
    /**
     * Unsubscribes the subscription.
     */
open func unsubscribe() {try! rustCall() {
    uniffi_loro_fn_method_subscription_unsubscribe(self.uniffiClonePointer(),$0
    )
}
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSubscription: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Subscription

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Subscription {
        return Subscription(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Subscription) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Subscription {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Subscription, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSubscription_lift(_ pointer: UnsafeMutableRawPointer) throws -> Subscription {
    return try FfiConverterTypeSubscription.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSubscription_lower(_ value: Subscription) -> UnsafeMutableRawPointer {
    return FfiConverterTypeSubscription.lower(value)
}




public protocol UndoManagerProtocol : AnyObject {
    
    /**
     * If a local event's origin matches the given prefix, it will not be recorded in the
     * undo stack.
     */
    func addExcludeOriginPrefix(prefix: String) 
    
    /**
     * Whether the undo manager can redo.
     */
    func canRedo()  -> Bool
    
    /**
     * Whether the undo manager can undo.
     */
    func canUndo()  -> Bool
    
    /**
     * Record a new checkpoint.
     */
    func recordNewCheckpoint() throws 
    
    /**
     * Redo the last change made by the peer.
     */
    func redo() throws  -> Bool
    
    /**
     * Set the maximum number of undo steps. The default value is 100.
     */
    func setMaxUndoSteps(size: UInt32) 
    
    /**
     * Set the merge interval in ms. The default value is 0, which means no merge.
     */
    func setMergeInterval(interval: Int64) 
    
    /**
     * Set the listener for pop events.
     * The listener will be called when an undo/redo item is popped from the stack.
     */
    func setOnPop(onPop: OnPop?) 
    
    /**
     * Set the listener for push events.
     * The listener will be called when a new undo/redo item is pushed into the stack.
     */
    func setOnPush(onPush: OnPush?) 
    
    /**
     * Undo the last change made by the peer.
     */
    func undo() throws  -> Bool
    
}

open class UndoManager:
    UndoManagerProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_undomanager(self.pointer, $0) }
    }
    /**
     * Create a new UndoManager.
     */
public convenience init(doc: LoroDoc) {
    let pointer =
        try! rustCall() {
    uniffi_loro_fn_constructor_undomanager_new(
        FfiConverterTypeLoroDoc.lower(doc),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_undomanager(pointer, $0) }
    }

    

    
    /**
     * If a local event's origin matches the given prefix, it will not be recorded in the
     * undo stack.
     */
open func addExcludeOriginPrefix(prefix: String) {try! rustCall() {
    uniffi_loro_fn_method_undomanager_add_exclude_origin_prefix(self.uniffiClonePointer(),
        FfiConverterString.lower(prefix),$0
    )
}
}
    
    /**
     * Whether the undo manager can redo.
     */
open func canRedo() -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_loro_fn_method_undomanager_can_redo(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Whether the undo manager can undo.
     */
open func canUndo() -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_loro_fn_method_undomanager_can_undo(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Record a new checkpoint.
     */
open func recordNewCheckpoint()throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_undomanager_record_new_checkpoint(self.uniffiClonePointer(),$0
    )
}
}
    
    /**
     * Redo the last change made by the peer.
     */
open func redo()throws  -> Bool {
    return try  FfiConverterBool.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_undomanager_redo(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Set the maximum number of undo steps. The default value is 100.
     */
open func setMaxUndoSteps(size: UInt32) {try! rustCall() {
    uniffi_loro_fn_method_undomanager_set_max_undo_steps(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(size),$0
    )
}
}
    
    /**
     * Set the merge interval in ms. The default value is 0, which means no merge.
     */
open func setMergeInterval(interval: Int64) {try! rustCall() {
    uniffi_loro_fn_method_undomanager_set_merge_interval(self.uniffiClonePointer(),
        FfiConverterInt64.lower(interval),$0
    )
}
}
    
    /**
     * Set the listener for pop events.
     * The listener will be called when an undo/redo item is popped from the stack.
     */
open func setOnPop(onPop: OnPop?) {try! rustCall() {
    uniffi_loro_fn_method_undomanager_set_on_pop(self.uniffiClonePointer(),
        FfiConverterOptionTypeOnPop.lower(onPop),$0
    )
}
}
    
    /**
     * Set the listener for push events.
     * The listener will be called when a new undo/redo item is pushed into the stack.
     */
open func setOnPush(onPush: OnPush?) {try! rustCall() {
    uniffi_loro_fn_method_undomanager_set_on_push(self.uniffiClonePointer(),
        FfiConverterOptionTypeOnPush.lower(onPush),$0
    )
}
}
    
    /**
     * Undo the last change made by the peer.
     */
open func undo()throws  -> Bool {
    return try  FfiConverterBool.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_undomanager_undo(self.uniffiClonePointer(),$0
    )
})
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeUndoManager: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = UndoManager

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> UndoManager {
        return UndoManager(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: UndoManager) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UndoManager {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: UndoManager, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUndoManager_lift(_ pointer: UnsafeMutableRawPointer) throws -> UndoManager {
    return try FfiConverterTypeUndoManager.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUndoManager_lower(_ value: UndoManager) -> UnsafeMutableRawPointer {
    return FfiConverterTypeUndoManager.lower(value)
}




public protocol Unsubscriber : AnyObject {
    
    func onUnsubscribe() 
    
}

open class UnsubscriberImpl:
    Unsubscriber {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_unsubscriber(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_unsubscriber(pointer, $0) }
    }

    

    
open func onUnsubscribe() {try! rustCall() {
    uniffi_loro_fn_method_unsubscriber_on_unsubscribe(self.uniffiClonePointer(),$0
    )
}
}
    

}


// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceUnsubscriber {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceUnsubscriber = UniffiVTableCallbackInterfaceUnsubscriber(
        onUnsubscribe: { (
            uniffiHandle: UInt64,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterTypeUnsubscriber.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.onUnsubscribe(
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterTypeUnsubscriber.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface Unsubscriber: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitUnsubscriber() {
    uniffi_loro_fn_init_callback_vtable_unsubscriber(&UniffiCallbackInterfaceUnsubscriber.vtable)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeUnsubscriber: FfiConverter {
    fileprivate static var handleMap = UniffiHandleMap<Unsubscriber>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Unsubscriber

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Unsubscriber {
        return UnsubscriberImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Unsubscriber) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Unsubscriber {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Unsubscriber, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUnsubscriber_lift(_ pointer: UnsafeMutableRawPointer) throws -> Unsubscriber {
    return try FfiConverterTypeUnsubscriber.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUnsubscriber_lower(_ value: Unsubscriber) -> UnsafeMutableRawPointer {
    return FfiConverterTypeUnsubscriber.lower(value)
}




public protocol ValueOrContainerProtocol : AnyObject {
    
    func asContainer()  -> ContainerId?
    
    func asLoroCounter()  -> LoroCounter?
    
    func asLoroList()  -> LoroList?
    
    func asLoroMap()  -> LoroMap?
    
    func asLoroMovableList()  -> LoroMovableList?
    
    func asLoroText()  -> LoroText?
    
    func asLoroTree()  -> LoroTree?
    
    func asLoroUnknown()  -> LoroUnknown?
    
    func asValue()  -> LoroValue?
    
    func containerType()  -> ContainerType?
    
    func isContainer()  -> Bool
    
    func isValue()  -> Bool
    
}

open class ValueOrContainer:
    ValueOrContainerProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_valueorcontainer(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_valueorcontainer(pointer, $0) }
    }

    

    
open func asContainer() -> ContainerId? {
    return try!  FfiConverterOptionTypeContainerID.lift(try! rustCall() {
    uniffi_loro_fn_method_valueorcontainer_as_container(self.uniffiClonePointer(),$0
    )
})
}
    
open func asLoroCounter() -> LoroCounter? {
    return try!  FfiConverterOptionTypeLoroCounter.lift(try! rustCall() {
    uniffi_loro_fn_method_valueorcontainer_as_loro_counter(self.uniffiClonePointer(),$0
    )
})
}
    
open func asLoroList() -> LoroList? {
    return try!  FfiConverterOptionTypeLoroList.lift(try! rustCall() {
    uniffi_loro_fn_method_valueorcontainer_as_loro_list(self.uniffiClonePointer(),$0
    )
})
}
    
open func asLoroMap() -> LoroMap? {
    return try!  FfiConverterOptionTypeLoroMap.lift(try! rustCall() {
    uniffi_loro_fn_method_valueorcontainer_as_loro_map(self.uniffiClonePointer(),$0
    )
})
}
    
open func asLoroMovableList() -> LoroMovableList? {
    return try!  FfiConverterOptionTypeLoroMovableList.lift(try! rustCall() {
    uniffi_loro_fn_method_valueorcontainer_as_loro_movable_list(self.uniffiClonePointer(),$0
    )
})
}
    
open func asLoroText() -> LoroText? {
    return try!  FfiConverterOptionTypeLoroText.lift(try! rustCall() {
    uniffi_loro_fn_method_valueorcontainer_as_loro_text(self.uniffiClonePointer(),$0
    )
})
}
    
open func asLoroTree() -> LoroTree? {
    return try!  FfiConverterOptionTypeLoroTree.lift(try! rustCall() {
    uniffi_loro_fn_method_valueorcontainer_as_loro_tree(self.uniffiClonePointer(),$0
    )
})
}
    
open func asLoroUnknown() -> LoroUnknown? {
    return try!  FfiConverterOptionTypeLoroUnknown.lift(try! rustCall() {
    uniffi_loro_fn_method_valueorcontainer_as_loro_unknown(self.uniffiClonePointer(),$0
    )
})
}
    
open func asValue() -> LoroValue? {
    return try!  FfiConverterOptionTypeLoroValue.lift(try! rustCall() {
    uniffi_loro_fn_method_valueorcontainer_as_value(self.uniffiClonePointer(),$0
    )
})
}
    
open func containerType() -> ContainerType? {
    return try!  FfiConverterOptionTypeContainerType.lift(try! rustCall() {
    uniffi_loro_fn_method_valueorcontainer_container_type(self.uniffiClonePointer(),$0
    )
})
}
    
open func isContainer() -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_loro_fn_method_valueorcontainer_is_container(self.uniffiClonePointer(),$0
    )
})
}
    
open func isValue() -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_loro_fn_method_valueorcontainer_is_value(self.uniffiClonePointer(),$0
    )
})
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeValueOrContainer: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ValueOrContainer

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ValueOrContainer {
        return ValueOrContainer(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ValueOrContainer) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ValueOrContainer {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ValueOrContainer, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeValueOrContainer_lift(_ pointer: UnsafeMutableRawPointer) throws -> ValueOrContainer {
    return try FfiConverterTypeValueOrContainer.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeValueOrContainer_lower(_ value: ValueOrContainer) -> UnsafeMutableRawPointer {
    return FfiConverterTypeValueOrContainer.lower(value)
}




public protocol VersionVectorProtocol : AnyObject {
    
    func diff(rhs: VersionVector)  -> VersionVectorDiff
    
    func encode()  -> Data
    
    func eq(other: VersionVector)  -> Bool
    
    func extendToIncludeVv(other: VersionVector) 
    
    func getLast(peer: UInt64)  -> Int32?
    
    func getMissingSpan(target: VersionVector)  -> [IdSpan]
    
    func includesId(id: Id)  -> Bool
    
    func includesVv(other: VersionVector)  -> Bool
    
    func intersectSpan(target: IdSpan)  -> CounterSpan?
    
    func merge(other: VersionVector) 
    
    func partialCmp(other: VersionVector)  -> Ordering?
    
    func setEnd(id: Id) 
    
    func setLast(id: Id) 
    
}

open class VersionVector:
    VersionVectorProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_versionvector(self.pointer, $0) }
    }
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_loro_fn_constructor_versionvector_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_versionvector(pointer, $0) }
    }

    
public static func decode(bytes: Data)throws  -> VersionVector {
    return try  FfiConverterTypeVersionVector.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_constructor_versionvector_decode(
        FfiConverterData.lower(bytes),$0
    )
})
}
    

    
open func diff(rhs: VersionVector) -> VersionVectorDiff {
    return try!  FfiConverterTypeVersionVectorDiff.lift(try! rustCall() {
    uniffi_loro_fn_method_versionvector_diff(self.uniffiClonePointer(),
        FfiConverterTypeVersionVector.lower(rhs),$0
    )
})
}
    
open func encode() -> Data {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_loro_fn_method_versionvector_encode(self.uniffiClonePointer(),$0
    )
})
}
    
open func eq(other: VersionVector) -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_loro_fn_method_versionvector_eq(self.uniffiClonePointer(),
        FfiConverterTypeVersionVector.lower(other),$0
    )
})
}
    
open func extendToIncludeVv(other: VersionVector) {try! rustCall() {
    uniffi_loro_fn_method_versionvector_extend_to_include_vv(self.uniffiClonePointer(),
        FfiConverterTypeVersionVector.lower(other),$0
    )
}
}
    
open func getLast(peer: UInt64) -> Int32? {
    return try!  FfiConverterOptionInt32.lift(try! rustCall() {
    uniffi_loro_fn_method_versionvector_get_last(self.uniffiClonePointer(),
        FfiConverterUInt64.lower(peer),$0
    )
})
}
    
open func getMissingSpan(target: VersionVector) -> [IdSpan] {
    return try!  FfiConverterSequenceTypeIdSpan.lift(try! rustCall() {
    uniffi_loro_fn_method_versionvector_get_missing_span(self.uniffiClonePointer(),
        FfiConverterTypeVersionVector.lower(target),$0
    )
})
}
    
open func includesId(id: Id) -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_loro_fn_method_versionvector_includes_id(self.uniffiClonePointer(),
        FfiConverterTypeID.lower(id),$0
    )
})
}
    
open func includesVv(other: VersionVector) -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_loro_fn_method_versionvector_includes_vv(self.uniffiClonePointer(),
        FfiConverterTypeVersionVector.lower(other),$0
    )
})
}
    
open func intersectSpan(target: IdSpan) -> CounterSpan? {
    return try!  FfiConverterOptionTypeCounterSpan.lift(try! rustCall() {
    uniffi_loro_fn_method_versionvector_intersect_span(self.uniffiClonePointer(),
        FfiConverterTypeIdSpan.lower(target),$0
    )
})
}
    
open func merge(other: VersionVector) {try! rustCall() {
    uniffi_loro_fn_method_versionvector_merge(self.uniffiClonePointer(),
        FfiConverterTypeVersionVector.lower(other),$0
    )
}
}
    
open func partialCmp(other: VersionVector) -> Ordering? {
    return try!  FfiConverterOptionTypeOrdering.lift(try! rustCall() {
    uniffi_loro_fn_method_versionvector_partial_cmp(self.uniffiClonePointer(),
        FfiConverterTypeVersionVector.lower(other),$0
    )
})
}
    
open func setEnd(id: Id) {try! rustCall() {
    uniffi_loro_fn_method_versionvector_set_end(self.uniffiClonePointer(),
        FfiConverterTypeID.lower(id),$0
    )
}
}
    
open func setLast(id: Id) {try! rustCall() {
    uniffi_loro_fn_method_versionvector_set_last(self.uniffiClonePointer(),
        FfiConverterTypeID.lower(id),$0
    )
}
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeVersionVector: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = VersionVector

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> VersionVector {
        return VersionVector(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: VersionVector) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VersionVector {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: VersionVector, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeVersionVector_lift(_ pointer: UnsafeMutableRawPointer) throws -> VersionVector {
    return try FfiConverterTypeVersionVector.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeVersionVector_lower(_ value: VersionVector) -> UnsafeMutableRawPointer {
    return FfiConverterTypeVersionVector.lower(value)
}


public struct AbsolutePosition {
    public var pos: UInt32
    public var side: Side

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(pos: UInt32, side: Side) {
        self.pos = pos
        self.side = side
    }
}


extension AbsolutePosition: Sendable {} 
extension AbsolutePosition: Equatable, Hashable {
    public static func ==(lhs: AbsolutePosition, rhs: AbsolutePosition) -> Bool {
        if lhs.pos != rhs.pos {
            return false
        }
        if lhs.side != rhs.side {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(pos)
        hasher.combine(side)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAbsolutePosition: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AbsolutePosition {
        return
            try AbsolutePosition(
                pos: FfiConverterUInt32.read(from: &buf), 
                side: FfiConverterTypeSide.read(from: &buf)
        )
    }

    public static func write(_ value: AbsolutePosition, into buf: inout [UInt8]) {
        FfiConverterUInt32.write(value.pos, into: &buf)
        FfiConverterTypeSide.write(value.side, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAbsolutePosition_lift(_ buf: RustBuffer) throws -> AbsolutePosition {
    return try FfiConverterTypeAbsolutePosition.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAbsolutePosition_lower(_ value: AbsolutePosition) -> RustBuffer {
    return FfiConverterTypeAbsolutePosition.lower(value)
}


public struct AwarenessPeerUpdate {
    public var updated: [UInt64]
    public var added: [UInt64]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(updated: [UInt64], added: [UInt64]) {
        self.updated = updated
        self.added = added
    }
}


extension AwarenessPeerUpdate: Sendable {} 
extension AwarenessPeerUpdate: Equatable, Hashable {
    public static func ==(lhs: AwarenessPeerUpdate, rhs: AwarenessPeerUpdate) -> Bool {
        if lhs.updated != rhs.updated {
            return false
        }
        if lhs.added != rhs.added {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(updated)
        hasher.combine(added)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAwarenessPeerUpdate: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AwarenessPeerUpdate {
        return
            try AwarenessPeerUpdate(
                updated: FfiConverterSequenceUInt64.read(from: &buf), 
                added: FfiConverterSequenceUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: AwarenessPeerUpdate, into buf: inout [UInt8]) {
        FfiConverterSequenceUInt64.write(value.updated, into: &buf)
        FfiConverterSequenceUInt64.write(value.added, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAwarenessPeerUpdate_lift(_ buf: RustBuffer) throws -> AwarenessPeerUpdate {
    return try FfiConverterTypeAwarenessPeerUpdate.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAwarenessPeerUpdate_lower(_ value: AwarenessPeerUpdate) -> RustBuffer {
    return FfiConverterTypeAwarenessPeerUpdate.lower(value)
}


public struct ChangeMeta {
    /**
     * Lamport timestamp of the Change
     */
    public var lamport: UInt32
    /**
     * The first Op id of the Change
     */
    public var id: Id
    /**
     * [Unix time](https://en.wikipedia.org/wiki/Unix_time)
     * It is the number of seconds that have elapsed since 00:00:00 UTC on 1 January 1970.
     */
    public var timestamp: Int64
    /**
     * The commit message of the change
     */
    public var message: String?
    /**
     * The dependencies of the first op of the change
     */
    public var deps: Frontiers
    /**
     * The total op num inside this change
     */
    public var len: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Lamport timestamp of the Change
         */lamport: UInt32, 
        /**
         * The first Op id of the Change
         */id: Id, 
        /**
         * [Unix time](https://en.wikipedia.org/wiki/Unix_time)
         * It is the number of seconds that have elapsed since 00:00:00 UTC on 1 January 1970.
         */timestamp: Int64, 
        /**
         * The commit message of the change
         */message: String?, 
        /**
         * The dependencies of the first op of the change
         */deps: Frontiers, 
        /**
         * The total op num inside this change
         */len: UInt32) {
        self.lamport = lamport
        self.id = id
        self.timestamp = timestamp
        self.message = message
        self.deps = deps
        self.len = len
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeChangeMeta: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ChangeMeta {
        return
            try ChangeMeta(
                lamport: FfiConverterUInt32.read(from: &buf), 
                id: FfiConverterTypeID.read(from: &buf), 
                timestamp: FfiConverterInt64.read(from: &buf), 
                message: FfiConverterOptionString.read(from: &buf), 
                deps: FfiConverterTypeFrontiers.read(from: &buf), 
                len: FfiConverterUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: ChangeMeta, into buf: inout [UInt8]) {
        FfiConverterUInt32.write(value.lamport, into: &buf)
        FfiConverterTypeID.write(value.id, into: &buf)
        FfiConverterInt64.write(value.timestamp, into: &buf)
        FfiConverterOptionString.write(value.message, into: &buf)
        FfiConverterTypeFrontiers.write(value.deps, into: &buf)
        FfiConverterUInt32.write(value.len, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeChangeMeta_lift(_ buf: RustBuffer) throws -> ChangeMeta {
    return try FfiConverterTypeChangeMeta.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeChangeMeta_lower(_ value: ChangeMeta) -> RustBuffer {
    return FfiConverterTypeChangeMeta.lower(value)
}


public struct CommitOptions {
    public var origin: String?
    public var immediateRenew: Bool
    public var timestamp: Int64?
    public var commitMsg: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(origin: String?, immediateRenew: Bool, timestamp: Int64?, commitMsg: String?) {
        self.origin = origin
        self.immediateRenew = immediateRenew
        self.timestamp = timestamp
        self.commitMsg = commitMsg
    }
}


extension CommitOptions: Sendable {} 
extension CommitOptions: Equatable, Hashable {
    public static func ==(lhs: CommitOptions, rhs: CommitOptions) -> Bool {
        if lhs.origin != rhs.origin {
            return false
        }
        if lhs.immediateRenew != rhs.immediateRenew {
            return false
        }
        if lhs.timestamp != rhs.timestamp {
            return false
        }
        if lhs.commitMsg != rhs.commitMsg {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(origin)
        hasher.combine(immediateRenew)
        hasher.combine(timestamp)
        hasher.combine(commitMsg)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCommitOptions: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CommitOptions {
        return
            try CommitOptions(
                origin: FfiConverterOptionString.read(from: &buf), 
                immediateRenew: FfiConverterBool.read(from: &buf), 
                timestamp: FfiConverterOptionInt64.read(from: &buf), 
                commitMsg: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: CommitOptions, into buf: inout [UInt8]) {
        FfiConverterOptionString.write(value.origin, into: &buf)
        FfiConverterBool.write(value.immediateRenew, into: &buf)
        FfiConverterOptionInt64.write(value.timestamp, into: &buf)
        FfiConverterOptionString.write(value.commitMsg, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCommitOptions_lift(_ buf: RustBuffer) throws -> CommitOptions {
    return try FfiConverterTypeCommitOptions.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCommitOptions_lower(_ value: CommitOptions) -> RustBuffer {
    return FfiConverterTypeCommitOptions.lower(value)
}


/**
 * A diff of a container.
 */
public struct ContainerDiff {
    /**
     * The target container id of the diff.
     */
    public var target: ContainerId
    /**
     * The path of the diff.
     */
    public var path: [PathItem]
    /**
     * Whether the diff is from unknown container.
     */
    public var isUnknown: Bool
    /**
     * The diff
     */
    public var diff: Diff

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The target container id of the diff.
         */target: ContainerId, 
        /**
         * The path of the diff.
         */path: [PathItem], 
        /**
         * Whether the diff is from unknown container.
         */isUnknown: Bool, 
        /**
         * The diff
         */diff: Diff) {
        self.target = target
        self.path = path
        self.isUnknown = isUnknown
        self.diff = diff
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeContainerDiff: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ContainerDiff {
        return
            try ContainerDiff(
                target: FfiConverterTypeContainerID.read(from: &buf), 
                path: FfiConverterSequenceTypePathItem.read(from: &buf), 
                isUnknown: FfiConverterBool.read(from: &buf), 
                diff: FfiConverterTypeDiff.read(from: &buf)
        )
    }

    public static func write(_ value: ContainerDiff, into buf: inout [UInt8]) {
        FfiConverterTypeContainerID.write(value.target, into: &buf)
        FfiConverterSequenceTypePathItem.write(value.path, into: &buf)
        FfiConverterBool.write(value.isUnknown, into: &buf)
        FfiConverterTypeDiff.write(value.diff, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeContainerDiff_lift(_ buf: RustBuffer) throws -> ContainerDiff {
    return try FfiConverterTypeContainerDiff.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeContainerDiff_lower(_ value: ContainerDiff) -> RustBuffer {
    return FfiConverterTypeContainerDiff.lower(value)
}


public struct ContainerIdAndDiff {
    public var cid: ContainerId
    public var diff: Diff

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(cid: ContainerId, diff: Diff) {
        self.cid = cid
        self.diff = diff
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeContainerIDAndDiff: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ContainerIdAndDiff {
        return
            try ContainerIdAndDiff(
                cid: FfiConverterTypeContainerID.read(from: &buf), 
                diff: FfiConverterTypeDiff.read(from: &buf)
        )
    }

    public static func write(_ value: ContainerIdAndDiff, into buf: inout [UInt8]) {
        FfiConverterTypeContainerID.write(value.cid, into: &buf)
        FfiConverterTypeDiff.write(value.diff, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeContainerIDAndDiff_lift(_ buf: RustBuffer) throws -> ContainerIdAndDiff {
    return try FfiConverterTypeContainerIDAndDiff.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeContainerIDAndDiff_lower(_ value: ContainerIdAndDiff) -> RustBuffer {
    return FfiConverterTypeContainerIDAndDiff.lower(value)
}


public struct ContainerPath {
    public var id: ContainerId
    public var path: Index

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: ContainerId, path: Index) {
        self.id = id
        self.path = path
    }
}


extension ContainerPath: Sendable {} 
extension ContainerPath: Equatable, Hashable {
    public static func ==(lhs: ContainerPath, rhs: ContainerPath) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.path != rhs.path {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(path)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeContainerPath: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ContainerPath {
        return
            try ContainerPath(
                id: FfiConverterTypeContainerID.read(from: &buf), 
                path: FfiConverterTypeIndex.read(from: &buf)
        )
    }

    public static func write(_ value: ContainerPath, into buf: inout [UInt8]) {
        FfiConverterTypeContainerID.write(value.id, into: &buf)
        FfiConverterTypeIndex.write(value.path, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeContainerPath_lift(_ buf: RustBuffer) throws -> ContainerPath {
    return try FfiConverterTypeContainerPath.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeContainerPath_lower(_ value: ContainerPath) -> RustBuffer {
    return FfiConverterTypeContainerPath.lower(value)
}


public struct CounterSpan {
    public var start: Int32
    public var end: Int32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(start: Int32, end: Int32) {
        self.start = start
        self.end = end
    }
}


extension CounterSpan: Sendable {} 
extension CounterSpan: Equatable, Hashable {
    public static func ==(lhs: CounterSpan, rhs: CounterSpan) -> Bool {
        if lhs.start != rhs.start {
            return false
        }
        if lhs.end != rhs.end {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(start)
        hasher.combine(end)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCounterSpan: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CounterSpan {
        return
            try CounterSpan(
                start: FfiConverterInt32.read(from: &buf), 
                end: FfiConverterInt32.read(from: &buf)
        )
    }

    public static func write(_ value: CounterSpan, into buf: inout [UInt8]) {
        FfiConverterInt32.write(value.start, into: &buf)
        FfiConverterInt32.write(value.end, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCounterSpan_lift(_ buf: RustBuffer) throws -> CounterSpan {
    return try FfiConverterTypeCounterSpan.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCounterSpan_lower(_ value: CounterSpan) -> RustBuffer {
    return FfiConverterTypeCounterSpan.lower(value)
}


public struct CursorWithPos {
    public var cursor: Cursor
    public var pos: AbsolutePosition

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(cursor: Cursor, pos: AbsolutePosition) {
        self.cursor = cursor
        self.pos = pos
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCursorWithPos: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CursorWithPos {
        return
            try CursorWithPos(
                cursor: FfiConverterTypeCursor.read(from: &buf), 
                pos: FfiConverterTypeAbsolutePosition.read(from: &buf)
        )
    }

    public static func write(_ value: CursorWithPos, into buf: inout [UInt8]) {
        FfiConverterTypeCursor.write(value.cursor, into: &buf)
        FfiConverterTypeAbsolutePosition.write(value.pos, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCursorWithPos_lift(_ buf: RustBuffer) throws -> CursorWithPos {
    return try FfiConverterTypeCursorWithPos.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCursorWithPos_lower(_ value: CursorWithPos) -> RustBuffer {
    return FfiConverterTypeCursorWithPos.lower(value)
}


public struct DiffEvent {
    /**
     * How the event is triggered.
     */
    public var triggeredBy: EventTriggerKind
    /**
     * The origin of the event.
     */
    public var origin: String
    /**
     * The current receiver of the event.
     */
    public var currentTarget: ContainerId?
    /**
     * The diffs of the event.
     */
    public var events: [ContainerDiff]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * How the event is triggered.
         */triggeredBy: EventTriggerKind, 
        /**
         * The origin of the event.
         */origin: String, 
        /**
         * The current receiver of the event.
         */currentTarget: ContainerId?, 
        /**
         * The diffs of the event.
         */events: [ContainerDiff]) {
        self.triggeredBy = triggeredBy
        self.origin = origin
        self.currentTarget = currentTarget
        self.events = events
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeDiffEvent: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DiffEvent {
        return
            try DiffEvent(
                triggeredBy: FfiConverterTypeEventTriggerKind.read(from: &buf), 
                origin: FfiConverterString.read(from: &buf), 
                currentTarget: FfiConverterOptionTypeContainerID.read(from: &buf), 
                events: FfiConverterSequenceTypeContainerDiff.read(from: &buf)
        )
    }

    public static func write(_ value: DiffEvent, into buf: inout [UInt8]) {
        FfiConverterTypeEventTriggerKind.write(value.triggeredBy, into: &buf)
        FfiConverterString.write(value.origin, into: &buf)
        FfiConverterOptionTypeContainerID.write(value.currentTarget, into: &buf)
        FfiConverterSequenceTypeContainerDiff.write(value.events, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDiffEvent_lift(_ buf: RustBuffer) throws -> DiffEvent {
    return try FfiConverterTypeDiffEvent.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDiffEvent_lower(_ value: DiffEvent) -> RustBuffer {
    return FfiConverterTypeDiffEvent.lower(value)
}


public struct EphemeralStoreEvent {
    public var by: EphemeralEventTrigger
    public var added: [String]
    public var removed: [String]
    public var updated: [String]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(by: EphemeralEventTrigger, added: [String], removed: [String], updated: [String]) {
        self.by = by
        self.added = added
        self.removed = removed
        self.updated = updated
    }
}


extension EphemeralStoreEvent: Sendable {} 
extension EphemeralStoreEvent: Equatable, Hashable {
    public static func ==(lhs: EphemeralStoreEvent, rhs: EphemeralStoreEvent) -> Bool {
        if lhs.by != rhs.by {
            return false
        }
        if lhs.added != rhs.added {
            return false
        }
        if lhs.removed != rhs.removed {
            return false
        }
        if lhs.updated != rhs.updated {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(by)
        hasher.combine(added)
        hasher.combine(removed)
        hasher.combine(updated)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeEphemeralStoreEvent: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> EphemeralStoreEvent {
        return
            try EphemeralStoreEvent(
                by: FfiConverterTypeEphemeralEventTrigger.read(from: &buf), 
                added: FfiConverterSequenceString.read(from: &buf), 
                removed: FfiConverterSequenceString.read(from: &buf), 
                updated: FfiConverterSequenceString.read(from: &buf)
        )
    }

    public static func write(_ value: EphemeralStoreEvent, into buf: inout [UInt8]) {
        FfiConverterTypeEphemeralEventTrigger.write(value.by, into: &buf)
        FfiConverterSequenceString.write(value.added, into: &buf)
        FfiConverterSequenceString.write(value.removed, into: &buf)
        FfiConverterSequenceString.write(value.updated, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEphemeralStoreEvent_lift(_ buf: RustBuffer) throws -> EphemeralStoreEvent {
    return try FfiConverterTypeEphemeralStoreEvent.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEphemeralStoreEvent_lower(_ value: EphemeralStoreEvent) -> RustBuffer {
    return FfiConverterTypeEphemeralStoreEvent.lower(value)
}


public struct FirstCommitFromPeerPayload {
    public var peer: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(peer: UInt64) {
        self.peer = peer
    }
}


extension FirstCommitFromPeerPayload: Sendable {} 
extension FirstCommitFromPeerPayload: Equatable, Hashable {
    public static func ==(lhs: FirstCommitFromPeerPayload, rhs: FirstCommitFromPeerPayload) -> Bool {
        if lhs.peer != rhs.peer {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(peer)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFirstCommitFromPeerPayload: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FirstCommitFromPeerPayload {
        return
            try FirstCommitFromPeerPayload(
                peer: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: FirstCommitFromPeerPayload, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.peer, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFirstCommitFromPeerPayload_lift(_ buf: RustBuffer) throws -> FirstCommitFromPeerPayload {
    return try FfiConverterTypeFirstCommitFromPeerPayload.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFirstCommitFromPeerPayload_lower(_ value: FirstCommitFromPeerPayload) -> RustBuffer {
    return FfiConverterTypeFirstCommitFromPeerPayload.lower(value)
}


public struct FrontiersOrId {
    public var frontiers: Frontiers?
    public var id: Id?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(frontiers: Frontiers?, id: Id?) {
        self.frontiers = frontiers
        self.id = id
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFrontiersOrID: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FrontiersOrId {
        return
            try FrontiersOrId(
                frontiers: FfiConverterOptionTypeFrontiers.read(from: &buf), 
                id: FfiConverterOptionTypeID.read(from: &buf)
        )
    }

    public static func write(_ value: FrontiersOrId, into buf: inout [UInt8]) {
        FfiConverterOptionTypeFrontiers.write(value.frontiers, into: &buf)
        FfiConverterOptionTypeID.write(value.id, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFrontiersOrID_lift(_ buf: RustBuffer) throws -> FrontiersOrId {
    return try FfiConverterTypeFrontiersOrID.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFrontiersOrID_lower(_ value: FrontiersOrId) -> RustBuffer {
    return FfiConverterTypeFrontiersOrID.lower(value)
}


public struct Id {
    public var peer: UInt64
    public var counter: Int32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(peer: UInt64, counter: Int32) {
        self.peer = peer
        self.counter = counter
    }
}


extension Id: Sendable {} 
extension Id: Equatable, Hashable {
    public static func ==(lhs: Id, rhs: Id) -> Bool {
        if lhs.peer != rhs.peer {
            return false
        }
        if lhs.counter != rhs.counter {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(peer)
        hasher.combine(counter)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeID: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Id {
        return
            try Id(
                peer: FfiConverterUInt64.read(from: &buf), 
                counter: FfiConverterInt32.read(from: &buf)
        )
    }

    public static func write(_ value: Id, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.peer, into: &buf)
        FfiConverterInt32.write(value.counter, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeID_lift(_ buf: RustBuffer) throws -> Id {
    return try FfiConverterTypeID.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeID_lower(_ value: Id) -> RustBuffer {
    return FfiConverterTypeID.lower(value)
}


public struct IdLp {
    public var lamport: UInt32
    public var peer: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(lamport: UInt32, peer: UInt64) {
        self.lamport = lamport
        self.peer = peer
    }
}


extension IdLp: Sendable {} 
extension IdLp: Equatable, Hashable {
    public static func ==(lhs: IdLp, rhs: IdLp) -> Bool {
        if lhs.lamport != rhs.lamport {
            return false
        }
        if lhs.peer != rhs.peer {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(lamport)
        hasher.combine(peer)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeIdLp: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IdLp {
        return
            try IdLp(
                lamport: FfiConverterUInt32.read(from: &buf), 
                peer: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: IdLp, into buf: inout [UInt8]) {
        FfiConverterUInt32.write(value.lamport, into: &buf)
        FfiConverterUInt64.write(value.peer, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeIdLp_lift(_ buf: RustBuffer) throws -> IdLp {
    return try FfiConverterTypeIdLp.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeIdLp_lower(_ value: IdLp) -> RustBuffer {
    return FfiConverterTypeIdLp.lower(value)
}


public struct IdSpan {
    public var peer: UInt64
    public var counter: CounterSpan

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(peer: UInt64, counter: CounterSpan) {
        self.peer = peer
        self.counter = counter
    }
}


extension IdSpan: Sendable {} 
extension IdSpan: Equatable, Hashable {
    public static func ==(lhs: IdSpan, rhs: IdSpan) -> Bool {
        if lhs.peer != rhs.peer {
            return false
        }
        if lhs.counter != rhs.counter {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(peer)
        hasher.combine(counter)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeIdSpan: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IdSpan {
        return
            try IdSpan(
                peer: FfiConverterUInt64.read(from: &buf), 
                counter: FfiConverterTypeCounterSpan.read(from: &buf)
        )
    }

    public static func write(_ value: IdSpan, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.peer, into: &buf)
        FfiConverterTypeCounterSpan.write(value.counter, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeIdSpan_lift(_ buf: RustBuffer) throws -> IdSpan {
    return try FfiConverterTypeIdSpan.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeIdSpan_lower(_ value: IdSpan) -> RustBuffer {
    return FfiConverterTypeIdSpan.lower(value)
}


public struct ImportBlobMetadata {
    /**
     * The partial start version vector.
     *
     * Import blob includes all the ops from `partial_start_vv` to `partial_end_vv`.
     * However, it does not constitute a complete version vector, as it only contains counters
     * from peers included within the import blob.
     */
    public var partialStartVv: VersionVector
    /**
     * The partial end version vector.
     *
     * Import blob includes all the ops from `partial_start_vv` to `partial_end_vv`.
     * However, it does not constitute a complete version vector, as it only contains counters
     * from peers included within the import blob.
     */
    public var partialEndVv: VersionVector
    public var startTimestamp: Int64
    public var startFrontiers: Frontiers
    public var endTimestamp: Int64
    public var changeNum: UInt32
    public var mode: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The partial start version vector.
         *
         * Import blob includes all the ops from `partial_start_vv` to `partial_end_vv`.
         * However, it does not constitute a complete version vector, as it only contains counters
         * from peers included within the import blob.
         */partialStartVv: VersionVector, 
        /**
         * The partial end version vector.
         *
         * Import blob includes all the ops from `partial_start_vv` to `partial_end_vv`.
         * However, it does not constitute a complete version vector, as it only contains counters
         * from peers included within the import blob.
         */partialEndVv: VersionVector, startTimestamp: Int64, startFrontiers: Frontiers, endTimestamp: Int64, changeNum: UInt32, mode: String) {
        self.partialStartVv = partialStartVv
        self.partialEndVv = partialEndVv
        self.startTimestamp = startTimestamp
        self.startFrontiers = startFrontiers
        self.endTimestamp = endTimestamp
        self.changeNum = changeNum
        self.mode = mode
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeImportBlobMetadata: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ImportBlobMetadata {
        return
            try ImportBlobMetadata(
                partialStartVv: FfiConverterTypeVersionVector.read(from: &buf), 
                partialEndVv: FfiConverterTypeVersionVector.read(from: &buf), 
                startTimestamp: FfiConverterInt64.read(from: &buf), 
                startFrontiers: FfiConverterTypeFrontiers.read(from: &buf), 
                endTimestamp: FfiConverterInt64.read(from: &buf), 
                changeNum: FfiConverterUInt32.read(from: &buf), 
                mode: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: ImportBlobMetadata, into buf: inout [UInt8]) {
        FfiConverterTypeVersionVector.write(value.partialStartVv, into: &buf)
        FfiConverterTypeVersionVector.write(value.partialEndVv, into: &buf)
        FfiConverterInt64.write(value.startTimestamp, into: &buf)
        FfiConverterTypeFrontiers.write(value.startFrontiers, into: &buf)
        FfiConverterInt64.write(value.endTimestamp, into: &buf)
        FfiConverterUInt32.write(value.changeNum, into: &buf)
        FfiConverterString.write(value.mode, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeImportBlobMetadata_lift(_ buf: RustBuffer) throws -> ImportBlobMetadata {
    return try FfiConverterTypeImportBlobMetadata.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeImportBlobMetadata_lower(_ value: ImportBlobMetadata) -> RustBuffer {
    return FfiConverterTypeImportBlobMetadata.lower(value)
}


public struct ImportStatus {
    public var success: [UInt64: CounterSpan]
    public var pending: [UInt64: CounterSpan]?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(success: [UInt64: CounterSpan], pending: [UInt64: CounterSpan]?) {
        self.success = success
        self.pending = pending
    }
}


extension ImportStatus: Sendable {} 
extension ImportStatus: Equatable, Hashable {
    public static func ==(lhs: ImportStatus, rhs: ImportStatus) -> Bool {
        if lhs.success != rhs.success {
            return false
        }
        if lhs.pending != rhs.pending {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(success)
        hasher.combine(pending)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeImportStatus: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ImportStatus {
        return
            try ImportStatus(
                success: FfiConverterDictionaryUInt64TypeCounterSpan.read(from: &buf), 
                pending: FfiConverterOptionDictionaryUInt64TypeCounterSpan.read(from: &buf)
        )
    }

    public static func write(_ value: ImportStatus, into buf: inout [UInt8]) {
        FfiConverterDictionaryUInt64TypeCounterSpan.write(value.success, into: &buf)
        FfiConverterOptionDictionaryUInt64TypeCounterSpan.write(value.pending, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeImportStatus_lift(_ buf: RustBuffer) throws -> ImportStatus {
    return try FfiConverterTypeImportStatus.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeImportStatus_lower(_ value: ImportStatus) -> RustBuffer {
    return FfiConverterTypeImportStatus.lower(value)
}


public struct MapDelta {
    public var updated: [String: ValueOrContainer?]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(updated: [String: ValueOrContainer?]) {
        self.updated = updated
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMapDelta: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MapDelta {
        return
            try MapDelta(
                updated: FfiConverterDictionaryStringOptionTypeValueOrContainer.read(from: &buf)
        )
    }

    public static func write(_ value: MapDelta, into buf: inout [UInt8]) {
        FfiConverterDictionaryStringOptionTypeValueOrContainer.write(value.updated, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMapDelta_lift(_ buf: RustBuffer) throws -> MapDelta {
    return try FfiConverterTypeMapDelta.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMapDelta_lower(_ value: MapDelta) -> RustBuffer {
    return FfiConverterTypeMapDelta.lower(value)
}


public struct PathItem {
    public var container: ContainerId
    public var index: Index

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(container: ContainerId, index: Index) {
        self.container = container
        self.index = index
    }
}


extension PathItem: Sendable {} 
extension PathItem: Equatable, Hashable {
    public static func ==(lhs: PathItem, rhs: PathItem) -> Bool {
        if lhs.container != rhs.container {
            return false
        }
        if lhs.index != rhs.index {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(container)
        hasher.combine(index)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePathItem: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PathItem {
        return
            try PathItem(
                container: FfiConverterTypeContainerID.read(from: &buf), 
                index: FfiConverterTypeIndex.read(from: &buf)
        )
    }

    public static func write(_ value: PathItem, into buf: inout [UInt8]) {
        FfiConverterTypeContainerID.write(value.container, into: &buf)
        FfiConverterTypeIndex.write(value.index, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePathItem_lift(_ buf: RustBuffer) throws -> PathItem {
    return try FfiConverterTypePathItem.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePathItem_lower(_ value: PathItem) -> RustBuffer {
    return FfiConverterTypePathItem.lower(value)
}


public struct PeerInfo {
    public var state: LoroValue
    public var counter: Int32
    public var timestamp: Int64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(state: LoroValue, counter: Int32, timestamp: Int64) {
        self.state = state
        self.counter = counter
        self.timestamp = timestamp
    }
}


extension PeerInfo: Sendable {} 
extension PeerInfo: Equatable, Hashable {
    public static func ==(lhs: PeerInfo, rhs: PeerInfo) -> Bool {
        if lhs.state != rhs.state {
            return false
        }
        if lhs.counter != rhs.counter {
            return false
        }
        if lhs.timestamp != rhs.timestamp {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(state)
        hasher.combine(counter)
        hasher.combine(timestamp)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePeerInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PeerInfo {
        return
            try PeerInfo(
                state: FfiConverterTypeLoroValue.read(from: &buf), 
                counter: FfiConverterInt32.read(from: &buf), 
                timestamp: FfiConverterInt64.read(from: &buf)
        )
    }

    public static func write(_ value: PeerInfo, into buf: inout [UInt8]) {
        FfiConverterTypeLoroValue.write(value.state, into: &buf)
        FfiConverterInt32.write(value.counter, into: &buf)
        FfiConverterInt64.write(value.timestamp, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePeerInfo_lift(_ buf: RustBuffer) throws -> PeerInfo {
    return try FfiConverterTypePeerInfo.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePeerInfo_lower(_ value: PeerInfo) -> RustBuffer {
    return FfiConverterTypePeerInfo.lower(value)
}


public struct PosQueryResult {
    public var update: Cursor?
    public var current: AbsolutePosition

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(update: Cursor?, current: AbsolutePosition) {
        self.update = update
        self.current = current
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePosQueryResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PosQueryResult {
        return
            try PosQueryResult(
                update: FfiConverterOptionTypeCursor.read(from: &buf), 
                current: FfiConverterTypeAbsolutePosition.read(from: &buf)
        )
    }

    public static func write(_ value: PosQueryResult, into buf: inout [UInt8]) {
        FfiConverterOptionTypeCursor.write(value.update, into: &buf)
        FfiConverterTypeAbsolutePosition.write(value.current, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePosQueryResult_lift(_ buf: RustBuffer) throws -> PosQueryResult {
    return try FfiConverterTypePosQueryResult.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePosQueryResult_lower(_ value: PosQueryResult) -> RustBuffer {
    return FfiConverterTypePosQueryResult.lower(value)
}


public struct PreCommitCallbackPayload {
    public var changeMeta: ChangeMeta
    public var origin: String
    public var modifier: ChangeModifier

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(changeMeta: ChangeMeta, origin: String, modifier: ChangeModifier) {
        self.changeMeta = changeMeta
        self.origin = origin
        self.modifier = modifier
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePreCommitCallbackPayload: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PreCommitCallbackPayload {
        return
            try PreCommitCallbackPayload(
                changeMeta: FfiConverterTypeChangeMeta.read(from: &buf), 
                origin: FfiConverterString.read(from: &buf), 
                modifier: FfiConverterTypeChangeModifier.read(from: &buf)
        )
    }

    public static func write(_ value: PreCommitCallbackPayload, into buf: inout [UInt8]) {
        FfiConverterTypeChangeMeta.write(value.changeMeta, into: &buf)
        FfiConverterString.write(value.origin, into: &buf)
        FfiConverterTypeChangeModifier.write(value.modifier, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePreCommitCallbackPayload_lift(_ buf: RustBuffer) throws -> PreCommitCallbackPayload {
    return try FfiConverterTypePreCommitCallbackPayload.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePreCommitCallbackPayload_lower(_ value: PreCommitCallbackPayload) -> RustBuffer {
    return FfiConverterTypePreCommitCallbackPayload.lower(value)
}


public struct StyleConfig {
    public var expand: ExpandType

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(expand: ExpandType) {
        self.expand = expand
    }
}


extension StyleConfig: Sendable {} 
extension StyleConfig: Equatable, Hashable {
    public static func ==(lhs: StyleConfig, rhs: StyleConfig) -> Bool {
        if lhs.expand != rhs.expand {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(expand)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeStyleConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> StyleConfig {
        return
            try StyleConfig(
                expand: FfiConverterTypeExpandType.read(from: &buf)
        )
    }

    public static func write(_ value: StyleConfig, into buf: inout [UInt8]) {
        FfiConverterTypeExpandType.write(value.expand, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeStyleConfig_lift(_ buf: RustBuffer) throws -> StyleConfig {
    return try FfiConverterTypeStyleConfig.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeStyleConfig_lower(_ value: StyleConfig) -> RustBuffer {
    return FfiConverterTypeStyleConfig.lower(value)
}


public struct TreeDiff {
    public var diff: [TreeDiffItem]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(diff: [TreeDiffItem]) {
        self.diff = diff
    }
}


extension TreeDiff: Sendable {} 
extension TreeDiff: Equatable, Hashable {
    public static func ==(lhs: TreeDiff, rhs: TreeDiff) -> Bool {
        if lhs.diff != rhs.diff {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(diff)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTreeDiff: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TreeDiff {
        return
            try TreeDiff(
                diff: FfiConverterSequenceTypeTreeDiffItem.read(from: &buf)
        )
    }

    public static func write(_ value: TreeDiff, into buf: inout [UInt8]) {
        FfiConverterSequenceTypeTreeDiffItem.write(value.diff, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTreeDiff_lift(_ buf: RustBuffer) throws -> TreeDiff {
    return try FfiConverterTypeTreeDiff.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTreeDiff_lower(_ value: TreeDiff) -> RustBuffer {
    return FfiConverterTypeTreeDiff.lower(value)
}


public struct TreeDiffItem {
    public var target: TreeId
    public var action: TreeExternalDiff

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(target: TreeId, action: TreeExternalDiff) {
        self.target = target
        self.action = action
    }
}


extension TreeDiffItem: Sendable {} 
extension TreeDiffItem: Equatable, Hashable {
    public static func ==(lhs: TreeDiffItem, rhs: TreeDiffItem) -> Bool {
        if lhs.target != rhs.target {
            return false
        }
        if lhs.action != rhs.action {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(target)
        hasher.combine(action)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTreeDiffItem: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TreeDiffItem {
        return
            try TreeDiffItem(
                target: FfiConverterTypeTreeID.read(from: &buf), 
                action: FfiConverterTypeTreeExternalDiff.read(from: &buf)
        )
    }

    public static func write(_ value: TreeDiffItem, into buf: inout [UInt8]) {
        FfiConverterTypeTreeID.write(value.target, into: &buf)
        FfiConverterTypeTreeExternalDiff.write(value.action, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTreeDiffItem_lift(_ buf: RustBuffer) throws -> TreeDiffItem {
    return try FfiConverterTypeTreeDiffItem.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTreeDiffItem_lower(_ value: TreeDiffItem) -> RustBuffer {
    return FfiConverterTypeTreeDiffItem.lower(value)
}


public struct TreeId {
    public var peer: UInt64
    public var counter: Int32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(peer: UInt64, counter: Int32) {
        self.peer = peer
        self.counter = counter
    }
}


extension TreeId: Sendable {} 
extension TreeId: Equatable, Hashable {
    public static func ==(lhs: TreeId, rhs: TreeId) -> Bool {
        if lhs.peer != rhs.peer {
            return false
        }
        if lhs.counter != rhs.counter {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(peer)
        hasher.combine(counter)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTreeID: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TreeId {
        return
            try TreeId(
                peer: FfiConverterUInt64.read(from: &buf), 
                counter: FfiConverterInt32.read(from: &buf)
        )
    }

    public static func write(_ value: TreeId, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.peer, into: &buf)
        FfiConverterInt32.write(value.counter, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTreeID_lift(_ buf: RustBuffer) throws -> TreeId {
    return try FfiConverterTypeTreeID.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTreeID_lower(_ value: TreeId) -> RustBuffer {
    return FfiConverterTypeTreeID.lower(value)
}


public struct UndoItemMeta {
    public var value: LoroValue
    public var cursors: [CursorWithPos]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(value: LoroValue, cursors: [CursorWithPos]) {
        self.value = value
        self.cursors = cursors
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeUndoItemMeta: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UndoItemMeta {
        return
            try UndoItemMeta(
                value: FfiConverterTypeLoroValue.read(from: &buf), 
                cursors: FfiConverterSequenceTypeCursorWithPos.read(from: &buf)
        )
    }

    public static func write(_ value: UndoItemMeta, into buf: inout [UInt8]) {
        FfiConverterTypeLoroValue.write(value.value, into: &buf)
        FfiConverterSequenceTypeCursorWithPos.write(value.cursors, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUndoItemMeta_lift(_ buf: RustBuffer) throws -> UndoItemMeta {
    return try FfiConverterTypeUndoItemMeta.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUndoItemMeta_lower(_ value: UndoItemMeta) -> RustBuffer {
    return FfiConverterTypeUndoItemMeta.lower(value)
}


public struct UpdateOptions {
    public var timeoutMs: Double?
    public var useRefinedDiff: Bool

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(timeoutMs: Double?, useRefinedDiff: Bool) {
        self.timeoutMs = timeoutMs
        self.useRefinedDiff = useRefinedDiff
    }
}


extension UpdateOptions: Sendable {} 
extension UpdateOptions: Equatable, Hashable {
    public static func ==(lhs: UpdateOptions, rhs: UpdateOptions) -> Bool {
        if lhs.timeoutMs != rhs.timeoutMs {
            return false
        }
        if lhs.useRefinedDiff != rhs.useRefinedDiff {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(timeoutMs)
        hasher.combine(useRefinedDiff)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeUpdateOptions: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UpdateOptions {
        return
            try UpdateOptions(
                timeoutMs: FfiConverterOptionDouble.read(from: &buf), 
                useRefinedDiff: FfiConverterBool.read(from: &buf)
        )
    }

    public static func write(_ value: UpdateOptions, into buf: inout [UInt8]) {
        FfiConverterOptionDouble.write(value.timeoutMs, into: &buf)
        FfiConverterBool.write(value.useRefinedDiff, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUpdateOptions_lift(_ buf: RustBuffer) throws -> UpdateOptions {
    return try FfiConverterTypeUpdateOptions.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUpdateOptions_lower(_ value: UpdateOptions) -> RustBuffer {
    return FfiConverterTypeUpdateOptions.lower(value)
}


public struct VersionVectorDiff {
    /**
     * need to add these spans to move from right to left
     */
    public var retreat: [UInt64: CounterSpan]
    /**
     * need to add these spans to move from left to right
     */
    public var forward: [UInt64: CounterSpan]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * need to add these spans to move from right to left
         */retreat: [UInt64: CounterSpan], 
        /**
         * need to add these spans to move from left to right
         */forward: [UInt64: CounterSpan]) {
        self.retreat = retreat
        self.forward = forward
    }
}


extension VersionVectorDiff: Sendable {} 
extension VersionVectorDiff: Equatable, Hashable {
    public static func ==(lhs: VersionVectorDiff, rhs: VersionVectorDiff) -> Bool {
        if lhs.retreat != rhs.retreat {
            return false
        }
        if lhs.forward != rhs.forward {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(retreat)
        hasher.combine(forward)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeVersionVectorDiff: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VersionVectorDiff {
        return
            try VersionVectorDiff(
                retreat: FfiConverterDictionaryUInt64TypeCounterSpan.read(from: &buf), 
                forward: FfiConverterDictionaryUInt64TypeCounterSpan.read(from: &buf)
        )
    }

    public static func write(_ value: VersionVectorDiff, into buf: inout [UInt8]) {
        FfiConverterDictionaryUInt64TypeCounterSpan.write(value.retreat, into: &buf)
        FfiConverterDictionaryUInt64TypeCounterSpan.write(value.forward, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeVersionVectorDiff_lift(_ buf: RustBuffer) throws -> VersionVectorDiff {
    return try FfiConverterTypeVersionVectorDiff.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeVersionVectorDiff_lower(_ value: VersionVectorDiff) -> RustBuffer {
    return FfiConverterTypeVersionVectorDiff.lower(value)
}


public enum CannotFindRelativePosition {

    
    
    case ContainerDeleted(message: String)
    
    case HistoryCleared(message: String)
    
    case IdNotFound(message: String)
    
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCannotFindRelativePosition: FfiConverterRustBuffer {
    typealias SwiftType = CannotFindRelativePosition

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CannotFindRelativePosition {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .ContainerDeleted(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .HistoryCleared(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .IdNotFound(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: CannotFindRelativePosition, into buf: inout [UInt8]) {
        switch value {

        

        
        case .ContainerDeleted(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .HistoryCleared(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .IdNotFound(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))

        
        }
    }
}


extension CannotFindRelativePosition: Equatable, Hashable {}

extension CannotFindRelativePosition: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}


public enum ChangeTravelError {

    
    
    case TargetIdNotFound(message: String)
    
    case TargetVersionNotIncluded(message: String)
    
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeChangeTravelError: FfiConverterRustBuffer {
    typealias SwiftType = ChangeTravelError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ChangeTravelError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .TargetIdNotFound(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .TargetVersionNotIncluded(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ChangeTravelError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .TargetIdNotFound(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .TargetVersionNotIncluded(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))

        
        }
    }
}


extension ChangeTravelError: Equatable, Hashable {}

extension ChangeTravelError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ContainerId {
    
    case root(name: String, containerType: ContainerType
    )
    case normal(peer: UInt64, counter: Int32, containerType: ContainerType
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeContainerID: FfiConverterRustBuffer {
    typealias SwiftType = ContainerId

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ContainerId {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .root(name: try FfiConverterString.read(from: &buf), containerType: try FfiConverterTypeContainerType.read(from: &buf)
        )
        
        case 2: return .normal(peer: try FfiConverterUInt64.read(from: &buf), counter: try FfiConverterInt32.read(from: &buf), containerType: try FfiConverterTypeContainerType.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ContainerId, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .root(name,containerType):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(name, into: &buf)
            FfiConverterTypeContainerType.write(containerType, into: &buf)
            
        
        case let .normal(peer,counter,containerType):
            writeInt(&buf, Int32(2))
            FfiConverterUInt64.write(peer, into: &buf)
            FfiConverterInt32.write(counter, into: &buf)
            FfiConverterTypeContainerType.write(containerType, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeContainerID_lift(_ buf: RustBuffer) throws -> ContainerId {
    return try FfiConverterTypeContainerID.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeContainerID_lower(_ value: ContainerId) -> RustBuffer {
    return FfiConverterTypeContainerID.lower(value)
}


extension ContainerId: Sendable {} 
extension ContainerId: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ContainerType {
    
    case text
    case map
    case list
    case movableList
    case tree
    case counter
    case unknown(kind: UInt8
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeContainerType: FfiConverterRustBuffer {
    typealias SwiftType = ContainerType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ContainerType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .text
        
        case 2: return .map
        
        case 3: return .list
        
        case 4: return .movableList
        
        case 5: return .tree
        
        case 6: return .counter
        
        case 7: return .unknown(kind: try FfiConverterUInt8.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ContainerType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .text:
            writeInt(&buf, Int32(1))
        
        
        case .map:
            writeInt(&buf, Int32(2))
        
        
        case .list:
            writeInt(&buf, Int32(3))
        
        
        case .movableList:
            writeInt(&buf, Int32(4))
        
        
        case .tree:
            writeInt(&buf, Int32(5))
        
        
        case .counter:
            writeInt(&buf, Int32(6))
        
        
        case let .unknown(kind):
            writeInt(&buf, Int32(7))
            FfiConverterUInt8.write(kind, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeContainerType_lift(_ buf: RustBuffer) throws -> ContainerType {
    return try FfiConverterTypeContainerType.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeContainerType_lower(_ value: ContainerType) -> RustBuffer {
    return FfiConverterTypeContainerType.lower(value)
}


extension ContainerType: Sendable {} 
extension ContainerType: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Diff {
    
    case list(diff: [ListDiffItem]
    )
    case text(diff: [TextDelta]
    )
    case map(diff: MapDelta
    )
    case tree(diff: TreeDiff
    )
    case counter(diff: Double
    )
    case unknown
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeDiff: FfiConverterRustBuffer {
    typealias SwiftType = Diff

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Diff {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .list(diff: try FfiConverterSequenceTypeListDiffItem.read(from: &buf)
        )
        
        case 2: return .text(diff: try FfiConverterSequenceTypeTextDelta.read(from: &buf)
        )
        
        case 3: return .map(diff: try FfiConverterTypeMapDelta.read(from: &buf)
        )
        
        case 4: return .tree(diff: try FfiConverterTypeTreeDiff.read(from: &buf)
        )
        
        case 5: return .counter(diff: try FfiConverterDouble.read(from: &buf)
        )
        
        case 6: return .unknown
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Diff, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .list(diff):
            writeInt(&buf, Int32(1))
            FfiConverterSequenceTypeListDiffItem.write(diff, into: &buf)
            
        
        case let .text(diff):
            writeInt(&buf, Int32(2))
            FfiConverterSequenceTypeTextDelta.write(diff, into: &buf)
            
        
        case let .map(diff):
            writeInt(&buf, Int32(3))
            FfiConverterTypeMapDelta.write(diff, into: &buf)
            
        
        case let .tree(diff):
            writeInt(&buf, Int32(4))
            FfiConverterTypeTreeDiff.write(diff, into: &buf)
            
        
        case let .counter(diff):
            writeInt(&buf, Int32(5))
            FfiConverterDouble.write(diff, into: &buf)
            
        
        case .unknown:
            writeInt(&buf, Int32(6))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDiff_lift(_ buf: RustBuffer) throws -> Diff {
    return try FfiConverterTypeDiff.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDiff_lower(_ value: Diff) -> RustBuffer {
    return FfiConverterTypeDiff.lower(value)
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum EphemeralEventTrigger {
    
    case local
    case `import`
    case timeout
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeEphemeralEventTrigger: FfiConverterRustBuffer {
    typealias SwiftType = EphemeralEventTrigger

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> EphemeralEventTrigger {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .local
        
        case 2: return .`import`
        
        case 3: return .timeout
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: EphemeralEventTrigger, into buf: inout [UInt8]) {
        switch value {
        
        
        case .local:
            writeInt(&buf, Int32(1))
        
        
        case .`import`:
            writeInt(&buf, Int32(2))
        
        
        case .timeout:
            writeInt(&buf, Int32(3))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEphemeralEventTrigger_lift(_ buf: RustBuffer) throws -> EphemeralEventTrigger {
    return try FfiConverterTypeEphemeralEventTrigger.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEphemeralEventTrigger_lower(_ value: EphemeralEventTrigger) -> RustBuffer {
    return FfiConverterTypeEphemeralEventTrigger.lower(value)
}


extension EphemeralEventTrigger: Sendable {} 
extension EphemeralEventTrigger: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * The kind of the event trigger.
 */

public enum EventTriggerKind {
    
    /**
     * The event is triggered by a local transaction.
     */
    case local
    /**
     * The event is triggered by importing
     */
    case `import`
    /**
     * The event is triggered by checkout
     */
    case checkout
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeEventTriggerKind: FfiConverterRustBuffer {
    typealias SwiftType = EventTriggerKind

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> EventTriggerKind {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .local
        
        case 2: return .`import`
        
        case 3: return .checkout
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: EventTriggerKind, into buf: inout [UInt8]) {
        switch value {
        
        
        case .local:
            writeInt(&buf, Int32(1))
        
        
        case .`import`:
            writeInt(&buf, Int32(2))
        
        
        case .checkout:
            writeInt(&buf, Int32(3))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEventTriggerKind_lift(_ buf: RustBuffer) throws -> EventTriggerKind {
    return try FfiConverterTypeEventTriggerKind.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEventTriggerKind_lower(_ value: EventTriggerKind) -> RustBuffer {
    return FfiConverterTypeEventTriggerKind.lower(value)
}


extension EventTriggerKind: Sendable {} 
extension EventTriggerKind: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ExpandType {
    
    case before
    case after
    case both
    case none
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeExpandType: FfiConverterRustBuffer {
    typealias SwiftType = ExpandType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ExpandType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .before
        
        case 2: return .after
        
        case 3: return .both
        
        case 4: return .none
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ExpandType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .before:
            writeInt(&buf, Int32(1))
        
        
        case .after:
            writeInt(&buf, Int32(2))
        
        
        case .both:
            writeInt(&buf, Int32(3))
        
        
        case .none:
            writeInt(&buf, Int32(4))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeExpandType_lift(_ buf: RustBuffer) throws -> ExpandType {
    return try FfiConverterTypeExpandType.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeExpandType_lower(_ value: ExpandType) -> RustBuffer {
    return FfiConverterTypeExpandType.lower(value)
}


extension ExpandType: Sendable {} 
extension ExpandType: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Index {
    
    case key(key: String
    )
    case seq(index: UInt32
    )
    case node(target: TreeId
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeIndex: FfiConverterRustBuffer {
    typealias SwiftType = Index

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Index {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .key(key: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .seq(index: try FfiConverterUInt32.read(from: &buf)
        )
        
        case 3: return .node(target: try FfiConverterTypeTreeID.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Index, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .key(key):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(key, into: &buf)
            
        
        case let .seq(index):
            writeInt(&buf, Int32(2))
            FfiConverterUInt32.write(index, into: &buf)
            
        
        case let .node(target):
            writeInt(&buf, Int32(3))
            FfiConverterTypeTreeID.write(target, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeIndex_lift(_ buf: RustBuffer) throws -> Index {
    return try FfiConverterTypeIndex.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeIndex_lower(_ value: Index) -> RustBuffer {
    return FfiConverterTypeIndex.lower(value)
}


extension Index: Sendable {} 
extension Index: Equatable, Hashable {}




public enum JsonPathError {

    
    
    case InvalidJsonPath(message: String)
    
    case EvaluationError(message: String)
    
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeJsonPathError: FfiConverterRustBuffer {
    typealias SwiftType = JsonPathError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> JsonPathError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .InvalidJsonPath(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .EvaluationError(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: JsonPathError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .InvalidJsonPath(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .EvaluationError(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))

        
        }
    }
}


extension JsonPathError: Equatable, Hashable {}

extension JsonPathError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ListDiffItem {
    
    /**
     * Insert a new element into the list.
     */
    case insert(insert: [ValueOrContainer], isMove: Bool
    )
    /**
     * Delete n elements from the list at the current index.
     */
    case delete(delete: UInt32
    )
    /**
     * Retain n elements in the list.
     *
     * This is used to keep the current index unchanged.
     */
    case retain(retain: UInt32
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeListDiffItem: FfiConverterRustBuffer {
    typealias SwiftType = ListDiffItem

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ListDiffItem {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .insert(insert: try FfiConverterSequenceTypeValueOrContainer.read(from: &buf), isMove: try FfiConverterBool.read(from: &buf)
        )
        
        case 2: return .delete(delete: try FfiConverterUInt32.read(from: &buf)
        )
        
        case 3: return .retain(retain: try FfiConverterUInt32.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ListDiffItem, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .insert(insert,isMove):
            writeInt(&buf, Int32(1))
            FfiConverterSequenceTypeValueOrContainer.write(insert, into: &buf)
            FfiConverterBool.write(isMove, into: &buf)
            
        
        case let .delete(delete):
            writeInt(&buf, Int32(2))
            FfiConverterUInt32.write(delete, into: &buf)
            
        
        case let .retain(retain):
            writeInt(&buf, Int32(3))
            FfiConverterUInt32.write(retain, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeListDiffItem_lift(_ buf: RustBuffer) throws -> ListDiffItem {
    return try FfiConverterTypeListDiffItem.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeListDiffItem_lower(_ value: ListDiffItem) -> RustBuffer {
    return FfiConverterTypeListDiffItem.lower(value)
}





public enum LoroEncodeError {

    
    
    case FrontiersNotFound(message: String)
    
    case ShallowSnapshotIncompatibleWithOldFormat(message: String)
    
    case UnknownContainer(message: String)
    
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLoroEncodeError: FfiConverterRustBuffer {
    typealias SwiftType = LoroEncodeError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoroEncodeError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .FrontiersNotFound(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .ShallowSnapshotIncompatibleWithOldFormat(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .UnknownContainer(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LoroEncodeError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .FrontiersNotFound(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .ShallowSnapshotIncompatibleWithOldFormat(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .UnknownContainer(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))

        
        }
    }
}


extension LoroEncodeError: Equatable, Hashable {}

extension LoroEncodeError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}


public enum LoroError {

    
    
    case UnmatchedContext(message: String)
    
    case DecodeVersionVectorError(message: String)
    
    case DecodeError(message: String)
    
    case DecodeDataCorruptionError(message: String)
    
    case DecodeChecksumMismatchError(message: String)
    
    case IncompatibleFutureEncodingError(message: String)
    
    case JsError(message: String)
    
    case LockError(message: String)
    
    case DuplicatedTransactionError(message: String)
    
    case NotFoundError(message: String)
    
    case TransactionError(message: String)
    
    case OutOfBound(message: String)
    
    case UsedOpId(message: String)
    
    case TreeError(message: String)
    
    case ArgErr(message: String)
    
    case AutoCommitNotStarted(message: String)
    
    case StyleConfigMissing(message: String)
    
    case Unknown(message: String)
    
    case FrontiersNotFound(message: String)
    
    case ImportWhenInTxn(message: String)
    
    case MisuseDetachedContainer(message: String)
    
    case NotImplemented(message: String)
    
    case ReattachAttachedContainer(message: String)
    
    case EditWhenDetached(message: String)
    
    case UndoInvalidIdSpan(message: String)
    
    case UndoWithDifferentPeerId(message: String)
    
    case InvalidJsonSchema(message: String)
    
    case Utf8InUnicodeCodePoint(message: String)
    
    case Utf16InUnicodeCodePoint(message: String)
    
    case EndIndexLessThanStartIndex(message: String)
    
    case InvalidRootContainerName(message: String)
    
    case ImportUpdatesThatDependsOnOutdatedVersion(message: String)
    
    case SwitchToVersionBeforeShallowRoot(message: String)
    
    case ContainerDeleted(message: String)
    
    case ConcurrentOpsWithSamePeerId(message: String)
    
    case InvalidPeerId(message: String)
    
    case ContainersNotFound(message: String)
    
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLoroError: FfiConverterRustBuffer {
    typealias SwiftType = LoroError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoroError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .UnmatchedContext(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .DecodeVersionVectorError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .DecodeError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .DecodeDataCorruptionError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 5: return .DecodeChecksumMismatchError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 6: return .IncompatibleFutureEncodingError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 7: return .JsError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 8: return .LockError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 9: return .DuplicatedTransactionError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 10: return .NotFoundError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 11: return .TransactionError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 12: return .OutOfBound(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 13: return .UsedOpId(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 14: return .TreeError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 15: return .ArgErr(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 16: return .AutoCommitNotStarted(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 17: return .StyleConfigMissing(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 18: return .Unknown(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 19: return .FrontiersNotFound(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 20: return .ImportWhenInTxn(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 21: return .MisuseDetachedContainer(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 22: return .NotImplemented(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 23: return .ReattachAttachedContainer(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 24: return .EditWhenDetached(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 25: return .UndoInvalidIdSpan(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 26: return .UndoWithDifferentPeerId(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 27: return .InvalidJsonSchema(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 28: return .Utf8InUnicodeCodePoint(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 29: return .Utf16InUnicodeCodePoint(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 30: return .EndIndexLessThanStartIndex(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 31: return .InvalidRootContainerName(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 32: return .ImportUpdatesThatDependsOnOutdatedVersion(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 33: return .SwitchToVersionBeforeShallowRoot(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 34: return .ContainerDeleted(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 35: return .ConcurrentOpsWithSamePeerId(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 36: return .InvalidPeerId(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 37: return .ContainersNotFound(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LoroError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .UnmatchedContext(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .DecodeVersionVectorError(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .DecodeError(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))
        case .DecodeDataCorruptionError(_ /* message is ignored*/):
            writeInt(&buf, Int32(4))
        case .DecodeChecksumMismatchError(_ /* message is ignored*/):
            writeInt(&buf, Int32(5))
        case .IncompatibleFutureEncodingError(_ /* message is ignored*/):
            writeInt(&buf, Int32(6))
        case .JsError(_ /* message is ignored*/):
            writeInt(&buf, Int32(7))
        case .LockError(_ /* message is ignored*/):
            writeInt(&buf, Int32(8))
        case .DuplicatedTransactionError(_ /* message is ignored*/):
            writeInt(&buf, Int32(9))
        case .NotFoundError(_ /* message is ignored*/):
            writeInt(&buf, Int32(10))
        case .TransactionError(_ /* message is ignored*/):
            writeInt(&buf, Int32(11))
        case .OutOfBound(_ /* message is ignored*/):
            writeInt(&buf, Int32(12))
        case .UsedOpId(_ /* message is ignored*/):
            writeInt(&buf, Int32(13))
        case .TreeError(_ /* message is ignored*/):
            writeInt(&buf, Int32(14))
        case .ArgErr(_ /* message is ignored*/):
            writeInt(&buf, Int32(15))
        case .AutoCommitNotStarted(_ /* message is ignored*/):
            writeInt(&buf, Int32(16))
        case .StyleConfigMissing(_ /* message is ignored*/):
            writeInt(&buf, Int32(17))
        case .Unknown(_ /* message is ignored*/):
            writeInt(&buf, Int32(18))
        case .FrontiersNotFound(_ /* message is ignored*/):
            writeInt(&buf, Int32(19))
        case .ImportWhenInTxn(_ /* message is ignored*/):
            writeInt(&buf, Int32(20))
        case .MisuseDetachedContainer(_ /* message is ignored*/):
            writeInt(&buf, Int32(21))
        case .NotImplemented(_ /* message is ignored*/):
            writeInt(&buf, Int32(22))
        case .ReattachAttachedContainer(_ /* message is ignored*/):
            writeInt(&buf, Int32(23))
        case .EditWhenDetached(_ /* message is ignored*/):
            writeInt(&buf, Int32(24))
        case .UndoInvalidIdSpan(_ /* message is ignored*/):
            writeInt(&buf, Int32(25))
        case .UndoWithDifferentPeerId(_ /* message is ignored*/):
            writeInt(&buf, Int32(26))
        case .InvalidJsonSchema(_ /* message is ignored*/):
            writeInt(&buf, Int32(27))
        case .Utf8InUnicodeCodePoint(_ /* message is ignored*/):
            writeInt(&buf, Int32(28))
        case .Utf16InUnicodeCodePoint(_ /* message is ignored*/):
            writeInt(&buf, Int32(29))
        case .EndIndexLessThanStartIndex(_ /* message is ignored*/):
            writeInt(&buf, Int32(30))
        case .InvalidRootContainerName(_ /* message is ignored*/):
            writeInt(&buf, Int32(31))
        case .ImportUpdatesThatDependsOnOutdatedVersion(_ /* message is ignored*/):
            writeInt(&buf, Int32(32))
        case .SwitchToVersionBeforeShallowRoot(_ /* message is ignored*/):
            writeInt(&buf, Int32(33))
        case .ContainerDeleted(_ /* message is ignored*/):
            writeInt(&buf, Int32(34))
        case .ConcurrentOpsWithSamePeerId(_ /* message is ignored*/):
            writeInt(&buf, Int32(35))
        case .InvalidPeerId(_ /* message is ignored*/):
            writeInt(&buf, Int32(36))
        case .ContainersNotFound(_ /* message is ignored*/):
            writeInt(&buf, Int32(37))

        
        }
    }
}


extension LoroError: Equatable, Hashable {}

extension LoroError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum LoroValue {
    
    case null
    case bool(value: Bool
    )
    case double(value: Double
    )
    case i64(value: Int64
    )
    case binary(value: Data
    )
    case string(value: String
    )
    case list(value: [LoroValue]
    )
    case map(value: [String: LoroValue]
    )
    case container(value: ContainerId
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLoroValue: FfiConverterRustBuffer {
    typealias SwiftType = LoroValue

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoroValue {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .null
        
        case 2: return .bool(value: try FfiConverterBool.read(from: &buf)
        )
        
        case 3: return .double(value: try FfiConverterDouble.read(from: &buf)
        )
        
        case 4: return .i64(value: try FfiConverterInt64.read(from: &buf)
        )
        
        case 5: return .binary(value: try FfiConverterData.read(from: &buf)
        )
        
        case 6: return .string(value: try FfiConverterString.read(from: &buf)
        )
        
        case 7: return .list(value: try FfiConverterSequenceTypeLoroValue.read(from: &buf)
        )
        
        case 8: return .map(value: try FfiConverterDictionaryStringTypeLoroValue.read(from: &buf)
        )
        
        case 9: return .container(value: try FfiConverterTypeContainerID.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LoroValue, into buf: inout [UInt8]) {
        switch value {
        
        
        case .null:
            writeInt(&buf, Int32(1))
        
        
        case let .bool(value):
            writeInt(&buf, Int32(2))
            FfiConverterBool.write(value, into: &buf)
            
        
        case let .double(value):
            writeInt(&buf, Int32(3))
            FfiConverterDouble.write(value, into: &buf)
            
        
        case let .i64(value):
            writeInt(&buf, Int32(4))
            FfiConverterInt64.write(value, into: &buf)
            
        
        case let .binary(value):
            writeInt(&buf, Int32(5))
            FfiConverterData.write(value, into: &buf)
            
        
        case let .string(value):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(value, into: &buf)
            
        
        case let .list(value):
            writeInt(&buf, Int32(7))
            FfiConverterSequenceTypeLoroValue.write(value, into: &buf)
            
        
        case let .map(value):
            writeInt(&buf, Int32(8))
            FfiConverterDictionaryStringTypeLoroValue.write(value, into: &buf)
            
        
        case let .container(value):
            writeInt(&buf, Int32(9))
            FfiConverterTypeContainerID.write(value, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLoroValue_lift(_ buf: RustBuffer) throws -> LoroValue {
    return try FfiConverterTypeLoroValue.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLoroValue_lower(_ value: LoroValue) -> RustBuffer {
    return FfiConverterTypeLoroValue.lower(value)
}


extension LoroValue: Sendable {} 
extension LoroValue: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Ordering {
    
    case less
    case equal
    case greater
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeOrdering: FfiConverterRustBuffer {
    typealias SwiftType = Ordering

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Ordering {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .less
        
        case 2: return .equal
        
        case 3: return .greater
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Ordering, into buf: inout [UInt8]) {
        switch value {
        
        
        case .less:
            writeInt(&buf, Int32(1))
        
        
        case .equal:
            writeInt(&buf, Int32(2))
        
        
        case .greater:
            writeInt(&buf, Int32(3))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOrdering_lift(_ buf: RustBuffer) throws -> Ordering {
    return try FfiConverterTypeOrdering.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOrdering_lower(_ value: Ordering) -> RustBuffer {
    return FfiConverterTypeOrdering.lower(value)
}


extension Ordering: Sendable {} 
extension Ordering: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Side {
    
    case left
    case middle
    case right
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSide: FfiConverterRustBuffer {
    typealias SwiftType = Side

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Side {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .left
        
        case 2: return .middle
        
        case 3: return .right
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Side, into buf: inout [UInt8]) {
        switch value {
        
        
        case .left:
            writeInt(&buf, Int32(1))
        
        
        case .middle:
            writeInt(&buf, Int32(2))
        
        
        case .right:
            writeInt(&buf, Int32(3))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSide_lift(_ buf: RustBuffer) throws -> Side {
    return try FfiConverterTypeSide.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSide_lower(_ value: Side) -> RustBuffer {
    return FfiConverterTypeSide.lower(value)
}


extension Side: Sendable {} 
extension Side: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum TextDelta {
    
    case retain(retain: UInt32, attributes: [String: LoroValue]?
    )
    case insert(insert: String, attributes: [String: LoroValue]?
    )
    case delete(delete: UInt32
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTextDelta: FfiConverterRustBuffer {
    typealias SwiftType = TextDelta

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TextDelta {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .retain(retain: try FfiConverterUInt32.read(from: &buf), attributes: try FfiConverterOptionDictionaryStringTypeLoroValue.read(from: &buf)
        )
        
        case 2: return .insert(insert: try FfiConverterString.read(from: &buf), attributes: try FfiConverterOptionDictionaryStringTypeLoroValue.read(from: &buf)
        )
        
        case 3: return .delete(delete: try FfiConverterUInt32.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TextDelta, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .retain(retain,attributes):
            writeInt(&buf, Int32(1))
            FfiConverterUInt32.write(retain, into: &buf)
            FfiConverterOptionDictionaryStringTypeLoroValue.write(attributes, into: &buf)
            
        
        case let .insert(insert,attributes):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(insert, into: &buf)
            FfiConverterOptionDictionaryStringTypeLoroValue.write(attributes, into: &buf)
            
        
        case let .delete(delete):
            writeInt(&buf, Int32(3))
            FfiConverterUInt32.write(delete, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTextDelta_lift(_ buf: RustBuffer) throws -> TextDelta {
    return try FfiConverterTypeTextDelta.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTextDelta_lower(_ value: TextDelta) -> RustBuffer {
    return FfiConverterTypeTextDelta.lower(value)
}


extension TextDelta: Sendable {} 
extension TextDelta: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum TreeExternalDiff {
    
    case create(parent: TreeParentId, index: UInt32, fractionalIndex: String
    )
    case move(parent: TreeParentId, index: UInt32, fractionalIndex: String, oldParent: TreeParentId, oldIndex: UInt32
    )
    case delete(oldParent: TreeParentId, oldIndex: UInt32
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTreeExternalDiff: FfiConverterRustBuffer {
    typealias SwiftType = TreeExternalDiff

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TreeExternalDiff {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .create(parent: try FfiConverterTypeTreeParentId.read(from: &buf), index: try FfiConverterUInt32.read(from: &buf), fractionalIndex: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .move(parent: try FfiConverterTypeTreeParentId.read(from: &buf), index: try FfiConverterUInt32.read(from: &buf), fractionalIndex: try FfiConverterString.read(from: &buf), oldParent: try FfiConverterTypeTreeParentId.read(from: &buf), oldIndex: try FfiConverterUInt32.read(from: &buf)
        )
        
        case 3: return .delete(oldParent: try FfiConverterTypeTreeParentId.read(from: &buf), oldIndex: try FfiConverterUInt32.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TreeExternalDiff, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .create(parent,index,fractionalIndex):
            writeInt(&buf, Int32(1))
            FfiConverterTypeTreeParentId.write(parent, into: &buf)
            FfiConverterUInt32.write(index, into: &buf)
            FfiConverterString.write(fractionalIndex, into: &buf)
            
        
        case let .move(parent,index,fractionalIndex,oldParent,oldIndex):
            writeInt(&buf, Int32(2))
            FfiConverterTypeTreeParentId.write(parent, into: &buf)
            FfiConverterUInt32.write(index, into: &buf)
            FfiConverterString.write(fractionalIndex, into: &buf)
            FfiConverterTypeTreeParentId.write(oldParent, into: &buf)
            FfiConverterUInt32.write(oldIndex, into: &buf)
            
        
        case let .delete(oldParent,oldIndex):
            writeInt(&buf, Int32(3))
            FfiConverterTypeTreeParentId.write(oldParent, into: &buf)
            FfiConverterUInt32.write(oldIndex, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTreeExternalDiff_lift(_ buf: RustBuffer) throws -> TreeExternalDiff {
    return try FfiConverterTypeTreeExternalDiff.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTreeExternalDiff_lower(_ value: TreeExternalDiff) -> RustBuffer {
    return FfiConverterTypeTreeExternalDiff.lower(value)
}


extension TreeExternalDiff: Sendable {} 
extension TreeExternalDiff: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum TreeParentId {
    
    case node(id: TreeId
    )
    case root
    case deleted
    case unexist
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTreeParentId: FfiConverterRustBuffer {
    typealias SwiftType = TreeParentId

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TreeParentId {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .node(id: try FfiConverterTypeTreeID.read(from: &buf)
        )
        
        case 2: return .root
        
        case 3: return .deleted
        
        case 4: return .unexist
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TreeParentId, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .node(id):
            writeInt(&buf, Int32(1))
            FfiConverterTypeTreeID.write(id, into: &buf)
            
        
        case .root:
            writeInt(&buf, Int32(2))
        
        
        case .deleted:
            writeInt(&buf, Int32(3))
        
        
        case .unexist:
            writeInt(&buf, Int32(4))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTreeParentId_lift(_ buf: RustBuffer) throws -> TreeParentId {
    return try FfiConverterTypeTreeParentId.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTreeParentId_lower(_ value: TreeParentId) -> RustBuffer {
    return FfiConverterTypeTreeParentId.lower(value)
}


extension TreeParentId: Sendable {} 
extension TreeParentId: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum UndoOrRedo {
    
    case undo
    case redo
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeUndoOrRedo: FfiConverterRustBuffer {
    typealias SwiftType = UndoOrRedo

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UndoOrRedo {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .undo
        
        case 2: return .redo
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: UndoOrRedo, into buf: inout [UInt8]) {
        switch value {
        
        
        case .undo:
            writeInt(&buf, Int32(1))
        
        
        case .redo:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUndoOrRedo_lift(_ buf: RustBuffer) throws -> UndoOrRedo {
    return try FfiConverterTypeUndoOrRedo.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUndoOrRedo_lower(_ value: UndoOrRedo) -> RustBuffer {
    return FfiConverterTypeUndoOrRedo.lower(value)
}


extension UndoOrRedo: Sendable {} 
extension UndoOrRedo: Equatable, Hashable {}




public enum UpdateTimeoutError {

    
    
    case Timeout(message: String)
    
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeUpdateTimeoutError: FfiConverterRustBuffer {
    typealias SwiftType = UpdateTimeoutError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UpdateTimeoutError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Timeout(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: UpdateTimeoutError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .Timeout(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))

        
        }
    }
}


extension UpdateTimeoutError: Equatable, Hashable {}

extension UpdateTimeoutError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionUInt32: FfiConverterRustBuffer {
    typealias SwiftType = UInt32?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt32.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt32.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionInt32: FfiConverterRustBuffer {
    typealias SwiftType = Int32?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterInt32.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterInt32.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionInt64: FfiConverterRustBuffer {
    typealias SwiftType = Int64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionDouble: FfiConverterRustBuffer {
    typealias SwiftType = Double?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDouble.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDouble.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeCursor: FfiConverterRustBuffer {
    typealias SwiftType = Cursor?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeCursor.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeCursor.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeFrontiers: FfiConverterRustBuffer {
    typealias SwiftType = Frontiers?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeFrontiers.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeFrontiers.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeLoroCounter: FfiConverterRustBuffer {
    typealias SwiftType = LoroCounter?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeLoroCounter.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeLoroCounter.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeLoroDoc: FfiConverterRustBuffer {
    typealias SwiftType = LoroDoc?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeLoroDoc.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeLoroDoc.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeLoroList: FfiConverterRustBuffer {
    typealias SwiftType = LoroList?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeLoroList.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeLoroList.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeLoroMap: FfiConverterRustBuffer {
    typealias SwiftType = LoroMap?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeLoroMap.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeLoroMap.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeLoroMovableList: FfiConverterRustBuffer {
    typealias SwiftType = LoroMovableList?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeLoroMovableList.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeLoroMovableList.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeLoroText: FfiConverterRustBuffer {
    typealias SwiftType = LoroText?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeLoroText.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeLoroText.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeLoroTree: FfiConverterRustBuffer {
    typealias SwiftType = LoroTree?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeLoroTree.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeLoroTree.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeLoroUnknown: FfiConverterRustBuffer {
    typealias SwiftType = LoroUnknown?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeLoroUnknown.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeLoroUnknown.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeOnPop: FfiConverterRustBuffer {
    typealias SwiftType = OnPop?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeOnPop.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeOnPop.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeOnPush: FfiConverterRustBuffer {
    typealias SwiftType = OnPush?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeOnPush.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeOnPush.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeValueOrContainer: FfiConverterRustBuffer {
    typealias SwiftType = ValueOrContainer?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeValueOrContainer.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeValueOrContainer.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeVersionVector: FfiConverterRustBuffer {
    typealias SwiftType = VersionVector?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeVersionVector.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeVersionVector.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeChangeMeta: FfiConverterRustBuffer {
    typealias SwiftType = ChangeMeta?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeChangeMeta.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeChangeMeta.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeCounterSpan: FfiConverterRustBuffer {
    typealias SwiftType = CounterSpan?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeCounterSpan.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeCounterSpan.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeDiffEvent: FfiConverterRustBuffer {
    typealias SwiftType = DiffEvent?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeDiffEvent.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeDiffEvent.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeID: FfiConverterRustBuffer {
    typealias SwiftType = Id?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeID.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeID.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeStyleConfig: FfiConverterRustBuffer {
    typealias SwiftType = StyleConfig?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeStyleConfig.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeStyleConfig.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeContainerID: FfiConverterRustBuffer {
    typealias SwiftType = ContainerId?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeContainerID.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeContainerID.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeContainerType: FfiConverterRustBuffer {
    typealias SwiftType = ContainerType?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeContainerType.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeContainerType.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeDiff: FfiConverterRustBuffer {
    typealias SwiftType = Diff?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeDiff.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeDiff.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeLoroValue: FfiConverterRustBuffer {
    typealias SwiftType = LoroValue?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeLoroValue.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeLoroValue.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeOrdering: FfiConverterRustBuffer {
    typealias SwiftType = Ordering?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeOrdering.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeOrdering.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionSequenceTypeContainerPath: FfiConverterRustBuffer {
    typealias SwiftType = [ContainerPath]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypeContainerPath.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypeContainerPath.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionSequenceTypeTreeID: FfiConverterRustBuffer {
    typealias SwiftType = [TreeId]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypeTreeID.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypeTreeID.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionDictionaryUInt64TypeCounterSpan: FfiConverterRustBuffer {
    typealias SwiftType = [UInt64: CounterSpan]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDictionaryUInt64TypeCounterSpan.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDictionaryUInt64TypeCounterSpan.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionDictionaryStringTypeLoroValue: FfiConverterRustBuffer {
    typealias SwiftType = [String: LoroValue]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDictionaryStringTypeLoroValue.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDictionaryStringTypeLoroValue.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceUInt64: FfiConverterRustBuffer {
    typealias SwiftType = [UInt64]

    public static func write(_ value: [UInt64], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterUInt64.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt64] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt64]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterUInt64.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceData: FfiConverterRustBuffer {
    typealias SwiftType = [Data]

    public static func write(_ value: [Data], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterData.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Data] {
        let len: Int32 = try readInt(&buf)
        var seq = [Data]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterData.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeValueOrContainer: FfiConverterRustBuffer {
    typealias SwiftType = [ValueOrContainer]

    public static func write(_ value: [ValueOrContainer], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeValueOrContainer.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ValueOrContainer] {
        let len: Int32 = try readInt(&buf)
        var seq = [ValueOrContainer]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeValueOrContainer.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeContainerDiff: FfiConverterRustBuffer {
    typealias SwiftType = [ContainerDiff]

    public static func write(_ value: [ContainerDiff], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeContainerDiff.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ContainerDiff] {
        let len: Int32 = try readInt(&buf)
        var seq = [ContainerDiff]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeContainerDiff.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeContainerIDAndDiff: FfiConverterRustBuffer {
    typealias SwiftType = [ContainerIdAndDiff]

    public static func write(_ value: [ContainerIdAndDiff], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeContainerIDAndDiff.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ContainerIdAndDiff] {
        let len: Int32 = try readInt(&buf)
        var seq = [ContainerIdAndDiff]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeContainerIDAndDiff.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeContainerPath: FfiConverterRustBuffer {
    typealias SwiftType = [ContainerPath]

    public static func write(_ value: [ContainerPath], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeContainerPath.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ContainerPath] {
        let len: Int32 = try readInt(&buf)
        var seq = [ContainerPath]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeContainerPath.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeCursorWithPos: FfiConverterRustBuffer {
    typealias SwiftType = [CursorWithPos]

    public static func write(_ value: [CursorWithPos], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeCursorWithPos.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [CursorWithPos] {
        let len: Int32 = try readInt(&buf)
        var seq = [CursorWithPos]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeCursorWithPos.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeID: FfiConverterRustBuffer {
    typealias SwiftType = [Id]

    public static func write(_ value: [Id], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeID.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Id] {
        let len: Int32 = try readInt(&buf)
        var seq = [Id]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeID.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeIdSpan: FfiConverterRustBuffer {
    typealias SwiftType = [IdSpan]

    public static func write(_ value: [IdSpan], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeIdSpan.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [IdSpan] {
        let len: Int32 = try readInt(&buf)
        var seq = [IdSpan]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeIdSpan.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypePathItem: FfiConverterRustBuffer {
    typealias SwiftType = [PathItem]

    public static func write(_ value: [PathItem], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypePathItem.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [PathItem] {
        let len: Int32 = try readInt(&buf)
        var seq = [PathItem]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypePathItem.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeTreeDiffItem: FfiConverterRustBuffer {
    typealias SwiftType = [TreeDiffItem]

    public static func write(_ value: [TreeDiffItem], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeTreeDiffItem.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [TreeDiffItem] {
        let len: Int32 = try readInt(&buf)
        var seq = [TreeDiffItem]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeTreeDiffItem.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeTreeID: FfiConverterRustBuffer {
    typealias SwiftType = [TreeId]

    public static func write(_ value: [TreeId], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeTreeID.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [TreeId] {
        let len: Int32 = try readInt(&buf)
        var seq = [TreeId]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeTreeID.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeContainerID: FfiConverterRustBuffer {
    typealias SwiftType = [ContainerId]

    public static func write(_ value: [ContainerId], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeContainerID.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ContainerId] {
        let len: Int32 = try readInt(&buf)
        var seq = [ContainerId]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeContainerID.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeIndex: FfiConverterRustBuffer {
    typealias SwiftType = [Index]

    public static func write(_ value: [Index], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeIndex.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Index] {
        let len: Int32 = try readInt(&buf)
        var seq = [Index]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeIndex.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeListDiffItem: FfiConverterRustBuffer {
    typealias SwiftType = [ListDiffItem]

    public static func write(_ value: [ListDiffItem], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeListDiffItem.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ListDiffItem] {
        let len: Int32 = try readInt(&buf)
        var seq = [ListDiffItem]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeListDiffItem.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeLoroValue: FfiConverterRustBuffer {
    typealias SwiftType = [LoroValue]

    public static func write(_ value: [LoroValue], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeLoroValue.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [LoroValue] {
        let len: Int32 = try readInt(&buf)
        var seq = [LoroValue]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeLoroValue.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeTextDelta: FfiConverterRustBuffer {
    typealias SwiftType = [TextDelta]

    public static func write(_ value: [TextDelta], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeTextDelta.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [TextDelta] {
        let len: Int32 = try readInt(&buf)
        var seq = [TextDelta]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeTextDelta.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDictionaryUInt64TypeCounterSpan: FfiConverterRustBuffer {
    public static func write(_ value: [UInt64: CounterSpan], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterUInt64.write(key, into: &buf)
            FfiConverterTypeCounterSpan.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt64: CounterSpan] {
        let len: Int32 = try readInt(&buf)
        var dict = [UInt64: CounterSpan]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterUInt64.read(from: &buf)
            let value = try FfiConverterTypeCounterSpan.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDictionaryUInt64TypePeerInfo: FfiConverterRustBuffer {
    public static func write(_ value: [UInt64: PeerInfo], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterUInt64.write(key, into: &buf)
            FfiConverterTypePeerInfo.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt64: PeerInfo] {
        let len: Int32 = try readInt(&buf)
        var dict = [UInt64: PeerInfo]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterUInt64.read(from: &buf)
            let value = try FfiConverterTypePeerInfo.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDictionaryStringTypeLoroValue: FfiConverterRustBuffer {
    public static func write(_ value: [String: LoroValue], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterTypeLoroValue.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: LoroValue] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: LoroValue]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterTypeLoroValue.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDictionaryStringOptionTypeValueOrContainer: FfiConverterRustBuffer {
    public static func write(_ value: [String: ValueOrContainer?], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterOptionTypeValueOrContainer.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: ValueOrContainer?] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: ValueOrContainer?]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterOptionTypeValueOrContainer.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}
/**
 * Decodes the metadata for an imported blob from the provided bytes.
 */
public func decodeImportBlobMeta(bytes: Data, checkChecksum: Bool)throws  -> ImportBlobMetadata {
    return try  FfiConverterTypeImportBlobMetadata.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_func_decode_import_blob_meta(
        FfiConverterData.lower(bytes),
        FfiConverterBool.lower(checkChecksum),$0
    )
})
}
public func getVersion() -> String {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_loro_fn_func_get_version($0
    )
})
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_loro_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_loro_checksum_func_decode_import_blob_meta() != 2769) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_func_get_version() != 3250) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_awareness_apply() != 41900) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_awareness_encode() != 37443) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_awareness_encode_all() != 38982) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_awareness_get_all_states() != 30017) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_awareness_get_local_state() != 59706) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_awareness_peer() != 10202) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_awareness_remove_outdated() != 1483) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_awareness_set_local_state() != 517) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_changeancestorstraveler_travel() != 17239) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_changemodifier_set_message() != 44190) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_changemodifier_set_timestamp() != 6652) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_configure_fork() != 57176) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_configure_merge_interval() != 43546) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_configure_record_timestamp() != 41033) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_configure_set_merge_interval() != 4893) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_configure_set_record_timestamp() != 30145) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_configure_text_style_config() != 50151) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_containeridlike_as_container_id() != 41081) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_diffbatch_get_diff() != 42707) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_diffbatch_push() != 56678) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_ephemeralstore_apply() != 27412) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_ephemeralstore_delete() != 37001) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_ephemeralstore_encode() != 35731) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_ephemeralstore_encode_all() != 1587) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_ephemeralstore_get() != 37668) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_ephemeralstore_get_all_states() != 11717) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_ephemeralstore_keys() != 27585) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_ephemeralstore_remove_outdated() != 35095) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_ephemeralstore_set() != 21774) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_ephemeralstore_subscribe() != 54930) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_ephemeralstore_subscribe_local_update() != 54586) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_ephemeralsubscriber_on_ephemeral_event() != 33183) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_firstcommitfrompeercallback_on_first_commit_from_peer() != 51977) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_fractionalindex_to_string() != 57024) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_frontiers_encode() != 48230) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_frontiers_eq() != 20207) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_localephemerallistener_on_ephemeral_update() != 59317) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_localupdatecallback_on_local_update() != 21789) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorocounter_decrement() != 53919) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorocounter_doc() != 54846) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorocounter_get_attached() != 22021) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorocounter_get_value() != 44616) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorocounter_id() != 31148) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorocounter_increment() != 47367) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorocounter_is_attached() != 51768) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorocounter_is_deleted() != 12079) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_apply_diff() != 45393) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_attach() != 7252) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_check_state_correctness_slow() != 43878) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_checkout() != 415) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_checkout_to_latest() != 2349) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_clear_next_commit_options() != 45217) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_cmp_with_frontiers() != 31942) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_commit() != 53174) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_commit_with() != 29999) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_compact_change_store() != 26224) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_config() != 3400) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_config_default_text_style() != 15083) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_config_text_style() != 52393) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_detach() != 61399) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_diff() != 38416) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_export_json_in_id_span() != 26608) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_export_json_updates() != 15152) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_export_json_updates_without_peer_compression() != 23184) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_export_shallow_snapshot() != 27927) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_export_snapshot() != 61274) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_export_snapshot_at() != 64602) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_export_state_only() != 16747) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_export_updates() != 57637) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_export_updates_in_range() != 22491) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_find_id_spans_between() != 1313) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_fork() != 45665) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_fork_at() != 40377) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_free_diff_calculator() != 32937) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_free_history_cache() != 22144) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_frontiers_to_vv() != 11123) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_get_by_path() != 35945) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_get_by_str_path() != 6739) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_get_change() != 17896) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_get_changed_containers_in() != 52454) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_get_counter() != 12597) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_get_cursor_pos() != 30480) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_get_deep_value() != 3404) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_get_deep_value_with_id() != 49124) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_get_list() != 9609) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_get_map() != 63137) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_get_movable_list() != 7302) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_get_path_to_container() != 62623) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_get_pending_txn_len() != 15050) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_get_text() != 56069) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_get_tree() != 54189) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_get_value() != 29857) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_has_container() != 41856) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_has_history_cache() != 53741) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_import() != 11528) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_import_batch() != 34010) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_import_json_updates() != 57379) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_import_with() != 12897) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_is_detached() != 30909) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_is_shallow() != 53044) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_jsonpath() != 15996) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_len_changes() != 62401) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_len_ops() != 11644) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_log_estimate_size() != 19429) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_minimize_frontiers() != 39579) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_oplog_frontiers() != 49043) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_oplog_vv() != 56754) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_peer_id() != 35449) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_revert_to() != 48346) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_set_change_merge_interval() != 55133) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_set_next_commit_message() != 18940) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_set_next_commit_options() != 13250) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_set_next_commit_origin() != 27549) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_set_next_commit_timestamp() != 30492) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_set_peer_id() != 29379) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_set_record_timestamp() != 15945) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_shallow_since_vv() != 13449) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_state_frontiers() != 17079) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_state_vv() != 1627) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_subscribe() != 7981) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_subscribe_first_commit_from_peer() != 45629) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_subscribe_local_update() != 58652) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_subscribe_pre_commit() != 54832) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_subscribe_root() != 16564) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_travel_change_ancestors() != 39918) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_vv_to_frontiers() != 47960) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_clear() != 61243) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_delete() != 40414) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_doc() != 4182) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_get() != 36174) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_get_attached() != 5208) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_get_cursor() != 42636) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_get_deep_value() != 9355) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_get_id_at() != 63640) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_get_value() != 14384) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_id() != 33887) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_insert() != 19544) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_insert_counter_container() != 41569) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_insert_list_container() != 42165) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_insert_map_container() != 25622) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_insert_movable_list_container() != 23559) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_insert_text_container() != 26631) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_insert_tree_container() != 15665) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_is_attached() != 60548) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_is_deleted() != 44383) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_is_empty() != 13469) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_len() != 22800) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_pop() != 20748) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_push() != 32091) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_to_vec() != 34199) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromap_clear() != 22445) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromap_delete() != 54675) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromap_doc() != 4684) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromap_get() != 57695) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromap_get_attached() != 22266) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromap_get_deep_value() != 23748) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromap_get_last_editor() != 54864) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromap_get_or_create_counter_container() != 34280) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromap_get_or_create_list_container() != 51559) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromap_get_or_create_map_container() != 8592) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromap_get_or_create_movable_list_container() != 15746) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromap_get_or_create_text_container() != 13374) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromap_get_or_create_tree_container() != 4760) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromap_get_value() != 7268) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromap_id() != 65486) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromap_insert() != 748) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromap_insert_counter_container() != 5567) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromap_insert_list_container() != 52804) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromap_insert_map_container() != 36523) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromap_insert_movable_list_container() != 21076) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromap_insert_text_container() != 50348) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromap_insert_tree_container() != 59771) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromap_is_attached() != 6283) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromap_is_deleted() != 20980) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromap_is_empty() != 38768) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromap_keys() != 11621) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromap_len() != 38088) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromap_values() != 46629) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromovablelist_clear() != 17252) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromovablelist_delete() != 51786) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromovablelist_doc() != 13729) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromovablelist_get() != 10599) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromovablelist_get_attached() != 53503) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromovablelist_get_creator_at() != 21542) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromovablelist_get_cursor() != 118) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromovablelist_get_deep_value() != 18542) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromovablelist_get_last_editor_at() != 8998) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromovablelist_get_last_mover_at() != 26603) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromovablelist_get_value() != 50843) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromovablelist_id() != 9803) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromovablelist_insert() != 28537) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromovablelist_insert_counter_container() != 56222) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromovablelist_insert_list_container() != 47190) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromovablelist_insert_map_container() != 57810) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromovablelist_insert_movable_list_container() != 6019) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromovablelist_insert_text_container() != 48945) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromovablelist_insert_tree_container() != 33670) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromovablelist_is_attached() != 50724) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromovablelist_is_deleted() != 37438) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromovablelist_is_empty() != 44651) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromovablelist_len() != 28945) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromovablelist_mov() != 8301) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromovablelist_pop() != 52086) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromovablelist_push() != 2828) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromovablelist_set() != 27054) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromovablelist_set_counter_container() != 1414) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromovablelist_set_list_container() != 20393) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromovablelist_set_map_container() != 20297) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromovablelist_set_movable_list_container() != 52254) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromovablelist_set_text_container() != 31935) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromovablelist_set_tree_container() != 8298) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_loromovablelist_to_vec() != 28826) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotext_apply_delta() != 32084) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotext_delete() != 47933) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotext_delete_utf8() != 44384) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotext_doc() != 41195) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotext_get_attached() != 16919) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotext_get_cursor() != 57876) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotext_get_editor_at_unicode_pos() != 24596) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotext_get_richtext_value() != 45999) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotext_id() != 30925) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotext_insert() != 10847) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotext_insert_utf8() != 8484) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotext_is_attached() != 45378) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotext_is_deleted() != 31871) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotext_is_empty() != 7961) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotext_len_unicode() != 46650) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotext_len_utf16() != 18865) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotext_len_utf8() != 29025) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotext_mark() != 42690) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotext_push_str() != 2374) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotext_slice() != 43152) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotext_splice() != 30467) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotext_to_delta() != 15868) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotext_to_string() != 63765) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotext_unmark() != 14351) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotext_update() != 16538) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotext_update_by_line() != 29301) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotree_children() != 4750) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotree_children_num() != 50997) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotree_contains() != 62174) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotree_create() != 55490) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotree_create_at() != 64751) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotree_delete() != 36355) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotree_disable_fractional_index() != 52853) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotree_doc() != 23287) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotree_enable_fractional_index() != 39633) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotree_fractional_index() != 51036) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotree_get_attached() != 57142) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotree_get_last_move_id() != 12557) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotree_get_meta() != 3068) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotree_get_value() != 44704) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotree_get_value_with_meta() != 7497) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotree_id() != 4862) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotree_is_attached() != 37303) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotree_is_deleted() != 8644) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotree_is_fractional_index_enabled() != 19364) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotree_is_node_deleted() != 7339) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotree_mov() != 33288) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotree_mov_after() != 48871) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotree_mov_before() != 39654) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotree_mov_to() != 21629) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotree_nodes() != 31738) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotree_parent() != 6903) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotree_roots() != 60881) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorounknown_id() != 65156) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorovaluelike_as_loro_value() != 23668) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_onpop_on_pop() != 39438) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_onpush_on_push() != 46111) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_precommitcallback_on_pre_commit() != 58911) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_styleconfigmap_get() != 25442) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_styleconfigmap_insert() != 49128) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_subscriber_on_diff() != 462) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_subscription_detach() != 64699) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_subscription_unsubscribe() != 24473) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_undomanager_add_exclude_origin_prefix() != 61306) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_undomanager_can_redo() != 61543) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_undomanager_can_undo() != 51532) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_undomanager_record_new_checkpoint() != 28438) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_undomanager_redo() != 54874) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_undomanager_set_max_undo_steps() != 43243) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_undomanager_set_merge_interval() != 13688) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_undomanager_set_on_pop() != 4141) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_undomanager_set_on_push() != 31009) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_undomanager_undo() != 14430) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_unsubscriber_on_unsubscribe() != 17877) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_valueorcontainer_as_container() != 61163) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_valueorcontainer_as_loro_counter() != 51072) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_valueorcontainer_as_loro_list() != 16144) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_valueorcontainer_as_loro_map() != 62391) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_valueorcontainer_as_loro_movable_list() != 49359) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_valueorcontainer_as_loro_text() != 8015) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_valueorcontainer_as_loro_tree() != 39545) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_valueorcontainer_as_loro_unknown() != 9911) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_valueorcontainer_as_value() != 9638) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_valueorcontainer_container_type() != 56498) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_valueorcontainer_is_container() != 16329) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_valueorcontainer_is_value() != 13911) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_versionvector_diff() != 29529) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_versionvector_encode() != 64665) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_versionvector_eq() != 30406) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_versionvector_extend_to_include_vv() != 28076) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_versionvector_get_last() != 45434) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_versionvector_get_missing_span() != 2797) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_versionvector_includes_id() != 50408) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_versionvector_includes_vv() != 23089) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_versionvector_intersect_span() != 54748) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_versionvector_merge() != 23694) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_versionvector_partial_cmp() != 27570) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_versionvector_set_end() != 27313) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_versionvector_set_last() != 40968) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_constructor_awareness_new() != 33037) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_constructor_cursor_new() != 11721) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_constructor_diffbatch_new() != 62583) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_constructor_ephemeralstore_new() != 60190) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_constructor_fractionalindex_from_bytes() != 35415) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_constructor_fractionalindex_from_hex_string() != 10737) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_constructor_frontiers_decode() != 27043) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_constructor_frontiers_from_id() != 60928) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_constructor_frontiers_from_ids() != 61832) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_constructor_frontiers_new() != 5172) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_constructor_lorocounter_new() != 44867) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_constructor_lorodoc_new() != 54129) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_constructor_lorolist_new() != 2861) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_constructor_loromap_new() != 63806) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_constructor_loromovablelist_new() != 32944) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_constructor_lorotext_new() != 33191) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_constructor_lorotree_new() != 42150) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_constructor_styleconfigmap_default_rich_text_config() != 46944) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_constructor_styleconfigmap_new() != 23831) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_constructor_undomanager_new() != 35328) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_constructor_versionvector_decode() != 19639) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_constructor_versionvector_new() != 31126) {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiCallbackInitChangeAncestorsTraveler()
    uniffiCallbackInitContainerIdLike()
    uniffiCallbackInitEphemeralSubscriber()
    uniffiCallbackInitFirstCommitFromPeerCallback()
    uniffiCallbackInitLocalEphemeralListener()
    uniffiCallbackInitLocalUpdateCallback()
    uniffiCallbackInitLoroValueLike()
    uniffiCallbackInitOnPop()
    uniffiCallbackInitOnPush()
    uniffiCallbackInitPreCommitCallback()
    uniffiCallbackInitSubscriber()
    uniffiCallbackInitUnsubscriber()
    return InitializationResult.ok
}()

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all